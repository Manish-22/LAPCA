Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     primary_expression -> variable_use
Rule 2     primary_expression -> const_or_parenthesis
Rule 3     const_or_parenthesis -> CONSTANT
Rule 4     const_or_parenthesis -> CHARACTER
Rule 5     const_or_parenthesis -> STRING_LITERAL
Rule 6     const_or_parenthesis -> L_PAREN expression R_PAREN
Rule 7     variable_use -> IDENTIFIER
Rule 8     function_call -> IDENTIFIER L_PAREN R_PAREN
Rule 9     function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN
Rule 10    postfix_expression -> primary_expression
Rule 11    postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE
Rule 12    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 13    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 14    postfix_expression -> postfix_expression INC_OP
Rule 15    postfix_expression -> postfix_expression DEC_OP
Rule 16    postfix_expression -> function_call
Rule 17    argument_expression_list -> assignment_expression
Rule 18    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 19    unary_expression -> postfix_expression
Rule 20    unary_expression -> INC_OP unary_expression
Rule 21    unary_expression -> DEC_OP unary_expression
Rule 22    unary_expression -> unary_op_before_cast_exp
Rule 23    unary_expression -> SIZEOF unary_expression
Rule 24    unary_expression -> SIZEOF L_PAREN type_name R_PAREN
Rule 25    unary_op_before_cast_exp -> unary_operator cast_expression
Rule 26    unary_operator -> AMP
Rule 27    unary_operator -> STAR
Rule 28    unary_operator -> PLUS
Rule 29    unary_operator -> MINUS
Rule 30    unary_operator -> TILDA
Rule 31    unary_operator -> EXCLAIM
Rule 32    cast_expression -> unary_expression
Rule 33    cast_expression -> L_PAREN type_name R_PAREN cast_expression
Rule 34    multiplicative_expression -> cast_expression
Rule 35    multiplicative_expression -> multiplicative_expression STAR cast_expression
Rule 36    multiplicative_expression -> multiplicative_expression SLASH cast_expression
Rule 37    multiplicative_expression -> multiplicative_expression PERCENT cast_expression
Rule 38    additive_expression -> multiplicative_expression
Rule 39    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 40    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 41    shift_expression -> additive_expression
Rule 42    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 43    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 44    relational_expression -> shift_expression
Rule 45    relational_expression -> relational_expression LESS shift_expression
Rule 46    relational_expression -> relational_expression GREATER shift_expression
Rule 47    relational_expression -> relational_expression LE_OP shift_expression
Rule 48    relational_expression -> relational_expression GE_OP shift_expression
Rule 49    equality_expression -> relational_expression
Rule 50    equality_expression -> equality_exp_lhs EQ_OP relational_expression
Rule 51    equality_expression -> equality_exp_lhs NE_OP relational_expression
Rule 52    equality_exp_lhs -> equality_expression
Rule 53    and_expression -> equality_expression
Rule 54    and_expression -> and_expression AMP equality_expression
Rule 55    exclusive_or_expression -> and_expression
Rule 56    exclusive_or_expression -> exclusive_or_expression CARET and_expression
Rule 57    inclusive_or_expression -> exclusive_or_expression
Rule 58    inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression
Rule 59    logical_and_expression -> inclusive_or_expression
Rule 60    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 61    logical_or_expression -> logical_and_expression
Rule 62    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 63    conditional_expression -> logical_or_expression
Rule 64    conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression
Rule 65    assignment_expression -> conditional_expression
Rule 66    assignment_expression -> assignment_lhs assignment_operator assignment_expression
Rule 67    assignment_lhs -> unary_expression
Rule 68    assignment_operator -> EQUAL
Rule 69    assignment_operator -> MUL_ASSIGN
Rule 70    assignment_operator -> DIV_ASSIGN
Rule 71    assignment_operator -> MOD_ASSIGN
Rule 72    assignment_operator -> ADD_ASSIGN
Rule 73    assignment_operator -> SUB_ASSIGN
Rule 74    assignment_operator -> LEFT_ASSIGN
Rule 75    assignment_operator -> RIGHT_ASSIGN
Rule 76    assignment_operator -> AND_ASSIGN
Rule 77    assignment_operator -> XOR_ASSIGN
Rule 78    assignment_operator -> OR_ASSIGN
Rule 79    expression -> assignment_expression
Rule 80    expression -> expression COMMA assignment_expression
Rule 81    constant_expression -> conditional_expression
Rule 82    declaration -> declaration_specifiers SEMI
Rule 83    declaration -> declaration_specifiers init_declarator_list SEMI
Rule 84    declaration_specifiers -> storage_class_specifier
Rule 85    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 86    declaration_specifiers -> type_specifier
Rule 87    declaration_specifiers -> type_specifier declaration_specifiers
Rule 88    declaration_specifiers -> type_qualifier
Rule 89    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 90    init_declarator_list -> init_declarator
Rule 91    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 92    init_declarator -> uninitialized_declaration
Rule 93    init_declarator -> initialized_declaration
Rule 94    initialized_declaration -> declarator EQUAL initializer
Rule 95    uninitialized_declaration -> declarator
Rule 96    storage_class_specifier -> TYPEDEF
Rule 97    storage_class_specifier -> EXTERN
Rule 98    storage_class_specifier -> STATIC
Rule 99    storage_class_specifier -> AUTO
Rule 100   storage_class_specifier -> REGISTER
Rule 101   type -> VOID
Rule 102   type -> CHAR
Rule 103   type -> SHORT
Rule 104   type -> INT
Rule 105   type -> LONG
Rule 106   type -> FLOAT
Rule 107   type -> DOUBLE
Rule 108   type -> SIGNED
Rule 109   type -> UNSIGNED
Rule 110   type_specifier -> type
Rule 111   type_specifier -> struct_or_union_specifier
Rule 112   type_specifier -> enum_specifier
Rule 113   struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
Rule 114   struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE
Rule 115   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 116   struct_or_union -> STRUCT
Rule 117   struct_or_union -> UNION
Rule 118   struct_declaration_list -> struct_declaration
Rule 119   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 120   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI
Rule 121   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 122   specifier_qualifier_list -> type_specifier
Rule 123   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 124   specifier_qualifier_list -> type_qualifier
Rule 125   struct_declarator_list -> struct_declarator
Rule 126   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 127   struct_declarator -> declarator
Rule 128   struct_declarator -> COLON constant_expression
Rule 129   struct_declarator -> declarator COLON constant_expression
Rule 130   enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE
Rule 131   enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
Rule 132   enum_specifier -> ENUM IDENTIFIER
Rule 133   enumerator_list -> enumerator
Rule 134   enumerator_list -> enumerator_list COMMA enumerator
Rule 135   enumerator -> IDENTIFIER
Rule 136   enumerator -> IDENTIFIER EQUAL constant_expression
Rule 137   type_qualifier -> CONST
Rule 138   type_qualifier -> VOLATILE
Rule 139   declarator -> pointer direct_declarator
Rule 140   declarator -> direct_declarator
Rule 141   direct_declarator -> variable_declaration
Rule 142   direct_declarator -> function_declaration
Rule 143   variable_declaration -> variable_declaration1
Rule 144   variable_declaration -> variable_declaration2
Rule 145   variable_declaration1 -> IDENTIFIER
Rule 146   variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE
Rule 147   variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE
Rule 148   variable_declaration2 -> L_PAREN declarator R_PAREN
Rule 149   function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN
Rule 150   function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN
Rule 151   function_declaration -> IDENTIFIER L_PAREN R_PAREN
Rule 152   pointer -> STAR
Rule 153   pointer -> STAR type_qualifier_list
Rule 154   pointer -> STAR pointer
Rule 155   pointer -> STAR type_qualifier_list pointer
Rule 156   type_qualifier_list -> type_qualifier
Rule 157   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 158   parameter_type_list -> parameter_list
Rule 159   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 160   parameter_list -> parameter_declaration
Rule 161   parameter_list -> parameter_list COMMA parameter_declaration
Rule 162   parameter_declaration -> declaration_specifiers declarator
Rule 163   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 164   parameter_declaration -> declaration_specifiers
Rule 165   identifier_list -> IDENTIFIER
Rule 166   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 167   type_name -> specifier_qualifier_list
Rule 168   type_name -> specifier_qualifier_list abstract_declarator
Rule 169   abstract_declarator -> pointer
Rule 170   abstract_declarator -> direct_abstract_declarator
Rule 171   abstract_declarator -> pointer direct_abstract_declarator
Rule 172   direct_abstract_declarator -> L_SQUARE R_SQUARE
Rule 173   direct_abstract_declarator -> L_PAREN R_PAREN
Rule 174   direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE
Rule 175   direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN
Rule 176   direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN
Rule 177   direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN
Rule 178   direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE
Rule 179   direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
Rule 180   direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
Rule 181   initializer -> assignment_expression
Rule 182   initializer -> L_BRACE initializer_list R_BRACE
Rule 183   initializer -> L_BRACE initializer_list COMMA R_BRACE
Rule 184   initializer_list -> initializer
Rule 185   initializer_list -> initializer_list COMMA initializer
Rule 186   statement -> labeled_statement
Rule 187   statement -> compound_statement
Rule 188   statement -> expression_statement
Rule 189   statement -> selection_statement
Rule 190   statement -> iteration_statement
Rule 191   statement -> jump_statement
Rule 192   labeled_statement -> IDENTIFIER COLON statement
Rule 193   labeled_statement -> CASE constant_expression COLON statement
Rule 194   labeled_statement -> DEFAULT COLON statement
Rule 195   compound_statement -> compound_statement_begin R_BRACE
Rule 196   compound_statement -> compound_statement_begin statement_list R_BRACE
Rule 197   compound_statement -> compound_statement_begin declaration_list R_BRACE
Rule 198   compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE
Rule 199   compound_statement_begin -> L_BRACE
Rule 200   declaration_list -> declaration
Rule 201   declaration_list -> declaration_list declaration
Rule 202   statement_list -> statement
Rule 203   statement_list -> statement_list statement
Rule 204   expression_statement -> SEMI
Rule 205   expression_statement -> expression SEMI
Rule 206   selection_statement -> IF L_PAREN expression R_PAREN statement
Rule 207   selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement
Rule 208   selection_statement -> SWITCH L_PAREN expression R_PAREN statement
Rule 209   iteration_statement -> iteration_header iteration_body
Rule 210   iteration_header -> WHILE L_PAREN expression R_PAREN
Rule 211   iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN
Rule 212   iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN
Rule 213   iteration_body -> statement
Rule 214   jump_statement -> GOTO IDENTIFIER SEMI
Rule 215   jump_statement -> CONTINUE SEMI
Rule 216   jump_statement -> BREAK SEMI
Rule 217   jump_statement -> RETURN SEMI
Rule 218   jump_statement -> RETURN expression SEMI
Rule 219   translation_unit -> external_declaration
Rule 220   translation_unit -> external_declaration translation_unit
Rule 221   external_declaration -> function_definition
Rule 222   external_declaration -> other_declarations
Rule 223   other_declarations -> declaration
Rule 224   function_header -> fheader_type1
Rule 225   function_header -> fheader_type2
Rule 226   fheader_type1 -> declaration_specifiers function_declaration
Rule 227   fheader_type2 -> function_declaration
Rule 228   function_definition -> function_header compound_statement
Rule 229   function_definition -> function_header declaration_list compound_statement

Terminals, with rules where they appear

ADD_ASSIGN           : 72
AMP                  : 26 54
AND_ASSIGN           : 76
AND_OP               : 60
AUTO                 : 99
BREAK                : 216
CARET                : 56
CASE                 : 193
CHAR                 : 102
CHARACTER            : 4
COLON                : 64 128 129 192 193 194
COMMA                : 18 80 91 126 134 159 161 166 183 185
CONST                : 137
CONSTANT             : 3
CONTINUE             : 215
DEC_OP               : 15 21
DEFAULT              : 194
DIV_ASSIGN           : 70
DOT                  : 12
DOUBLE               : 107
ELLIPSIS             : 159
ELSE                 : 207
ENUM                 : 130 131 132
EQUAL                : 68 94 136
EQ_OP                : 50
EXCLAIM              : 31
EXTERN               : 97
FLOAT                : 106
FOR                  : 211 212
GE_OP                : 48
GOTO                 : 214
GREATER              : 46
IDENTIFIER           : 7 8 9 12 13 113 115 131 132 135 136 145 146 147 149 150 151 165 166 192 214
IF                   : 206 207
INC_OP               : 14 20
INT                  : 104
LEFT_ASSIGN          : 74
LEFT_OP              : 42
LESS                 : 45
LE_OP                : 47
LONG                 : 105
L_BRACE              : 113 114 130 131 182 183 199
L_PAREN              : 6 8 9 24 33 148 149 150 151 173 175 176 177 180 206 207 208 210 211 212
L_SQUARE             : 11 146 147 172 174 178 179
MINUS                : 29 40
MOD_ASSIGN           : 71
MUL_ASSIGN           : 69
NE_OP                : 51
OR_ASSIGN            : 78
OR_OP                : 62
PERCENT              : 37
PIPE                 : 58
PLUS                 : 28 39
PTR_OP               : 13
QUEST                : 64
REGISTER             : 100
RETURN               : 217 218
RIGHT_ASSIGN         : 75
RIGHT_OP             : 43
R_BRACE              : 113 114 130 131 182 183 195 196 197 198
R_PAREN              : 6 8 9 24 33 148 149 150 151 173 175 176 177 180 206 207 208 210 211 212
R_SQUARE             : 11 146 147 172 174 178 179
SEMI                 : 82 83 120 204 205 214 215 216 217 218
SHORT                : 103
SIGNED               : 108
SIZEOF               : 23 24
SLASH                : 36
STAR                 : 27 35 152 153 154 155
STATIC               : 98
STRING_LITERAL       : 5
STRUCT               : 116
SUB_ASSIGN           : 73
SWITCH               : 208
TILDA                : 30
TYPEDEF              : 96
UNION                : 117
UNSIGNED             : 109
VOID                 : 101
VOLATILE             : 138
WHILE                : 210
XOR_ASSIGN           : 77
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 163 168 175
additive_expression  : 39 40 41 42 43
and_expression       : 54 55 56
argument_expression_list : 9 18
assignment_expression : 17 18 66 79 80 181
assignment_lhs       : 66
assignment_operator  : 66
cast_expression      : 25 33 34 35 36 37
compound_statement   : 187 228 229
compound_statement_begin : 195 196 197 198
conditional_expression : 64 65 81
const_or_parenthesis : 2
constant_expression  : 128 129 136 146 174 179 193
declaration          : 200 201 223
declaration_list     : 197 198 201 229
declaration_specifiers : 82 83 85 87 89 162 163 164 226
declarator           : 94 95 127 129 148 162
direct_abstract_declarator : 170 171 177 178 179 180
direct_declarator    : 139 140
enum_specifier       : 112
enumerator           : 133 134
enumerator_list      : 130 131 134
equality_exp_lhs     : 50 51
equality_expression  : 52 53 54
exclusive_or_expression : 56 57 58
expression           : 6 11 64 80 205 206 207 208 210 212 218
expression_statement : 188 211 211 212 212
external_declaration : 219 220
fheader_type1        : 224
fheader_type2        : 225
function_call        : 16
function_declaration : 142 226 227
function_definition  : 221
function_header      : 228 229
identifier_list      : 150 166
inclusive_or_expression : 58 59 60
init_declarator      : 90 91
init_declarator_list : 83 91
initialized_declaration : 93
initializer          : 94 184 185
initializer_list     : 182 183 185
iteration_body       : 209
iteration_header     : 209
iteration_statement  : 190
jump_statement       : 191
labeled_statement    : 186
logical_and_expression : 60 61 62
logical_or_expression : 62 63 64
multiplicative_expression : 35 36 37 38 39 40
other_declarations   : 222
parameter_declaration : 160 161
parameter_list       : 158 159 161
parameter_type_list  : 149 176 180
pointer              : 139 154 155 169 171
postfix_expression   : 11 12 13 14 15 19
primary_expression   : 10
relational_expression : 45 46 47 48 49 50 51
selection_statement  : 189
shift_expression     : 42 43 44 45 46 47 48
specifier_qualifier_list : 120 121 123 167 168
statement            : 192 193 194 202 203 206 207 207 208 213
statement_list       : 196 198 203
storage_class_specifier : 84 85
struct_declaration   : 118 119
struct_declaration_list : 113 114 119
struct_declarator    : 125 126
struct_declarator_list : 120 126
struct_or_union      : 113 114 115
struct_or_union_specifier : 111
translation_unit     : 220 0
type                 : 110
type_name            : 24 33
type_qualifier       : 88 89 123 124 156 157
type_qualifier_list  : 153 155 157
type_specifier       : 86 87 121 122
unary_expression     : 20 21 23 32 67
unary_op_before_cast_exp : 22
unary_operator       : 25
uninitialized_declaration : 92
variable_declaration : 141
variable_declaration1 : 143
variable_declaration2 : 144
variable_use         : 1

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (219) translation_unit -> . external_declaration
    (220) translation_unit -> . external_declaration translation_unit
    (221) external_declaration -> . function_definition
    (222) external_declaration -> . other_declarations
    (228) function_definition -> . function_header compound_statement
    (229) function_definition -> . function_header declaration_list compound_statement
    (223) other_declarations -> . declaration
    (224) function_header -> . fheader_type1
    (225) function_header -> . fheader_type2
    (82) declaration -> . declaration_specifiers SEMI
    (83) declaration -> . declaration_specifiers init_declarator_list SEMI
    (226) fheader_type1 -> . declaration_specifiers function_declaration
    (227) fheader_type2 -> . function_declaration
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    IDENTIFIER      shift and go to state 14
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    other_declarations             shift and go to state 4
    function_header                shift and go to state 5
    declaration                    shift and go to state 6
    fheader_type1                  shift and go to state 7
    fheader_type2                  shift and go to state 8
    declaration_specifiers         shift and go to state 9
    function_declaration           shift and go to state 10
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 1

    (0) S' -> translation_unit .



state 2

    (219) translation_unit -> external_declaration .
    (220) translation_unit -> external_declaration . translation_unit
    (219) translation_unit -> . external_declaration
    (220) translation_unit -> . external_declaration translation_unit
    (221) external_declaration -> . function_definition
    (222) external_declaration -> . other_declarations
    (228) function_definition -> . function_header compound_statement
    (229) function_definition -> . function_header declaration_list compound_statement
    (223) other_declarations -> . declaration
    (224) function_header -> . fheader_type1
    (225) function_header -> . fheader_type2
    (82) declaration -> . declaration_specifiers SEMI
    (83) declaration -> . declaration_specifiers init_declarator_list SEMI
    (226) fheader_type1 -> . declaration_specifiers function_declaration
    (227) fheader_type2 -> . function_declaration
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    $end            reduce using rule 219 (translation_unit -> external_declaration .)
    IDENTIFIER      shift and go to state 14
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    external_declaration           shift and go to state 2
    translation_unit               shift and go to state 38
    function_definition            shift and go to state 3
    other_declarations             shift and go to state 4
    function_header                shift and go to state 5
    declaration                    shift and go to state 6
    fheader_type1                  shift and go to state 7
    fheader_type2                  shift and go to state 8
    declaration_specifiers         shift and go to state 9
    function_declaration           shift and go to state 10
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 3

    (221) external_declaration -> function_definition .

    IDENTIFIER      reduce using rule 221 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 221 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 221 (external_declaration -> function_definition .)
    STATIC          reduce using rule 221 (external_declaration -> function_definition .)
    AUTO            reduce using rule 221 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 221 (external_declaration -> function_definition .)
    CONST           reduce using rule 221 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 221 (external_declaration -> function_definition .)
    VOID            reduce using rule 221 (external_declaration -> function_definition .)
    CHAR            reduce using rule 221 (external_declaration -> function_definition .)
    SHORT           reduce using rule 221 (external_declaration -> function_definition .)
    INT             reduce using rule 221 (external_declaration -> function_definition .)
    LONG            reduce using rule 221 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 221 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 221 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 221 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 221 (external_declaration -> function_definition .)
    ENUM            reduce using rule 221 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 221 (external_declaration -> function_definition .)
    UNION           reduce using rule 221 (external_declaration -> function_definition .)
    $end            reduce using rule 221 (external_declaration -> function_definition .)


state 4

    (222) external_declaration -> other_declarations .

    IDENTIFIER      reduce using rule 222 (external_declaration -> other_declarations .)
    TYPEDEF         reduce using rule 222 (external_declaration -> other_declarations .)
    EXTERN          reduce using rule 222 (external_declaration -> other_declarations .)
    STATIC          reduce using rule 222 (external_declaration -> other_declarations .)
    AUTO            reduce using rule 222 (external_declaration -> other_declarations .)
    REGISTER        reduce using rule 222 (external_declaration -> other_declarations .)
    CONST           reduce using rule 222 (external_declaration -> other_declarations .)
    VOLATILE        reduce using rule 222 (external_declaration -> other_declarations .)
    VOID            reduce using rule 222 (external_declaration -> other_declarations .)
    CHAR            reduce using rule 222 (external_declaration -> other_declarations .)
    SHORT           reduce using rule 222 (external_declaration -> other_declarations .)
    INT             reduce using rule 222 (external_declaration -> other_declarations .)
    LONG            reduce using rule 222 (external_declaration -> other_declarations .)
    FLOAT           reduce using rule 222 (external_declaration -> other_declarations .)
    DOUBLE          reduce using rule 222 (external_declaration -> other_declarations .)
    SIGNED          reduce using rule 222 (external_declaration -> other_declarations .)
    UNSIGNED        reduce using rule 222 (external_declaration -> other_declarations .)
    ENUM            reduce using rule 222 (external_declaration -> other_declarations .)
    STRUCT          reduce using rule 222 (external_declaration -> other_declarations .)
    UNION           reduce using rule 222 (external_declaration -> other_declarations .)
    $end            reduce using rule 222 (external_declaration -> other_declarations .)


state 5

    (228) function_definition -> function_header . compound_statement
    (229) function_definition -> function_header . declaration_list compound_statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (200) declaration_list -> . declaration
    (201) declaration_list -> . declaration_list declaration
    (199) compound_statement_begin -> . L_BRACE
    (82) declaration -> . declaration_specifiers SEMI
    (83) declaration -> . declaration_specifiers init_declarator_list SEMI
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    L_BRACE         shift and go to state 43
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    compound_statement             shift and go to state 39
    declaration_list               shift and go to state 40
    compound_statement_begin       shift and go to state 41
    declaration                    shift and go to state 42
    declaration_specifiers         shift and go to state 44
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 6

    (223) other_declarations -> declaration .

    IDENTIFIER      reduce using rule 223 (other_declarations -> declaration .)
    TYPEDEF         reduce using rule 223 (other_declarations -> declaration .)
    EXTERN          reduce using rule 223 (other_declarations -> declaration .)
    STATIC          reduce using rule 223 (other_declarations -> declaration .)
    AUTO            reduce using rule 223 (other_declarations -> declaration .)
    REGISTER        reduce using rule 223 (other_declarations -> declaration .)
    CONST           reduce using rule 223 (other_declarations -> declaration .)
    VOLATILE        reduce using rule 223 (other_declarations -> declaration .)
    VOID            reduce using rule 223 (other_declarations -> declaration .)
    CHAR            reduce using rule 223 (other_declarations -> declaration .)
    SHORT           reduce using rule 223 (other_declarations -> declaration .)
    INT             reduce using rule 223 (other_declarations -> declaration .)
    LONG            reduce using rule 223 (other_declarations -> declaration .)
    FLOAT           reduce using rule 223 (other_declarations -> declaration .)
    DOUBLE          reduce using rule 223 (other_declarations -> declaration .)
    SIGNED          reduce using rule 223 (other_declarations -> declaration .)
    UNSIGNED        reduce using rule 223 (other_declarations -> declaration .)
    ENUM            reduce using rule 223 (other_declarations -> declaration .)
    STRUCT          reduce using rule 223 (other_declarations -> declaration .)
    UNION           reduce using rule 223 (other_declarations -> declaration .)
    $end            reduce using rule 223 (other_declarations -> declaration .)


state 7

    (224) function_header -> fheader_type1 .

    L_BRACE         reduce using rule 224 (function_header -> fheader_type1 .)
    TYPEDEF         reduce using rule 224 (function_header -> fheader_type1 .)
    EXTERN          reduce using rule 224 (function_header -> fheader_type1 .)
    STATIC          reduce using rule 224 (function_header -> fheader_type1 .)
    AUTO            reduce using rule 224 (function_header -> fheader_type1 .)
    REGISTER        reduce using rule 224 (function_header -> fheader_type1 .)
    CONST           reduce using rule 224 (function_header -> fheader_type1 .)
    VOLATILE        reduce using rule 224 (function_header -> fheader_type1 .)
    VOID            reduce using rule 224 (function_header -> fheader_type1 .)
    CHAR            reduce using rule 224 (function_header -> fheader_type1 .)
    SHORT           reduce using rule 224 (function_header -> fheader_type1 .)
    INT             reduce using rule 224 (function_header -> fheader_type1 .)
    LONG            reduce using rule 224 (function_header -> fheader_type1 .)
    FLOAT           reduce using rule 224 (function_header -> fheader_type1 .)
    DOUBLE          reduce using rule 224 (function_header -> fheader_type1 .)
    SIGNED          reduce using rule 224 (function_header -> fheader_type1 .)
    UNSIGNED        reduce using rule 224 (function_header -> fheader_type1 .)
    ENUM            reduce using rule 224 (function_header -> fheader_type1 .)
    STRUCT          reduce using rule 224 (function_header -> fheader_type1 .)
    UNION           reduce using rule 224 (function_header -> fheader_type1 .)


state 8

    (225) function_header -> fheader_type2 .

    L_BRACE         reduce using rule 225 (function_header -> fheader_type2 .)
    TYPEDEF         reduce using rule 225 (function_header -> fheader_type2 .)
    EXTERN          reduce using rule 225 (function_header -> fheader_type2 .)
    STATIC          reduce using rule 225 (function_header -> fheader_type2 .)
    AUTO            reduce using rule 225 (function_header -> fheader_type2 .)
    REGISTER        reduce using rule 225 (function_header -> fheader_type2 .)
    CONST           reduce using rule 225 (function_header -> fheader_type2 .)
    VOLATILE        reduce using rule 225 (function_header -> fheader_type2 .)
    VOID            reduce using rule 225 (function_header -> fheader_type2 .)
    CHAR            reduce using rule 225 (function_header -> fheader_type2 .)
    SHORT           reduce using rule 225 (function_header -> fheader_type2 .)
    INT             reduce using rule 225 (function_header -> fheader_type2 .)
    LONG            reduce using rule 225 (function_header -> fheader_type2 .)
    FLOAT           reduce using rule 225 (function_header -> fheader_type2 .)
    DOUBLE          reduce using rule 225 (function_header -> fheader_type2 .)
    SIGNED          reduce using rule 225 (function_header -> fheader_type2 .)
    UNSIGNED        reduce using rule 225 (function_header -> fheader_type2 .)
    ENUM            reduce using rule 225 (function_header -> fheader_type2 .)
    STRUCT          reduce using rule 225 (function_header -> fheader_type2 .)
    UNION           reduce using rule 225 (function_header -> fheader_type2 .)


state 9

    (82) declaration -> declaration_specifiers . SEMI
    (83) declaration -> declaration_specifiers . init_declarator_list SEMI
    (226) fheader_type1 -> declaration_specifiers . function_declaration
    (90) init_declarator_list -> . init_declarator
    (91) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (92) init_declarator -> . uninitialized_declaration
    (93) init_declarator -> . initialized_declaration
    (95) uninitialized_declaration -> . declarator
    (94) initialized_declaration -> . declarator EQUAL initializer
    (139) declarator -> . pointer direct_declarator
    (140) declarator -> . direct_declarator
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN

    SEMI            shift and go to state 45
    IDENTIFIER      shift and go to state 49
    STAR            shift and go to state 56
    L_PAREN         shift and go to state 50

    init_declarator_list           shift and go to state 46
    function_declaration           shift and go to state 47
    init_declarator                shift and go to state 48
    uninitialized_declaration      shift and go to state 51
    initialized_declaration        shift and go to state 52
    declarator                     shift and go to state 53
    pointer                        shift and go to state 54
    direct_declarator              shift and go to state 55
    variable_declaration           shift and go to state 57
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59

state 10

    (227) fheader_type2 -> function_declaration .

    L_BRACE         reduce using rule 227 (fheader_type2 -> function_declaration .)
    TYPEDEF         reduce using rule 227 (fheader_type2 -> function_declaration .)
    EXTERN          reduce using rule 227 (fheader_type2 -> function_declaration .)
    STATIC          reduce using rule 227 (fheader_type2 -> function_declaration .)
    AUTO            reduce using rule 227 (fheader_type2 -> function_declaration .)
    REGISTER        reduce using rule 227 (fheader_type2 -> function_declaration .)
    CONST           reduce using rule 227 (fheader_type2 -> function_declaration .)
    VOLATILE        reduce using rule 227 (fheader_type2 -> function_declaration .)
    VOID            reduce using rule 227 (fheader_type2 -> function_declaration .)
    CHAR            reduce using rule 227 (fheader_type2 -> function_declaration .)
    SHORT           reduce using rule 227 (fheader_type2 -> function_declaration .)
    INT             reduce using rule 227 (fheader_type2 -> function_declaration .)
    LONG            reduce using rule 227 (fheader_type2 -> function_declaration .)
    FLOAT           reduce using rule 227 (fheader_type2 -> function_declaration .)
    DOUBLE          reduce using rule 227 (fheader_type2 -> function_declaration .)
    SIGNED          reduce using rule 227 (fheader_type2 -> function_declaration .)
    UNSIGNED        reduce using rule 227 (fheader_type2 -> function_declaration .)
    ENUM            reduce using rule 227 (fheader_type2 -> function_declaration .)
    STRUCT          reduce using rule 227 (fheader_type2 -> function_declaration .)
    UNION           reduce using rule 227 (fheader_type2 -> function_declaration .)


state 11

    (84) declaration_specifiers -> storage_class_specifier .
    (85) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    SEMI            reduce using rule 84 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 84 (declaration_specifiers -> storage_class_specifier .)
    STAR            reduce using rule 84 (declaration_specifiers -> storage_class_specifier .)
    L_PAREN         reduce using rule 84 (declaration_specifiers -> storage_class_specifier .)
    L_SQUARE        reduce using rule 84 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 84 (declaration_specifiers -> storage_class_specifier .)
    R_PAREN         reduce using rule 84 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    storage_class_specifier        shift and go to state 11
    declaration_specifiers         shift and go to state 60
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 12

    (86) declaration_specifiers -> type_specifier .
    (87) declaration_specifiers -> type_specifier . declaration_specifiers
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    SEMI            reduce using rule 86 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 86 (declaration_specifiers -> type_specifier .)
    STAR            reduce using rule 86 (declaration_specifiers -> type_specifier .)
    L_PAREN         reduce using rule 86 (declaration_specifiers -> type_specifier .)
    L_SQUARE        reduce using rule 86 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 86 (declaration_specifiers -> type_specifier .)
    R_PAREN         reduce using rule 86 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_specifier                 shift and go to state 12
    declaration_specifiers         shift and go to state 61
    storage_class_specifier        shift and go to state 11
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 13

    (88) declaration_specifiers -> type_qualifier .
    (89) declaration_specifiers -> type_qualifier . declaration_specifiers
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    SEMI            reduce using rule 88 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 88 (declaration_specifiers -> type_qualifier .)
    STAR            reduce using rule 88 (declaration_specifiers -> type_qualifier .)
    L_PAREN         reduce using rule 88 (declaration_specifiers -> type_qualifier .)
    L_SQUARE        reduce using rule 88 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 88 (declaration_specifiers -> type_qualifier .)
    R_PAREN         reduce using rule 88 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_qualifier                 shift and go to state 13
    declaration_specifiers         shift and go to state 62
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 14

    (149) function_declaration -> IDENTIFIER . L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> IDENTIFIER . L_PAREN identifier_list R_PAREN
    (151) function_declaration -> IDENTIFIER . L_PAREN R_PAREN

    L_PAREN         shift and go to state 63


state 15

    (96) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    STAR            reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    L_PAREN         reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    L_SQUARE        reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 96 (storage_class_specifier -> TYPEDEF .)
    R_PAREN         reduce using rule 96 (storage_class_specifier -> TYPEDEF .)


state 16

    (97) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 97 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 97 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 97 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 97 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 97 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 97 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 97 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 97 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 97 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 97 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 97 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 97 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 97 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 97 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 97 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 97 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 97 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 97 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 97 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 97 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 97 (storage_class_specifier -> EXTERN .)
    STAR            reduce using rule 97 (storage_class_specifier -> EXTERN .)
    L_PAREN         reduce using rule 97 (storage_class_specifier -> EXTERN .)
    L_SQUARE        reduce using rule 97 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 97 (storage_class_specifier -> EXTERN .)
    R_PAREN         reduce using rule 97 (storage_class_specifier -> EXTERN .)


state 17

    (98) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 98 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 98 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 98 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 98 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 98 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 98 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 98 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 98 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 98 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 98 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 98 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 98 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 98 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 98 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 98 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 98 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 98 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 98 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 98 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 98 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 98 (storage_class_specifier -> STATIC .)
    STAR            reduce using rule 98 (storage_class_specifier -> STATIC .)
    L_PAREN         reduce using rule 98 (storage_class_specifier -> STATIC .)
    L_SQUARE        reduce using rule 98 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 98 (storage_class_specifier -> STATIC .)
    R_PAREN         reduce using rule 98 (storage_class_specifier -> STATIC .)


state 18

    (99) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 99 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 99 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 99 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 99 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 99 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 99 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 99 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 99 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 99 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 99 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 99 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 99 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 99 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 99 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 99 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 99 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 99 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 99 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 99 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 99 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 99 (storage_class_specifier -> AUTO .)
    STAR            reduce using rule 99 (storage_class_specifier -> AUTO .)
    L_PAREN         reduce using rule 99 (storage_class_specifier -> AUTO .)
    L_SQUARE        reduce using rule 99 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 99 (storage_class_specifier -> AUTO .)
    R_PAREN         reduce using rule 99 (storage_class_specifier -> AUTO .)


state 19

    (100) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 100 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 100 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 100 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 100 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 100 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 100 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 100 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 100 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 100 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 100 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 100 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 100 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 100 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 100 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 100 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 100 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 100 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 100 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 100 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 100 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 100 (storage_class_specifier -> REGISTER .)
    STAR            reduce using rule 100 (storage_class_specifier -> REGISTER .)
    L_PAREN         reduce using rule 100 (storage_class_specifier -> REGISTER .)
    L_SQUARE        reduce using rule 100 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 100 (storage_class_specifier -> REGISTER .)
    R_PAREN         reduce using rule 100 (storage_class_specifier -> REGISTER .)


state 20

    (110) type_specifier -> type .

    TYPEDEF         reduce using rule 110 (type_specifier -> type .)
    EXTERN          reduce using rule 110 (type_specifier -> type .)
    STATIC          reduce using rule 110 (type_specifier -> type .)
    AUTO            reduce using rule 110 (type_specifier -> type .)
    REGISTER        reduce using rule 110 (type_specifier -> type .)
    CONST           reduce using rule 110 (type_specifier -> type .)
    VOLATILE        reduce using rule 110 (type_specifier -> type .)
    VOID            reduce using rule 110 (type_specifier -> type .)
    CHAR            reduce using rule 110 (type_specifier -> type .)
    SHORT           reduce using rule 110 (type_specifier -> type .)
    INT             reduce using rule 110 (type_specifier -> type .)
    LONG            reduce using rule 110 (type_specifier -> type .)
    FLOAT           reduce using rule 110 (type_specifier -> type .)
    DOUBLE          reduce using rule 110 (type_specifier -> type .)
    SIGNED          reduce using rule 110 (type_specifier -> type .)
    UNSIGNED        reduce using rule 110 (type_specifier -> type .)
    ENUM            reduce using rule 110 (type_specifier -> type .)
    STRUCT          reduce using rule 110 (type_specifier -> type .)
    UNION           reduce using rule 110 (type_specifier -> type .)
    SEMI            reduce using rule 110 (type_specifier -> type .)
    IDENTIFIER      reduce using rule 110 (type_specifier -> type .)
    STAR            reduce using rule 110 (type_specifier -> type .)
    L_PAREN         reduce using rule 110 (type_specifier -> type .)
    L_SQUARE        reduce using rule 110 (type_specifier -> type .)
    COMMA           reduce using rule 110 (type_specifier -> type .)
    R_PAREN         reduce using rule 110 (type_specifier -> type .)
    COLON           reduce using rule 110 (type_specifier -> type .)


state 21

    (111) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    STAR            reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    L_PAREN         reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    L_SQUARE        reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    R_PAREN         reduce using rule 111 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 111 (type_specifier -> struct_or_union_specifier .)


state 22

    (112) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 112 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 112 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 112 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 112 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 112 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 112 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 112 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 112 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 112 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 112 (type_specifier -> enum_specifier .)
    INT             reduce using rule 112 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 112 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 112 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 112 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 112 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 112 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 112 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 112 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 112 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 112 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 112 (type_specifier -> enum_specifier .)
    STAR            reduce using rule 112 (type_specifier -> enum_specifier .)
    L_PAREN         reduce using rule 112 (type_specifier -> enum_specifier .)
    L_SQUARE        reduce using rule 112 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 112 (type_specifier -> enum_specifier .)
    R_PAREN         reduce using rule 112 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 112 (type_specifier -> enum_specifier .)


state 23

    (137) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 137 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 137 (type_qualifier -> CONST .)
    STATIC          reduce using rule 137 (type_qualifier -> CONST .)
    AUTO            reduce using rule 137 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 137 (type_qualifier -> CONST .)
    CONST           reduce using rule 137 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 137 (type_qualifier -> CONST .)
    VOID            reduce using rule 137 (type_qualifier -> CONST .)
    CHAR            reduce using rule 137 (type_qualifier -> CONST .)
    SHORT           reduce using rule 137 (type_qualifier -> CONST .)
    INT             reduce using rule 137 (type_qualifier -> CONST .)
    LONG            reduce using rule 137 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 137 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 137 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 137 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 137 (type_qualifier -> CONST .)
    ENUM            reduce using rule 137 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 137 (type_qualifier -> CONST .)
    UNION           reduce using rule 137 (type_qualifier -> CONST .)
    SEMI            reduce using rule 137 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 137 (type_qualifier -> CONST .)
    STAR            reduce using rule 137 (type_qualifier -> CONST .)
    L_PAREN         reduce using rule 137 (type_qualifier -> CONST .)
    L_SQUARE        reduce using rule 137 (type_qualifier -> CONST .)
    COMMA           reduce using rule 137 (type_qualifier -> CONST .)
    R_PAREN         reduce using rule 137 (type_qualifier -> CONST .)
    COLON           reduce using rule 137 (type_qualifier -> CONST .)


state 24

    (138) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 138 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 138 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 138 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 138 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 138 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 138 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 138 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 138 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 138 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 138 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 138 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 138 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 138 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 138 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 138 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 138 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 138 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 138 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 138 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 138 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 138 (type_qualifier -> VOLATILE .)
    STAR            reduce using rule 138 (type_qualifier -> VOLATILE .)
    L_PAREN         reduce using rule 138 (type_qualifier -> VOLATILE .)
    L_SQUARE        reduce using rule 138 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 138 (type_qualifier -> VOLATILE .)
    R_PAREN         reduce using rule 138 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 138 (type_qualifier -> VOLATILE .)


state 25

    (101) type -> VOID .

    TYPEDEF         reduce using rule 101 (type -> VOID .)
    EXTERN          reduce using rule 101 (type -> VOID .)
    STATIC          reduce using rule 101 (type -> VOID .)
    AUTO            reduce using rule 101 (type -> VOID .)
    REGISTER        reduce using rule 101 (type -> VOID .)
    CONST           reduce using rule 101 (type -> VOID .)
    VOLATILE        reduce using rule 101 (type -> VOID .)
    VOID            reduce using rule 101 (type -> VOID .)
    CHAR            reduce using rule 101 (type -> VOID .)
    SHORT           reduce using rule 101 (type -> VOID .)
    INT             reduce using rule 101 (type -> VOID .)
    LONG            reduce using rule 101 (type -> VOID .)
    FLOAT           reduce using rule 101 (type -> VOID .)
    DOUBLE          reduce using rule 101 (type -> VOID .)
    SIGNED          reduce using rule 101 (type -> VOID .)
    UNSIGNED        reduce using rule 101 (type -> VOID .)
    ENUM            reduce using rule 101 (type -> VOID .)
    STRUCT          reduce using rule 101 (type -> VOID .)
    UNION           reduce using rule 101 (type -> VOID .)
    SEMI            reduce using rule 101 (type -> VOID .)
    IDENTIFIER      reduce using rule 101 (type -> VOID .)
    STAR            reduce using rule 101 (type -> VOID .)
    L_PAREN         reduce using rule 101 (type -> VOID .)
    L_SQUARE        reduce using rule 101 (type -> VOID .)
    COMMA           reduce using rule 101 (type -> VOID .)
    R_PAREN         reduce using rule 101 (type -> VOID .)
    COLON           reduce using rule 101 (type -> VOID .)


state 26

    (102) type -> CHAR .

    TYPEDEF         reduce using rule 102 (type -> CHAR .)
    EXTERN          reduce using rule 102 (type -> CHAR .)
    STATIC          reduce using rule 102 (type -> CHAR .)
    AUTO            reduce using rule 102 (type -> CHAR .)
    REGISTER        reduce using rule 102 (type -> CHAR .)
    CONST           reduce using rule 102 (type -> CHAR .)
    VOLATILE        reduce using rule 102 (type -> CHAR .)
    VOID            reduce using rule 102 (type -> CHAR .)
    CHAR            reduce using rule 102 (type -> CHAR .)
    SHORT           reduce using rule 102 (type -> CHAR .)
    INT             reduce using rule 102 (type -> CHAR .)
    LONG            reduce using rule 102 (type -> CHAR .)
    FLOAT           reduce using rule 102 (type -> CHAR .)
    DOUBLE          reduce using rule 102 (type -> CHAR .)
    SIGNED          reduce using rule 102 (type -> CHAR .)
    UNSIGNED        reduce using rule 102 (type -> CHAR .)
    ENUM            reduce using rule 102 (type -> CHAR .)
    STRUCT          reduce using rule 102 (type -> CHAR .)
    UNION           reduce using rule 102 (type -> CHAR .)
    SEMI            reduce using rule 102 (type -> CHAR .)
    IDENTIFIER      reduce using rule 102 (type -> CHAR .)
    STAR            reduce using rule 102 (type -> CHAR .)
    L_PAREN         reduce using rule 102 (type -> CHAR .)
    L_SQUARE        reduce using rule 102 (type -> CHAR .)
    COMMA           reduce using rule 102 (type -> CHAR .)
    R_PAREN         reduce using rule 102 (type -> CHAR .)
    COLON           reduce using rule 102 (type -> CHAR .)


state 27

    (103) type -> SHORT .

    TYPEDEF         reduce using rule 103 (type -> SHORT .)
    EXTERN          reduce using rule 103 (type -> SHORT .)
    STATIC          reduce using rule 103 (type -> SHORT .)
    AUTO            reduce using rule 103 (type -> SHORT .)
    REGISTER        reduce using rule 103 (type -> SHORT .)
    CONST           reduce using rule 103 (type -> SHORT .)
    VOLATILE        reduce using rule 103 (type -> SHORT .)
    VOID            reduce using rule 103 (type -> SHORT .)
    CHAR            reduce using rule 103 (type -> SHORT .)
    SHORT           reduce using rule 103 (type -> SHORT .)
    INT             reduce using rule 103 (type -> SHORT .)
    LONG            reduce using rule 103 (type -> SHORT .)
    FLOAT           reduce using rule 103 (type -> SHORT .)
    DOUBLE          reduce using rule 103 (type -> SHORT .)
    SIGNED          reduce using rule 103 (type -> SHORT .)
    UNSIGNED        reduce using rule 103 (type -> SHORT .)
    ENUM            reduce using rule 103 (type -> SHORT .)
    STRUCT          reduce using rule 103 (type -> SHORT .)
    UNION           reduce using rule 103 (type -> SHORT .)
    SEMI            reduce using rule 103 (type -> SHORT .)
    IDENTIFIER      reduce using rule 103 (type -> SHORT .)
    STAR            reduce using rule 103 (type -> SHORT .)
    L_PAREN         reduce using rule 103 (type -> SHORT .)
    L_SQUARE        reduce using rule 103 (type -> SHORT .)
    COMMA           reduce using rule 103 (type -> SHORT .)
    R_PAREN         reduce using rule 103 (type -> SHORT .)
    COLON           reduce using rule 103 (type -> SHORT .)


state 28

    (104) type -> INT .

    TYPEDEF         reduce using rule 104 (type -> INT .)
    EXTERN          reduce using rule 104 (type -> INT .)
    STATIC          reduce using rule 104 (type -> INT .)
    AUTO            reduce using rule 104 (type -> INT .)
    REGISTER        reduce using rule 104 (type -> INT .)
    CONST           reduce using rule 104 (type -> INT .)
    VOLATILE        reduce using rule 104 (type -> INT .)
    VOID            reduce using rule 104 (type -> INT .)
    CHAR            reduce using rule 104 (type -> INT .)
    SHORT           reduce using rule 104 (type -> INT .)
    INT             reduce using rule 104 (type -> INT .)
    LONG            reduce using rule 104 (type -> INT .)
    FLOAT           reduce using rule 104 (type -> INT .)
    DOUBLE          reduce using rule 104 (type -> INT .)
    SIGNED          reduce using rule 104 (type -> INT .)
    UNSIGNED        reduce using rule 104 (type -> INT .)
    ENUM            reduce using rule 104 (type -> INT .)
    STRUCT          reduce using rule 104 (type -> INT .)
    UNION           reduce using rule 104 (type -> INT .)
    SEMI            reduce using rule 104 (type -> INT .)
    IDENTIFIER      reduce using rule 104 (type -> INT .)
    STAR            reduce using rule 104 (type -> INT .)
    L_PAREN         reduce using rule 104 (type -> INT .)
    L_SQUARE        reduce using rule 104 (type -> INT .)
    COMMA           reduce using rule 104 (type -> INT .)
    R_PAREN         reduce using rule 104 (type -> INT .)
    COLON           reduce using rule 104 (type -> INT .)


state 29

    (105) type -> LONG .

    TYPEDEF         reduce using rule 105 (type -> LONG .)
    EXTERN          reduce using rule 105 (type -> LONG .)
    STATIC          reduce using rule 105 (type -> LONG .)
    AUTO            reduce using rule 105 (type -> LONG .)
    REGISTER        reduce using rule 105 (type -> LONG .)
    CONST           reduce using rule 105 (type -> LONG .)
    VOLATILE        reduce using rule 105 (type -> LONG .)
    VOID            reduce using rule 105 (type -> LONG .)
    CHAR            reduce using rule 105 (type -> LONG .)
    SHORT           reduce using rule 105 (type -> LONG .)
    INT             reduce using rule 105 (type -> LONG .)
    LONG            reduce using rule 105 (type -> LONG .)
    FLOAT           reduce using rule 105 (type -> LONG .)
    DOUBLE          reduce using rule 105 (type -> LONG .)
    SIGNED          reduce using rule 105 (type -> LONG .)
    UNSIGNED        reduce using rule 105 (type -> LONG .)
    ENUM            reduce using rule 105 (type -> LONG .)
    STRUCT          reduce using rule 105 (type -> LONG .)
    UNION           reduce using rule 105 (type -> LONG .)
    SEMI            reduce using rule 105 (type -> LONG .)
    IDENTIFIER      reduce using rule 105 (type -> LONG .)
    STAR            reduce using rule 105 (type -> LONG .)
    L_PAREN         reduce using rule 105 (type -> LONG .)
    L_SQUARE        reduce using rule 105 (type -> LONG .)
    COMMA           reduce using rule 105 (type -> LONG .)
    R_PAREN         reduce using rule 105 (type -> LONG .)
    COLON           reduce using rule 105 (type -> LONG .)


state 30

    (106) type -> FLOAT .

    TYPEDEF         reduce using rule 106 (type -> FLOAT .)
    EXTERN          reduce using rule 106 (type -> FLOAT .)
    STATIC          reduce using rule 106 (type -> FLOAT .)
    AUTO            reduce using rule 106 (type -> FLOAT .)
    REGISTER        reduce using rule 106 (type -> FLOAT .)
    CONST           reduce using rule 106 (type -> FLOAT .)
    VOLATILE        reduce using rule 106 (type -> FLOAT .)
    VOID            reduce using rule 106 (type -> FLOAT .)
    CHAR            reduce using rule 106 (type -> FLOAT .)
    SHORT           reduce using rule 106 (type -> FLOAT .)
    INT             reduce using rule 106 (type -> FLOAT .)
    LONG            reduce using rule 106 (type -> FLOAT .)
    FLOAT           reduce using rule 106 (type -> FLOAT .)
    DOUBLE          reduce using rule 106 (type -> FLOAT .)
    SIGNED          reduce using rule 106 (type -> FLOAT .)
    UNSIGNED        reduce using rule 106 (type -> FLOAT .)
    ENUM            reduce using rule 106 (type -> FLOAT .)
    STRUCT          reduce using rule 106 (type -> FLOAT .)
    UNION           reduce using rule 106 (type -> FLOAT .)
    SEMI            reduce using rule 106 (type -> FLOAT .)
    IDENTIFIER      reduce using rule 106 (type -> FLOAT .)
    STAR            reduce using rule 106 (type -> FLOAT .)
    L_PAREN         reduce using rule 106 (type -> FLOAT .)
    L_SQUARE        reduce using rule 106 (type -> FLOAT .)
    COMMA           reduce using rule 106 (type -> FLOAT .)
    R_PAREN         reduce using rule 106 (type -> FLOAT .)
    COLON           reduce using rule 106 (type -> FLOAT .)


state 31

    (107) type -> DOUBLE .

    TYPEDEF         reduce using rule 107 (type -> DOUBLE .)
    EXTERN          reduce using rule 107 (type -> DOUBLE .)
    STATIC          reduce using rule 107 (type -> DOUBLE .)
    AUTO            reduce using rule 107 (type -> DOUBLE .)
    REGISTER        reduce using rule 107 (type -> DOUBLE .)
    CONST           reduce using rule 107 (type -> DOUBLE .)
    VOLATILE        reduce using rule 107 (type -> DOUBLE .)
    VOID            reduce using rule 107 (type -> DOUBLE .)
    CHAR            reduce using rule 107 (type -> DOUBLE .)
    SHORT           reduce using rule 107 (type -> DOUBLE .)
    INT             reduce using rule 107 (type -> DOUBLE .)
    LONG            reduce using rule 107 (type -> DOUBLE .)
    FLOAT           reduce using rule 107 (type -> DOUBLE .)
    DOUBLE          reduce using rule 107 (type -> DOUBLE .)
    SIGNED          reduce using rule 107 (type -> DOUBLE .)
    UNSIGNED        reduce using rule 107 (type -> DOUBLE .)
    ENUM            reduce using rule 107 (type -> DOUBLE .)
    STRUCT          reduce using rule 107 (type -> DOUBLE .)
    UNION           reduce using rule 107 (type -> DOUBLE .)
    SEMI            reduce using rule 107 (type -> DOUBLE .)
    IDENTIFIER      reduce using rule 107 (type -> DOUBLE .)
    STAR            reduce using rule 107 (type -> DOUBLE .)
    L_PAREN         reduce using rule 107 (type -> DOUBLE .)
    L_SQUARE        reduce using rule 107 (type -> DOUBLE .)
    COMMA           reduce using rule 107 (type -> DOUBLE .)
    R_PAREN         reduce using rule 107 (type -> DOUBLE .)
    COLON           reduce using rule 107 (type -> DOUBLE .)


state 32

    (108) type -> SIGNED .

    TYPEDEF         reduce using rule 108 (type -> SIGNED .)
    EXTERN          reduce using rule 108 (type -> SIGNED .)
    STATIC          reduce using rule 108 (type -> SIGNED .)
    AUTO            reduce using rule 108 (type -> SIGNED .)
    REGISTER        reduce using rule 108 (type -> SIGNED .)
    CONST           reduce using rule 108 (type -> SIGNED .)
    VOLATILE        reduce using rule 108 (type -> SIGNED .)
    VOID            reduce using rule 108 (type -> SIGNED .)
    CHAR            reduce using rule 108 (type -> SIGNED .)
    SHORT           reduce using rule 108 (type -> SIGNED .)
    INT             reduce using rule 108 (type -> SIGNED .)
    LONG            reduce using rule 108 (type -> SIGNED .)
    FLOAT           reduce using rule 108 (type -> SIGNED .)
    DOUBLE          reduce using rule 108 (type -> SIGNED .)
    SIGNED          reduce using rule 108 (type -> SIGNED .)
    UNSIGNED        reduce using rule 108 (type -> SIGNED .)
    ENUM            reduce using rule 108 (type -> SIGNED .)
    STRUCT          reduce using rule 108 (type -> SIGNED .)
    UNION           reduce using rule 108 (type -> SIGNED .)
    SEMI            reduce using rule 108 (type -> SIGNED .)
    IDENTIFIER      reduce using rule 108 (type -> SIGNED .)
    STAR            reduce using rule 108 (type -> SIGNED .)
    L_PAREN         reduce using rule 108 (type -> SIGNED .)
    L_SQUARE        reduce using rule 108 (type -> SIGNED .)
    COMMA           reduce using rule 108 (type -> SIGNED .)
    R_PAREN         reduce using rule 108 (type -> SIGNED .)
    COLON           reduce using rule 108 (type -> SIGNED .)


state 33

    (109) type -> UNSIGNED .

    TYPEDEF         reduce using rule 109 (type -> UNSIGNED .)
    EXTERN          reduce using rule 109 (type -> UNSIGNED .)
    STATIC          reduce using rule 109 (type -> UNSIGNED .)
    AUTO            reduce using rule 109 (type -> UNSIGNED .)
    REGISTER        reduce using rule 109 (type -> UNSIGNED .)
    CONST           reduce using rule 109 (type -> UNSIGNED .)
    VOLATILE        reduce using rule 109 (type -> UNSIGNED .)
    VOID            reduce using rule 109 (type -> UNSIGNED .)
    CHAR            reduce using rule 109 (type -> UNSIGNED .)
    SHORT           reduce using rule 109 (type -> UNSIGNED .)
    INT             reduce using rule 109 (type -> UNSIGNED .)
    LONG            reduce using rule 109 (type -> UNSIGNED .)
    FLOAT           reduce using rule 109 (type -> UNSIGNED .)
    DOUBLE          reduce using rule 109 (type -> UNSIGNED .)
    SIGNED          reduce using rule 109 (type -> UNSIGNED .)
    UNSIGNED        reduce using rule 109 (type -> UNSIGNED .)
    ENUM            reduce using rule 109 (type -> UNSIGNED .)
    STRUCT          reduce using rule 109 (type -> UNSIGNED .)
    UNION           reduce using rule 109 (type -> UNSIGNED .)
    SEMI            reduce using rule 109 (type -> UNSIGNED .)
    IDENTIFIER      reduce using rule 109 (type -> UNSIGNED .)
    STAR            reduce using rule 109 (type -> UNSIGNED .)
    L_PAREN         reduce using rule 109 (type -> UNSIGNED .)
    L_SQUARE        reduce using rule 109 (type -> UNSIGNED .)
    COMMA           reduce using rule 109 (type -> UNSIGNED .)
    R_PAREN         reduce using rule 109 (type -> UNSIGNED .)
    COLON           reduce using rule 109 (type -> UNSIGNED .)


state 34

    (113) struct_or_union_specifier -> struct_or_union . IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> struct_or_union . L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 64
    L_BRACE         shift and go to state 65


state 35

    (130) enum_specifier -> ENUM . L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> ENUM . IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> ENUM . IDENTIFIER

    L_BRACE         shift and go to state 66
    IDENTIFIER      shift and go to state 67


state 36

    (116) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 116 (struct_or_union -> STRUCT .)
    L_BRACE         reduce using rule 116 (struct_or_union -> STRUCT .)


state 37

    (117) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 117 (struct_or_union -> UNION .)
    L_BRACE         reduce using rule 117 (struct_or_union -> UNION .)


state 38

    (220) translation_unit -> external_declaration translation_unit .

    $end            reduce using rule 220 (translation_unit -> external_declaration translation_unit .)


state 39

    (228) function_definition -> function_header compound_statement .

    IDENTIFIER      reduce using rule 228 (function_definition -> function_header compound_statement .)
    TYPEDEF         reduce using rule 228 (function_definition -> function_header compound_statement .)
    EXTERN          reduce using rule 228 (function_definition -> function_header compound_statement .)
    STATIC          reduce using rule 228 (function_definition -> function_header compound_statement .)
    AUTO            reduce using rule 228 (function_definition -> function_header compound_statement .)
    REGISTER        reduce using rule 228 (function_definition -> function_header compound_statement .)
    CONST           reduce using rule 228 (function_definition -> function_header compound_statement .)
    VOLATILE        reduce using rule 228 (function_definition -> function_header compound_statement .)
    VOID            reduce using rule 228 (function_definition -> function_header compound_statement .)
    CHAR            reduce using rule 228 (function_definition -> function_header compound_statement .)
    SHORT           reduce using rule 228 (function_definition -> function_header compound_statement .)
    INT             reduce using rule 228 (function_definition -> function_header compound_statement .)
    LONG            reduce using rule 228 (function_definition -> function_header compound_statement .)
    FLOAT           reduce using rule 228 (function_definition -> function_header compound_statement .)
    DOUBLE          reduce using rule 228 (function_definition -> function_header compound_statement .)
    SIGNED          reduce using rule 228 (function_definition -> function_header compound_statement .)
    UNSIGNED        reduce using rule 228 (function_definition -> function_header compound_statement .)
    ENUM            reduce using rule 228 (function_definition -> function_header compound_statement .)
    STRUCT          reduce using rule 228 (function_definition -> function_header compound_statement .)
    UNION           reduce using rule 228 (function_definition -> function_header compound_statement .)
    $end            reduce using rule 228 (function_definition -> function_header compound_statement .)


state 40

    (229) function_definition -> function_header declaration_list . compound_statement
    (201) declaration_list -> declaration_list . declaration
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (82) declaration -> . declaration_specifiers SEMI
    (83) declaration -> . declaration_specifiers init_declarator_list SEMI
    (199) compound_statement_begin -> . L_BRACE
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    L_BRACE         shift and go to state 43
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    compound_statement             shift and go to state 68
    declaration                    shift and go to state 69
    compound_statement_begin       shift and go to state 41
    declaration_specifiers         shift and go to state 44
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 41

    (195) compound_statement -> compound_statement_begin . R_BRACE
    (196) compound_statement -> compound_statement_begin . statement_list R_BRACE
    (197) compound_statement -> compound_statement_begin . declaration_list R_BRACE
    (198) compound_statement -> compound_statement_begin . declaration_list statement_list R_BRACE
    (202) statement_list -> . statement
    (203) statement_list -> . statement_list statement
    (200) declaration_list -> . declaration
    (201) declaration_list -> . declaration_list declaration
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (82) declaration -> . declaration_specifiers SEMI
    (83) declaration -> . declaration_specifiers init_declarator_list SEMI
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACE         shift and go to state 70
    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    compound_statement_begin       shift and go to state 41
    statement_list                 shift and go to state 71
    declaration_list               shift and go to state 72
    statement                      shift and go to state 73
    declaration                    shift and go to state 42
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    declaration_specifiers         shift and go to state 44
    expression                     shift and go to state 84
    iteration_header               shift and go to state 88
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    assignment_expression          shift and go to state 93
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    struct_or_union                shift and go to state 34
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 42

    (200) declaration_list -> declaration .

    L_BRACE         reduce using rule 200 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 200 (declaration_list -> declaration .)
    EXTERN          reduce using rule 200 (declaration_list -> declaration .)
    STATIC          reduce using rule 200 (declaration_list -> declaration .)
    AUTO            reduce using rule 200 (declaration_list -> declaration .)
    REGISTER        reduce using rule 200 (declaration_list -> declaration .)
    CONST           reduce using rule 200 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 200 (declaration_list -> declaration .)
    VOID            reduce using rule 200 (declaration_list -> declaration .)
    CHAR            reduce using rule 200 (declaration_list -> declaration .)
    SHORT           reduce using rule 200 (declaration_list -> declaration .)
    INT             reduce using rule 200 (declaration_list -> declaration .)
    LONG            reduce using rule 200 (declaration_list -> declaration .)
    FLOAT           reduce using rule 200 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 200 (declaration_list -> declaration .)
    SIGNED          reduce using rule 200 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 200 (declaration_list -> declaration .)
    ENUM            reduce using rule 200 (declaration_list -> declaration .)
    STRUCT          reduce using rule 200 (declaration_list -> declaration .)
    UNION           reduce using rule 200 (declaration_list -> declaration .)
    R_BRACE         reduce using rule 200 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 200 (declaration_list -> declaration .)
    CASE            reduce using rule 200 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 200 (declaration_list -> declaration .)
    SEMI            reduce using rule 200 (declaration_list -> declaration .)
    IF              reduce using rule 200 (declaration_list -> declaration .)
    SWITCH          reduce using rule 200 (declaration_list -> declaration .)
    GOTO            reduce using rule 200 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 200 (declaration_list -> declaration .)
    BREAK           reduce using rule 200 (declaration_list -> declaration .)
    RETURN          reduce using rule 200 (declaration_list -> declaration .)
    WHILE           reduce using rule 200 (declaration_list -> declaration .)
    FOR             reduce using rule 200 (declaration_list -> declaration .)
    INC_OP          reduce using rule 200 (declaration_list -> declaration .)
    DEC_OP          reduce using rule 200 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 200 (declaration_list -> declaration .)
    AMP             reduce using rule 200 (declaration_list -> declaration .)
    STAR            reduce using rule 200 (declaration_list -> declaration .)
    PLUS            reduce using rule 200 (declaration_list -> declaration .)
    MINUS           reduce using rule 200 (declaration_list -> declaration .)
    TILDA           reduce using rule 200 (declaration_list -> declaration .)
    EXCLAIM         reduce using rule 200 (declaration_list -> declaration .)
    CONSTANT        reduce using rule 200 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 200 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 200 (declaration_list -> declaration .)
    L_PAREN         reduce using rule 200 (declaration_list -> declaration .)


state 43

    (199) compound_statement_begin -> L_BRACE .

    R_BRACE         reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    IDENTIFIER      reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    CASE            reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    DEFAULT         reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    SEMI            reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    IF              reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    SWITCH          reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    GOTO            reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    CONTINUE        reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    BREAK           reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    RETURN          reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    L_BRACE         reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    WHILE           reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    FOR             reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    TYPEDEF         reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    EXTERN          reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    STATIC          reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    AUTO            reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    REGISTER        reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    CONST           reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    VOLATILE        reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    VOID            reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    CHAR            reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    SHORT           reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    INT             reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    LONG            reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    FLOAT           reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    DOUBLE          reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    SIGNED          reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    UNSIGNED        reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    ENUM            reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    STRUCT          reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    UNION           reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    INC_OP          reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    DEC_OP          reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    SIZEOF          reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    AMP             reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    STAR            reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    PLUS            reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    MINUS           reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    TILDA           reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    EXCLAIM         reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    CONSTANT        reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    CHARACTER       reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    STRING_LITERAL  reduce using rule 199 (compound_statement_begin -> L_BRACE .)
    L_PAREN         reduce using rule 199 (compound_statement_begin -> L_BRACE .)


state 44

    (82) declaration -> declaration_specifiers . SEMI
    (83) declaration -> declaration_specifiers . init_declarator_list SEMI
    (90) init_declarator_list -> . init_declarator
    (91) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (92) init_declarator -> . uninitialized_declaration
    (93) init_declarator -> . initialized_declaration
    (95) uninitialized_declaration -> . declarator
    (94) initialized_declaration -> . declarator EQUAL initializer
    (139) declarator -> . pointer direct_declarator
    (140) declarator -> . direct_declarator
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN

    SEMI            shift and go to state 45
    STAR            shift and go to state 56
    IDENTIFIER      shift and go to state 49
    L_PAREN         shift and go to state 50

    init_declarator_list           shift and go to state 46
    init_declarator                shift and go to state 48
    uninitialized_declaration      shift and go to state 51
    initialized_declaration        shift and go to state 52
    declarator                     shift and go to state 53
    pointer                        shift and go to state 54
    direct_declarator              shift and go to state 55
    variable_declaration           shift and go to state 57
    function_declaration           shift and go to state 130
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59

state 45

    (82) declaration -> declaration_specifiers SEMI .

    IDENTIFIER      reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    TYPEDEF         reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    EXTERN          reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    STATIC          reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    AUTO            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    REGISTER        reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    CONST           reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    VOLATILE        reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    VOID            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    CHAR            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    SHORT           reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    INT             reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    LONG            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    FLOAT           reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    DOUBLE          reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    SIGNED          reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    UNSIGNED        reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    ENUM            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    STRUCT          reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    UNION           reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    $end            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    L_BRACE         reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    R_BRACE         reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    CASE            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    DEFAULT         reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    SEMI            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    IF              reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    SWITCH          reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    GOTO            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    CONTINUE        reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    BREAK           reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    RETURN          reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    WHILE           reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    FOR             reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    INC_OP          reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    DEC_OP          reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    SIZEOF          reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    AMP             reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    STAR            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    PLUS            reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    MINUS           reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    TILDA           reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    EXCLAIM         reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    CONSTANT        reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    CHARACTER       reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    STRING_LITERAL  reduce using rule 82 (declaration -> declaration_specifiers SEMI .)
    L_PAREN         reduce using rule 82 (declaration -> declaration_specifiers SEMI .)


state 46

    (83) declaration -> declaration_specifiers init_declarator_list . SEMI
    (91) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 131
    COMMA           shift and go to state 132


state 47

    (226) fheader_type1 -> declaration_specifiers function_declaration .
    (142) direct_declarator -> function_declaration .

    L_BRACE         reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    TYPEDEF         reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    EXTERN          reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    STATIC          reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    AUTO            reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    REGISTER        reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    CONST           reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    VOLATILE        reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    VOID            reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    CHAR            reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    SHORT           reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    INT             reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    LONG            reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    FLOAT           reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    DOUBLE          reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    SIGNED          reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    UNSIGNED        reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    ENUM            reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    STRUCT          reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    UNION           reduce using rule 226 (fheader_type1 -> declaration_specifiers function_declaration .)
    EQUAL           reduce using rule 142 (direct_declarator -> function_declaration .)
    SEMI            reduce using rule 142 (direct_declarator -> function_declaration .)
    COMMA           reduce using rule 142 (direct_declarator -> function_declaration .)


state 48

    (90) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 90 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 90 (init_declarator_list -> init_declarator .)


state 49

    (149) function_declaration -> IDENTIFIER . L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> IDENTIFIER . L_PAREN identifier_list R_PAREN
    (151) function_declaration -> IDENTIFIER . L_PAREN R_PAREN
    (145) variable_declaration1 -> IDENTIFIER .
    (146) variable_declaration1 -> IDENTIFIER . L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> IDENTIFIER . L_SQUARE R_SQUARE

    L_PAREN         shift and go to state 63
    EQUAL           reduce using rule 145 (variable_declaration1 -> IDENTIFIER .)
    SEMI            reduce using rule 145 (variable_declaration1 -> IDENTIFIER .)
    COMMA           reduce using rule 145 (variable_declaration1 -> IDENTIFIER .)
    R_PAREN         reduce using rule 145 (variable_declaration1 -> IDENTIFIER .)
    COLON           reduce using rule 145 (variable_declaration1 -> IDENTIFIER .)
    L_SQUARE        shift and go to state 133


state 50

    (148) variable_declaration2 -> L_PAREN . declarator R_PAREN
    (139) declarator -> . pointer direct_declarator
    (140) declarator -> . direct_declarator
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN

    STAR            shift and go to state 56
    IDENTIFIER      shift and go to state 49
    L_PAREN         shift and go to state 50

    declarator                     shift and go to state 134
    pointer                        shift and go to state 54
    direct_declarator              shift and go to state 55
    variable_declaration           shift and go to state 57
    function_declaration           shift and go to state 130
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59

state 51

    (92) init_declarator -> uninitialized_declaration .

    SEMI            reduce using rule 92 (init_declarator -> uninitialized_declaration .)
    COMMA           reduce using rule 92 (init_declarator -> uninitialized_declaration .)


state 52

    (93) init_declarator -> initialized_declaration .

    SEMI            reduce using rule 93 (init_declarator -> initialized_declaration .)
    COMMA           reduce using rule 93 (init_declarator -> initialized_declaration .)


state 53

    (95) uninitialized_declaration -> declarator .
    (94) initialized_declaration -> declarator . EQUAL initializer

    SEMI            reduce using rule 95 (uninitialized_declaration -> declarator .)
    COMMA           reduce using rule 95 (uninitialized_declaration -> declarator .)
    EQUAL           shift and go to state 135


state 54

    (139) declarator -> pointer . direct_declarator
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN

    IDENTIFIER      shift and go to state 49
    L_PAREN         shift and go to state 50

    direct_declarator              shift and go to state 136
    variable_declaration           shift and go to state 57
    function_declaration           shift and go to state 130
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59

state 55

    (140) declarator -> direct_declarator .

    EQUAL           reduce using rule 140 (declarator -> direct_declarator .)
    SEMI            reduce using rule 140 (declarator -> direct_declarator .)
    COMMA           reduce using rule 140 (declarator -> direct_declarator .)
    R_PAREN         reduce using rule 140 (declarator -> direct_declarator .)
    COLON           reduce using rule 140 (declarator -> direct_declarator .)


state 56

    (152) pointer -> STAR .
    (153) pointer -> STAR . type_qualifier_list
    (154) pointer -> STAR . pointer
    (155) pointer -> STAR . type_qualifier_list pointer
    (156) type_qualifier_list -> . type_qualifier
    (157) type_qualifier_list -> . type_qualifier_list type_qualifier
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 152 (pointer -> STAR .)
    L_PAREN         reduce using rule 152 (pointer -> STAR .)
    L_SQUARE        reduce using rule 152 (pointer -> STAR .)
    COMMA           reduce using rule 152 (pointer -> STAR .)
    R_PAREN         reduce using rule 152 (pointer -> STAR .)
    STAR            shift and go to state 56
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24

    type_qualifier_list            shift and go to state 137
    pointer                        shift and go to state 138
    type_qualifier                 shift and go to state 139

state 57

    (141) direct_declarator -> variable_declaration .

    EQUAL           reduce using rule 141 (direct_declarator -> variable_declaration .)
    SEMI            reduce using rule 141 (direct_declarator -> variable_declaration .)
    COMMA           reduce using rule 141 (direct_declarator -> variable_declaration .)
    R_PAREN         reduce using rule 141 (direct_declarator -> variable_declaration .)
    COLON           reduce using rule 141 (direct_declarator -> variable_declaration .)


state 58

    (143) variable_declaration -> variable_declaration1 .

    EQUAL           reduce using rule 143 (variable_declaration -> variable_declaration1 .)
    SEMI            reduce using rule 143 (variable_declaration -> variable_declaration1 .)
    COMMA           reduce using rule 143 (variable_declaration -> variable_declaration1 .)
    R_PAREN         reduce using rule 143 (variable_declaration -> variable_declaration1 .)
    COLON           reduce using rule 143 (variable_declaration -> variable_declaration1 .)


state 59

    (144) variable_declaration -> variable_declaration2 .

    EQUAL           reduce using rule 144 (variable_declaration -> variable_declaration2 .)
    SEMI            reduce using rule 144 (variable_declaration -> variable_declaration2 .)
    COMMA           reduce using rule 144 (variable_declaration -> variable_declaration2 .)
    R_PAREN         reduce using rule 144 (variable_declaration -> variable_declaration2 .)
    COLON           reduce using rule 144 (variable_declaration -> variable_declaration2 .)


state 60

    (85) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMI            reduce using rule 85 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 85 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    STAR            reduce using rule 85 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    L_PAREN         reduce using rule 85 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    L_SQUARE        reduce using rule 85 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 85 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    R_PAREN         reduce using rule 85 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 61

    (87) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI            reduce using rule 87 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 87 (declaration_specifiers -> type_specifier declaration_specifiers .)
    STAR            reduce using rule 87 (declaration_specifiers -> type_specifier declaration_specifiers .)
    L_PAREN         reduce using rule 87 (declaration_specifiers -> type_specifier declaration_specifiers .)
    L_SQUARE        reduce using rule 87 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 87 (declaration_specifiers -> type_specifier declaration_specifiers .)
    R_PAREN         reduce using rule 87 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 62

    (89) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMI            reduce using rule 89 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 89 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    STAR            reduce using rule 89 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    L_PAREN         reduce using rule 89 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    L_SQUARE        reduce using rule 89 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 89 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    R_PAREN         reduce using rule 89 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 63

    (149) function_declaration -> IDENTIFIER L_PAREN . parameter_type_list R_PAREN
    (150) function_declaration -> IDENTIFIER L_PAREN . identifier_list R_PAREN
    (151) function_declaration -> IDENTIFIER L_PAREN . R_PAREN
    (158) parameter_type_list -> . parameter_list
    (159) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (165) identifier_list -> . IDENTIFIER
    (166) identifier_list -> . identifier_list COMMA IDENTIFIER
    (160) parameter_list -> . parameter_declaration
    (161) parameter_list -> . parameter_list COMMA parameter_declaration
    (162) parameter_declaration -> . declaration_specifiers declarator
    (163) parameter_declaration -> . declaration_specifiers abstract_declarator
    (164) parameter_declaration -> . declaration_specifiers
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    R_PAREN         shift and go to state 142
    IDENTIFIER      shift and go to state 140
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    parameter_type_list            shift and go to state 141
    identifier_list                shift and go to state 143
    parameter_list                 shift and go to state 144
    parameter_declaration          shift and go to state 145
    declaration_specifiers         shift and go to state 146
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 64

    (113) struct_or_union_specifier -> struct_or_union IDENTIFIER . L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    L_BRACE         shift and go to state 147
    TYPEDEF         reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SEMI            reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STAR            reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    L_PAREN         reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    L_SQUARE        reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    R_PAREN         reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 115 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 65

    (114) struct_or_union_specifier -> struct_or_union L_BRACE . struct_declaration_list R_BRACE
    (118) struct_declaration_list -> . struct_declaration
    (119) struct_declaration_list -> . struct_declaration_list struct_declaration
    (120) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (121) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_specifier
    (123) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (124) specifier_qualifier_list -> . type_qualifier
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration_list        shift and go to state 148
    struct_declaration             shift and go to state 149
    specifier_qualifier_list       shift and go to state 150
    type_specifier                 shift and go to state 151
    type_qualifier                 shift and go to state 152
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22

state 66

    (130) enum_specifier -> ENUM L_BRACE . enumerator_list R_BRACE
    (133) enumerator_list -> . enumerator
    (134) enumerator_list -> . enumerator_list COMMA enumerator
    (135) enumerator -> . IDENTIFIER
    (136) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 155

    enumerator_list                shift and go to state 153
    enumerator                     shift and go to state 154

state 67

    (131) enum_specifier -> ENUM IDENTIFIER . L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> ENUM IDENTIFIER .

    L_BRACE         shift and go to state 156
    TYPEDEF         reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    SEMI            reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    STAR            reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    L_PAREN         reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    L_SQUARE        reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    R_PAREN         reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 132 (enum_specifier -> ENUM IDENTIFIER .)


state 68

    (229) function_definition -> function_header declaration_list compound_statement .

    IDENTIFIER      reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    TYPEDEF         reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    EXTERN          reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    STATIC          reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    AUTO            reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    REGISTER        reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    CONST           reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    VOLATILE        reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    VOID            reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    CHAR            reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    SHORT           reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    INT             reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    LONG            reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    FLOAT           reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    DOUBLE          reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    SIGNED          reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    UNSIGNED        reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    ENUM            reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    STRUCT          reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    UNION           reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)
    $end            reduce using rule 229 (function_definition -> function_header declaration_list compound_statement .)


state 69

    (201) declaration_list -> declaration_list declaration .

    L_BRACE         reduce using rule 201 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 201 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 201 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 201 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 201 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 201 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 201 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 201 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 201 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 201 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 201 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 201 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 201 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 201 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 201 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 201 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 201 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 201 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 201 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 201 (declaration_list -> declaration_list declaration .)
    R_BRACE         reduce using rule 201 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 201 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 201 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 201 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 201 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 201 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 201 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 201 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 201 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 201 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 201 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 201 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 201 (declaration_list -> declaration_list declaration .)
    INC_OP          reduce using rule 201 (declaration_list -> declaration_list declaration .)
    DEC_OP          reduce using rule 201 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 201 (declaration_list -> declaration_list declaration .)
    AMP             reduce using rule 201 (declaration_list -> declaration_list declaration .)
    STAR            reduce using rule 201 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 201 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 201 (declaration_list -> declaration_list declaration .)
    TILDA           reduce using rule 201 (declaration_list -> declaration_list declaration .)
    EXCLAIM         reduce using rule 201 (declaration_list -> declaration_list declaration .)
    CONSTANT        reduce using rule 201 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 201 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 201 (declaration_list -> declaration_list declaration .)
    L_PAREN         reduce using rule 201 (declaration_list -> declaration_list declaration .)


state 70

    (195) compound_statement -> compound_statement_begin R_BRACE .

    IDENTIFIER      reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    TYPEDEF         reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    EXTERN          reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    STATIC          reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    AUTO            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    REGISTER        reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    CONST           reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    VOLATILE        reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    VOID            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    CHAR            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    SHORT           reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    INT             reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    LONG            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    FLOAT           reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    DOUBLE          reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    SIGNED          reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    UNSIGNED        reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    ENUM            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    STRUCT          reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    UNION           reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    $end            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    R_BRACE         reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    CASE            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    DEFAULT         reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    SEMI            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    IF              reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    SWITCH          reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    GOTO            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    CONTINUE        reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    BREAK           reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    RETURN          reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    L_BRACE         reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    WHILE           reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    FOR             reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    INC_OP          reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    DEC_OP          reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    SIZEOF          reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    AMP             reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    STAR            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    PLUS            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    MINUS           reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    TILDA           reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    EXCLAIM         reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    CONSTANT        reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    CHARACTER       reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    STRING_LITERAL  reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    L_PAREN         reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)
    ELSE            reduce using rule 195 (compound_statement -> compound_statement_begin R_BRACE .)


state 71

    (196) compound_statement -> compound_statement_begin statement_list . R_BRACE
    (203) statement_list -> statement_list . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACE         shift and go to state 157
    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    compound_statement_begin       shift and go to state 41
    statement                      shift and go to state 158
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    expression                     shift and go to state 84
    iteration_header               shift and go to state 88
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 72

    (197) compound_statement -> compound_statement_begin declaration_list . R_BRACE
    (198) compound_statement -> compound_statement_begin declaration_list . statement_list R_BRACE
    (201) declaration_list -> declaration_list . declaration
    (202) statement_list -> . statement
    (203) statement_list -> . statement_list statement
    (82) declaration -> . declaration_specifiers SEMI
    (83) declaration -> . declaration_specifiers init_declarator_list SEMI
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACE         shift and go to state 159
    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    compound_statement_begin       shift and go to state 41
    statement_list                 shift and go to state 160
    declaration                    shift and go to state 69
    statement                      shift and go to state 73
    declaration_specifiers         shift and go to state 44
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    expression                     shift and go to state 84
    iteration_header               shift and go to state 88
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    assignment_expression          shift and go to state 93
    struct_or_union                shift and go to state 34
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 73

    (202) statement_list -> statement .

    R_BRACE         reduce using rule 202 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 202 (statement_list -> statement .)
    CASE            reduce using rule 202 (statement_list -> statement .)
    DEFAULT         reduce using rule 202 (statement_list -> statement .)
    SEMI            reduce using rule 202 (statement_list -> statement .)
    IF              reduce using rule 202 (statement_list -> statement .)
    SWITCH          reduce using rule 202 (statement_list -> statement .)
    GOTO            reduce using rule 202 (statement_list -> statement .)
    CONTINUE        reduce using rule 202 (statement_list -> statement .)
    BREAK           reduce using rule 202 (statement_list -> statement .)
    RETURN          reduce using rule 202 (statement_list -> statement .)
    L_BRACE         reduce using rule 202 (statement_list -> statement .)
    WHILE           reduce using rule 202 (statement_list -> statement .)
    FOR             reduce using rule 202 (statement_list -> statement .)
    INC_OP          reduce using rule 202 (statement_list -> statement .)
    DEC_OP          reduce using rule 202 (statement_list -> statement .)
    SIZEOF          reduce using rule 202 (statement_list -> statement .)
    AMP             reduce using rule 202 (statement_list -> statement .)
    STAR            reduce using rule 202 (statement_list -> statement .)
    PLUS            reduce using rule 202 (statement_list -> statement .)
    MINUS           reduce using rule 202 (statement_list -> statement .)
    TILDA           reduce using rule 202 (statement_list -> statement .)
    EXCLAIM         reduce using rule 202 (statement_list -> statement .)
    CONSTANT        reduce using rule 202 (statement_list -> statement .)
    CHARACTER       reduce using rule 202 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 202 (statement_list -> statement .)
    L_PAREN         reduce using rule 202 (statement_list -> statement .)


state 74

    (186) statement -> labeled_statement .

    R_BRACE         reduce using rule 186 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 186 (statement -> labeled_statement .)
    CASE            reduce using rule 186 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 186 (statement -> labeled_statement .)
    SEMI            reduce using rule 186 (statement -> labeled_statement .)
    IF              reduce using rule 186 (statement -> labeled_statement .)
    SWITCH          reduce using rule 186 (statement -> labeled_statement .)
    GOTO            reduce using rule 186 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 186 (statement -> labeled_statement .)
    BREAK           reduce using rule 186 (statement -> labeled_statement .)
    RETURN          reduce using rule 186 (statement -> labeled_statement .)
    L_BRACE         reduce using rule 186 (statement -> labeled_statement .)
    WHILE           reduce using rule 186 (statement -> labeled_statement .)
    FOR             reduce using rule 186 (statement -> labeled_statement .)
    INC_OP          reduce using rule 186 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 186 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 186 (statement -> labeled_statement .)
    AMP             reduce using rule 186 (statement -> labeled_statement .)
    STAR            reduce using rule 186 (statement -> labeled_statement .)
    PLUS            reduce using rule 186 (statement -> labeled_statement .)
    MINUS           reduce using rule 186 (statement -> labeled_statement .)
    TILDA           reduce using rule 186 (statement -> labeled_statement .)
    EXCLAIM         reduce using rule 186 (statement -> labeled_statement .)
    CONSTANT        reduce using rule 186 (statement -> labeled_statement .)
    CHARACTER       reduce using rule 186 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 186 (statement -> labeled_statement .)
    L_PAREN         reduce using rule 186 (statement -> labeled_statement .)
    ELSE            reduce using rule 186 (statement -> labeled_statement .)


state 75

    (187) statement -> compound_statement .

    R_BRACE         reduce using rule 187 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 187 (statement -> compound_statement .)
    CASE            reduce using rule 187 (statement -> compound_statement .)
    DEFAULT         reduce using rule 187 (statement -> compound_statement .)
    SEMI            reduce using rule 187 (statement -> compound_statement .)
    IF              reduce using rule 187 (statement -> compound_statement .)
    SWITCH          reduce using rule 187 (statement -> compound_statement .)
    GOTO            reduce using rule 187 (statement -> compound_statement .)
    CONTINUE        reduce using rule 187 (statement -> compound_statement .)
    BREAK           reduce using rule 187 (statement -> compound_statement .)
    RETURN          reduce using rule 187 (statement -> compound_statement .)
    L_BRACE         reduce using rule 187 (statement -> compound_statement .)
    WHILE           reduce using rule 187 (statement -> compound_statement .)
    FOR             reduce using rule 187 (statement -> compound_statement .)
    INC_OP          reduce using rule 187 (statement -> compound_statement .)
    DEC_OP          reduce using rule 187 (statement -> compound_statement .)
    SIZEOF          reduce using rule 187 (statement -> compound_statement .)
    AMP             reduce using rule 187 (statement -> compound_statement .)
    STAR            reduce using rule 187 (statement -> compound_statement .)
    PLUS            reduce using rule 187 (statement -> compound_statement .)
    MINUS           reduce using rule 187 (statement -> compound_statement .)
    TILDA           reduce using rule 187 (statement -> compound_statement .)
    EXCLAIM         reduce using rule 187 (statement -> compound_statement .)
    CONSTANT        reduce using rule 187 (statement -> compound_statement .)
    CHARACTER       reduce using rule 187 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 187 (statement -> compound_statement .)
    L_PAREN         reduce using rule 187 (statement -> compound_statement .)
    ELSE            reduce using rule 187 (statement -> compound_statement .)


state 76

    (188) statement -> expression_statement .

    R_BRACE         reduce using rule 188 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 188 (statement -> expression_statement .)
    CASE            reduce using rule 188 (statement -> expression_statement .)
    DEFAULT         reduce using rule 188 (statement -> expression_statement .)
    SEMI            reduce using rule 188 (statement -> expression_statement .)
    IF              reduce using rule 188 (statement -> expression_statement .)
    SWITCH          reduce using rule 188 (statement -> expression_statement .)
    GOTO            reduce using rule 188 (statement -> expression_statement .)
    CONTINUE        reduce using rule 188 (statement -> expression_statement .)
    BREAK           reduce using rule 188 (statement -> expression_statement .)
    RETURN          reduce using rule 188 (statement -> expression_statement .)
    L_BRACE         reduce using rule 188 (statement -> expression_statement .)
    WHILE           reduce using rule 188 (statement -> expression_statement .)
    FOR             reduce using rule 188 (statement -> expression_statement .)
    INC_OP          reduce using rule 188 (statement -> expression_statement .)
    DEC_OP          reduce using rule 188 (statement -> expression_statement .)
    SIZEOF          reduce using rule 188 (statement -> expression_statement .)
    AMP             reduce using rule 188 (statement -> expression_statement .)
    STAR            reduce using rule 188 (statement -> expression_statement .)
    PLUS            reduce using rule 188 (statement -> expression_statement .)
    MINUS           reduce using rule 188 (statement -> expression_statement .)
    TILDA           reduce using rule 188 (statement -> expression_statement .)
    EXCLAIM         reduce using rule 188 (statement -> expression_statement .)
    CONSTANT        reduce using rule 188 (statement -> expression_statement .)
    CHARACTER       reduce using rule 188 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 188 (statement -> expression_statement .)
    L_PAREN         reduce using rule 188 (statement -> expression_statement .)
    ELSE            reduce using rule 188 (statement -> expression_statement .)


state 77

    (189) statement -> selection_statement .

    R_BRACE         reduce using rule 189 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 189 (statement -> selection_statement .)
    CASE            reduce using rule 189 (statement -> selection_statement .)
    DEFAULT         reduce using rule 189 (statement -> selection_statement .)
    SEMI            reduce using rule 189 (statement -> selection_statement .)
    IF              reduce using rule 189 (statement -> selection_statement .)
    SWITCH          reduce using rule 189 (statement -> selection_statement .)
    GOTO            reduce using rule 189 (statement -> selection_statement .)
    CONTINUE        reduce using rule 189 (statement -> selection_statement .)
    BREAK           reduce using rule 189 (statement -> selection_statement .)
    RETURN          reduce using rule 189 (statement -> selection_statement .)
    L_BRACE         reduce using rule 189 (statement -> selection_statement .)
    WHILE           reduce using rule 189 (statement -> selection_statement .)
    FOR             reduce using rule 189 (statement -> selection_statement .)
    INC_OP          reduce using rule 189 (statement -> selection_statement .)
    DEC_OP          reduce using rule 189 (statement -> selection_statement .)
    SIZEOF          reduce using rule 189 (statement -> selection_statement .)
    AMP             reduce using rule 189 (statement -> selection_statement .)
    STAR            reduce using rule 189 (statement -> selection_statement .)
    PLUS            reduce using rule 189 (statement -> selection_statement .)
    MINUS           reduce using rule 189 (statement -> selection_statement .)
    TILDA           reduce using rule 189 (statement -> selection_statement .)
    EXCLAIM         reduce using rule 189 (statement -> selection_statement .)
    CONSTANT        reduce using rule 189 (statement -> selection_statement .)
    CHARACTER       reduce using rule 189 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 189 (statement -> selection_statement .)
    L_PAREN         reduce using rule 189 (statement -> selection_statement .)
    ELSE            reduce using rule 189 (statement -> selection_statement .)


state 78

    (190) statement -> iteration_statement .

    R_BRACE         reduce using rule 190 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 190 (statement -> iteration_statement .)
    CASE            reduce using rule 190 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 190 (statement -> iteration_statement .)
    SEMI            reduce using rule 190 (statement -> iteration_statement .)
    IF              reduce using rule 190 (statement -> iteration_statement .)
    SWITCH          reduce using rule 190 (statement -> iteration_statement .)
    GOTO            reduce using rule 190 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 190 (statement -> iteration_statement .)
    BREAK           reduce using rule 190 (statement -> iteration_statement .)
    RETURN          reduce using rule 190 (statement -> iteration_statement .)
    L_BRACE         reduce using rule 190 (statement -> iteration_statement .)
    WHILE           reduce using rule 190 (statement -> iteration_statement .)
    FOR             reduce using rule 190 (statement -> iteration_statement .)
    INC_OP          reduce using rule 190 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 190 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 190 (statement -> iteration_statement .)
    AMP             reduce using rule 190 (statement -> iteration_statement .)
    STAR            reduce using rule 190 (statement -> iteration_statement .)
    PLUS            reduce using rule 190 (statement -> iteration_statement .)
    MINUS           reduce using rule 190 (statement -> iteration_statement .)
    TILDA           reduce using rule 190 (statement -> iteration_statement .)
    EXCLAIM         reduce using rule 190 (statement -> iteration_statement .)
    CONSTANT        reduce using rule 190 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 190 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 190 (statement -> iteration_statement .)
    L_PAREN         reduce using rule 190 (statement -> iteration_statement .)
    ELSE            reduce using rule 190 (statement -> iteration_statement .)


state 79

    (191) statement -> jump_statement .

    R_BRACE         reduce using rule 191 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 191 (statement -> jump_statement .)
    CASE            reduce using rule 191 (statement -> jump_statement .)
    DEFAULT         reduce using rule 191 (statement -> jump_statement .)
    SEMI            reduce using rule 191 (statement -> jump_statement .)
    IF              reduce using rule 191 (statement -> jump_statement .)
    SWITCH          reduce using rule 191 (statement -> jump_statement .)
    GOTO            reduce using rule 191 (statement -> jump_statement .)
    CONTINUE        reduce using rule 191 (statement -> jump_statement .)
    BREAK           reduce using rule 191 (statement -> jump_statement .)
    RETURN          reduce using rule 191 (statement -> jump_statement .)
    L_BRACE         reduce using rule 191 (statement -> jump_statement .)
    WHILE           reduce using rule 191 (statement -> jump_statement .)
    FOR             reduce using rule 191 (statement -> jump_statement .)
    INC_OP          reduce using rule 191 (statement -> jump_statement .)
    DEC_OP          reduce using rule 191 (statement -> jump_statement .)
    SIZEOF          reduce using rule 191 (statement -> jump_statement .)
    AMP             reduce using rule 191 (statement -> jump_statement .)
    STAR            reduce using rule 191 (statement -> jump_statement .)
    PLUS            reduce using rule 191 (statement -> jump_statement .)
    MINUS           reduce using rule 191 (statement -> jump_statement .)
    TILDA           reduce using rule 191 (statement -> jump_statement .)
    EXCLAIM         reduce using rule 191 (statement -> jump_statement .)
    CONSTANT        reduce using rule 191 (statement -> jump_statement .)
    CHARACTER       reduce using rule 191 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 191 (statement -> jump_statement .)
    L_PAREN         reduce using rule 191 (statement -> jump_statement .)
    ELSE            reduce using rule 191 (statement -> jump_statement .)


state 80

    (204) expression_statement -> SEMI .

    R_BRACE         reduce using rule 204 (expression_statement -> SEMI .)
    IDENTIFIER      reduce using rule 204 (expression_statement -> SEMI .)
    CASE            reduce using rule 204 (expression_statement -> SEMI .)
    DEFAULT         reduce using rule 204 (expression_statement -> SEMI .)
    SEMI            reduce using rule 204 (expression_statement -> SEMI .)
    IF              reduce using rule 204 (expression_statement -> SEMI .)
    SWITCH          reduce using rule 204 (expression_statement -> SEMI .)
    GOTO            reduce using rule 204 (expression_statement -> SEMI .)
    CONTINUE        reduce using rule 204 (expression_statement -> SEMI .)
    BREAK           reduce using rule 204 (expression_statement -> SEMI .)
    RETURN          reduce using rule 204 (expression_statement -> SEMI .)
    L_BRACE         reduce using rule 204 (expression_statement -> SEMI .)
    WHILE           reduce using rule 204 (expression_statement -> SEMI .)
    FOR             reduce using rule 204 (expression_statement -> SEMI .)
    INC_OP          reduce using rule 204 (expression_statement -> SEMI .)
    DEC_OP          reduce using rule 204 (expression_statement -> SEMI .)
    SIZEOF          reduce using rule 204 (expression_statement -> SEMI .)
    AMP             reduce using rule 204 (expression_statement -> SEMI .)
    STAR            reduce using rule 204 (expression_statement -> SEMI .)
    PLUS            reduce using rule 204 (expression_statement -> SEMI .)
    MINUS           reduce using rule 204 (expression_statement -> SEMI .)
    TILDA           reduce using rule 204 (expression_statement -> SEMI .)
    EXCLAIM         reduce using rule 204 (expression_statement -> SEMI .)
    CONSTANT        reduce using rule 204 (expression_statement -> SEMI .)
    CHARACTER       reduce using rule 204 (expression_statement -> SEMI .)
    STRING_LITERAL  reduce using rule 204 (expression_statement -> SEMI .)
    L_PAREN         reduce using rule 204 (expression_statement -> SEMI .)
    ELSE            reduce using rule 204 (expression_statement -> SEMI .)
    R_PAREN         reduce using rule 204 (expression_statement -> SEMI .)


state 81

    (192) labeled_statement -> IDENTIFIER . COLON statement
    (8) function_call -> IDENTIFIER . L_PAREN R_PAREN
    (9) function_call -> IDENTIFIER . L_PAREN argument_expression_list R_PAREN
    (7) variable_use -> IDENTIFIER .

    COLON           shift and go to state 161
    L_PAREN         shift and go to state 162
    L_SQUARE        reduce using rule 7 (variable_use -> IDENTIFIER .)
    DOT             reduce using rule 7 (variable_use -> IDENTIFIER .)
    PTR_OP          reduce using rule 7 (variable_use -> IDENTIFIER .)
    INC_OP          reduce using rule 7 (variable_use -> IDENTIFIER .)
    DEC_OP          reduce using rule 7 (variable_use -> IDENTIFIER .)
    EQUAL           reduce using rule 7 (variable_use -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 7 (variable_use -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 7 (variable_use -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 7 (variable_use -> IDENTIFIER .)
    STAR            reduce using rule 7 (variable_use -> IDENTIFIER .)
    SLASH           reduce using rule 7 (variable_use -> IDENTIFIER .)
    PERCENT         reduce using rule 7 (variable_use -> IDENTIFIER .)
    PLUS            reduce using rule 7 (variable_use -> IDENTIFIER .)
    MINUS           reduce using rule 7 (variable_use -> IDENTIFIER .)
    LEFT_OP         reduce using rule 7 (variable_use -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 7 (variable_use -> IDENTIFIER .)
    LESS            reduce using rule 7 (variable_use -> IDENTIFIER .)
    GREATER         reduce using rule 7 (variable_use -> IDENTIFIER .)
    LE_OP           reduce using rule 7 (variable_use -> IDENTIFIER .)
    GE_OP           reduce using rule 7 (variable_use -> IDENTIFIER .)
    AMP             reduce using rule 7 (variable_use -> IDENTIFIER .)
    CARET           reduce using rule 7 (variable_use -> IDENTIFIER .)
    PIPE            reduce using rule 7 (variable_use -> IDENTIFIER .)
    AND_OP          reduce using rule 7 (variable_use -> IDENTIFIER .)
    QUEST           reduce using rule 7 (variable_use -> IDENTIFIER .)
    OR_OP           reduce using rule 7 (variable_use -> IDENTIFIER .)
    SEMI            reduce using rule 7 (variable_use -> IDENTIFIER .)
    COMMA           reduce using rule 7 (variable_use -> IDENTIFIER .)
    EQ_OP           reduce using rule 7 (variable_use -> IDENTIFIER .)
    NE_OP           reduce using rule 7 (variable_use -> IDENTIFIER .)


state 82

    (193) labeled_statement -> CASE . constant_expression COLON statement
    (81) constant_expression -> . conditional_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    constant_expression            shift and go to state 163
    conditional_expression         shift and go to state 164
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 106
    exclusive_or_expression        shift and go to state 111
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 83

    (194) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 168


state 84

    (205) expression_statement -> expression . SEMI
    (80) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 169
    COMMA           shift and go to state 170


state 85

    (206) selection_statement -> IF . L_PAREN expression R_PAREN statement
    (207) selection_statement -> IF . L_PAREN expression R_PAREN statement ELSE statement

    L_PAREN         shift and go to state 171


state 86

    (6) const_or_parenthesis -> L_PAREN . expression R_PAREN
    (33) cast_expression -> L_PAREN . type_name R_PAREN cast_expression
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (167) type_name -> . specifier_qualifier_list
    (168) type_name -> . specifier_qualifier_list abstract_declarator
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (121) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_specifier
    (123) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (124) specifier_qualifier_list -> . type_qualifier
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 172
    type_name                      shift and go to state 173
    cast_expression                shift and go to state 110
    assignment_expression          shift and go to state 93
    specifier_qualifier_list       shift and go to state 174
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    type_specifier                 shift and go to state 151
    type_qualifier                 shift and go to state 152
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    struct_or_union                shift and go to state 34
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 87

    (208) selection_statement -> SWITCH . L_PAREN expression R_PAREN statement

    L_PAREN         shift and go to state 175


state 88

    (209) iteration_statement -> iteration_header . iteration_body
    (213) iteration_body -> . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    iteration_header               shift and go to state 88
    iteration_body                 shift and go to state 176
    statement                      shift and go to state 177
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    compound_statement_begin       shift and go to state 41
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 89

    (214) jump_statement -> GOTO . IDENTIFIER SEMI

    IDENTIFIER      shift and go to state 178


state 90

    (215) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 179


state 91

    (216) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 180


state 92

    (217) jump_statement -> RETURN . SEMI
    (218) jump_statement -> RETURN . expression SEMI
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    SEMI            shift and go to state 181
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 182
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 93

    (79) expression -> assignment_expression .

    SEMI            reduce using rule 79 (expression -> assignment_expression .)
    COMMA           reduce using rule 79 (expression -> assignment_expression .)
    R_PAREN         reduce using rule 79 (expression -> assignment_expression .)
    COLON           reduce using rule 79 (expression -> assignment_expression .)
    R_SQUARE        reduce using rule 79 (expression -> assignment_expression .)


state 94

    (210) iteration_header -> WHILE . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 183


state 95

    (211) iteration_header -> FOR . L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> FOR . L_PAREN expression_statement expression_statement expression R_PAREN

    L_PAREN         shift and go to state 184


state 96

    (65) assignment_expression -> conditional_expression .

    SEMI            reduce using rule 65 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 65 (assignment_expression -> conditional_expression .)
    R_PAREN         reduce using rule 65 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 65 (assignment_expression -> conditional_expression .)
    R_SQUARE        reduce using rule 65 (assignment_expression -> conditional_expression .)
    R_BRACE         reduce using rule 65 (assignment_expression -> conditional_expression .)


state 97

    (66) assignment_expression -> assignment_lhs . assignment_operator assignment_expression
    (68) assignment_operator -> . EQUAL
    (69) assignment_operator -> . MUL_ASSIGN
    (70) assignment_operator -> . DIV_ASSIGN
    (71) assignment_operator -> . MOD_ASSIGN
    (72) assignment_operator -> . ADD_ASSIGN
    (73) assignment_operator -> . SUB_ASSIGN
    (74) assignment_operator -> . LEFT_ASSIGN
    (75) assignment_operator -> . RIGHT_ASSIGN
    (76) assignment_operator -> . AND_ASSIGN
    (77) assignment_operator -> . XOR_ASSIGN
    (78) assignment_operator -> . OR_ASSIGN

    EQUAL           shift and go to state 186
    MUL_ASSIGN      shift and go to state 187
    DIV_ASSIGN      shift and go to state 188
    MOD_ASSIGN      shift and go to state 189
    ADD_ASSIGN      shift and go to state 190
    SUB_ASSIGN      shift and go to state 191
    LEFT_ASSIGN     shift and go to state 192
    RIGHT_ASSIGN    shift and go to state 193
    AND_ASSIGN      shift and go to state 194
    XOR_ASSIGN      shift and go to state 195
    OR_ASSIGN       shift and go to state 196

    assignment_operator            shift and go to state 185

state 98

    (63) conditional_expression -> logical_or_expression .
    (64) conditional_expression -> logical_or_expression . QUEST expression COLON conditional_expression
    (62) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    SEMI            reduce using rule 63 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 63 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 63 (conditional_expression -> logical_or_expression .)
    R_PAREN         reduce using rule 63 (conditional_expression -> logical_or_expression .)
    R_SQUARE        reduce using rule 63 (conditional_expression -> logical_or_expression .)
    R_BRACE         reduce using rule 63 (conditional_expression -> logical_or_expression .)
    QUEST           shift and go to state 197
    OR_OP           shift and go to state 198


state 99

    (67) assignment_lhs -> unary_expression .
    (32) cast_expression -> unary_expression .

    EQUAL           reduce using rule 67 (assignment_lhs -> unary_expression .)
    MUL_ASSIGN      reduce using rule 67 (assignment_lhs -> unary_expression .)
    DIV_ASSIGN      reduce using rule 67 (assignment_lhs -> unary_expression .)
    MOD_ASSIGN      reduce using rule 67 (assignment_lhs -> unary_expression .)
    ADD_ASSIGN      reduce using rule 67 (assignment_lhs -> unary_expression .)
    SUB_ASSIGN      reduce using rule 67 (assignment_lhs -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 67 (assignment_lhs -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 67 (assignment_lhs -> unary_expression .)
    AND_ASSIGN      reduce using rule 67 (assignment_lhs -> unary_expression .)
    XOR_ASSIGN      reduce using rule 67 (assignment_lhs -> unary_expression .)
    OR_ASSIGN       reduce using rule 67 (assignment_lhs -> unary_expression .)
    STAR            reduce using rule 32 (cast_expression -> unary_expression .)
    SLASH           reduce using rule 32 (cast_expression -> unary_expression .)
    PERCENT         reduce using rule 32 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 32 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 32 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 32 (cast_expression -> unary_expression .)
    LESS            reduce using rule 32 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 32 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    AMP             reduce using rule 32 (cast_expression -> unary_expression .)
    CARET           reduce using rule 32 (cast_expression -> unary_expression .)
    PIPE            reduce using rule 32 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 32 (cast_expression -> unary_expression .)
    QUEST           reduce using rule 32 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 32 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 32 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    R_PAREN         reduce using rule 32 (cast_expression -> unary_expression .)
    COLON           reduce using rule 32 (cast_expression -> unary_expression .)
    R_SQUARE        reduce using rule 32 (cast_expression -> unary_expression .)
    R_BRACE         reduce using rule 32 (cast_expression -> unary_expression .)


state 100

    (61) logical_or_expression -> logical_and_expression .
    (60) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    QUEST           reduce using rule 61 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 61 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 61 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 61 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 61 (logical_or_expression -> logical_and_expression .)
    R_PAREN         reduce using rule 61 (logical_or_expression -> logical_and_expression .)
    R_SQUARE        reduce using rule 61 (logical_or_expression -> logical_and_expression .)
    R_BRACE         reduce using rule 61 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 199


state 101

    (19) unary_expression -> postfix_expression .
    (11) postfix_expression -> postfix_expression . L_SQUARE expression R_SQUARE
    (12) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (13) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (14) postfix_expression -> postfix_expression . INC_OP
    (15) postfix_expression -> postfix_expression . DEC_OP

    EQUAL           reduce using rule 19 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 19 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 19 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 19 (unary_expression -> postfix_expression .)
    STAR            reduce using rule 19 (unary_expression -> postfix_expression .)
    SLASH           reduce using rule 19 (unary_expression -> postfix_expression .)
    PERCENT         reduce using rule 19 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 19 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 19 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 19 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 19 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 19 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 19 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    AMP             reduce using rule 19 (unary_expression -> postfix_expression .)
    CARET           reduce using rule 19 (unary_expression -> postfix_expression .)
    PIPE            reduce using rule 19 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 19 (unary_expression -> postfix_expression .)
    QUEST           reduce using rule 19 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 19 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 19 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 19 (unary_expression -> postfix_expression .)
    R_PAREN         reduce using rule 19 (unary_expression -> postfix_expression .)
    R_SQUARE        reduce using rule 19 (unary_expression -> postfix_expression .)
    R_BRACE         reduce using rule 19 (unary_expression -> postfix_expression .)
    L_SQUARE        shift and go to state 200
    DOT             shift and go to state 201
    PTR_OP          shift and go to state 202
    INC_OP          shift and go to state 203
    DEC_OP          shift and go to state 204


state 102

    (20) unary_expression -> INC_OP . unary_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 206

    unary_expression               shift and go to state 205
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 103

    (21) unary_expression -> DEC_OP . unary_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 206

    unary_expression               shift and go to state 207
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 104

    (22) unary_expression -> unary_op_before_cast_exp .

    EQUAL           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    MUL_ASSIGN      reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    DIV_ASSIGN      reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    MOD_ASSIGN      reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    ADD_ASSIGN      reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    SUB_ASSIGN      reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    LEFT_ASSIGN     reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    RIGHT_ASSIGN    reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    AND_ASSIGN      reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    XOR_ASSIGN      reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    OR_ASSIGN       reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    STAR            reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    SLASH           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    PERCENT         reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    PLUS            reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    MINUS           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    LEFT_OP         reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    RIGHT_OP        reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    LESS            reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    GREATER         reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    LE_OP           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    GE_OP           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    AMP             reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    CARET           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    PIPE            reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    AND_OP          reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    QUEST           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    OR_OP           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    SEMI            reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    COMMA           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    EQ_OP           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    NE_OP           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    COLON           reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    R_PAREN         reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    R_SQUARE        reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)
    R_BRACE         reduce using rule 22 (unary_expression -> unary_op_before_cast_exp .)


state 105

    (23) unary_expression -> SIZEOF . unary_expression
    (24) unary_expression -> SIZEOF . L_PAREN type_name R_PAREN
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 209
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    unary_expression               shift and go to state 208
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 106

    (59) logical_and_expression -> inclusive_or_expression .
    (58) inclusive_or_expression -> inclusive_or_expression . PIPE exclusive_or_expression

    AND_OP          reduce using rule 59 (logical_and_expression -> inclusive_or_expression .)
    QUEST           reduce using rule 59 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 59 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 59 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 59 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 59 (logical_and_expression -> inclusive_or_expression .)
    R_PAREN         reduce using rule 59 (logical_and_expression -> inclusive_or_expression .)
    R_SQUARE        reduce using rule 59 (logical_and_expression -> inclusive_or_expression .)
    R_BRACE         reduce using rule 59 (logical_and_expression -> inclusive_or_expression .)
    PIPE            shift and go to state 210


state 107

    (10) postfix_expression -> primary_expression .

    L_SQUARE        reduce using rule 10 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 10 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 10 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 10 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 10 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 10 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 10 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 10 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 10 (postfix_expression -> primary_expression .)
    STAR            reduce using rule 10 (postfix_expression -> primary_expression .)
    SLASH           reduce using rule 10 (postfix_expression -> primary_expression .)
    PERCENT         reduce using rule 10 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 10 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 10 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 10 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 10 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 10 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 10 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 10 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 10 (postfix_expression -> primary_expression .)
    AMP             reduce using rule 10 (postfix_expression -> primary_expression .)
    CARET           reduce using rule 10 (postfix_expression -> primary_expression .)
    PIPE            reduce using rule 10 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 10 (postfix_expression -> primary_expression .)
    QUEST           reduce using rule 10 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 10 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 10 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 10 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 10 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 10 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 10 (postfix_expression -> primary_expression .)
    R_PAREN         reduce using rule 10 (postfix_expression -> primary_expression .)
    R_SQUARE        reduce using rule 10 (postfix_expression -> primary_expression .)
    R_BRACE         reduce using rule 10 (postfix_expression -> primary_expression .)


state 108

    (16) postfix_expression -> function_call .

    L_SQUARE        reduce using rule 16 (postfix_expression -> function_call .)
    DOT             reduce using rule 16 (postfix_expression -> function_call .)
    PTR_OP          reduce using rule 16 (postfix_expression -> function_call .)
    INC_OP          reduce using rule 16 (postfix_expression -> function_call .)
    DEC_OP          reduce using rule 16 (postfix_expression -> function_call .)
    EQUAL           reduce using rule 16 (postfix_expression -> function_call .)
    MUL_ASSIGN      reduce using rule 16 (postfix_expression -> function_call .)
    DIV_ASSIGN      reduce using rule 16 (postfix_expression -> function_call .)
    MOD_ASSIGN      reduce using rule 16 (postfix_expression -> function_call .)
    ADD_ASSIGN      reduce using rule 16 (postfix_expression -> function_call .)
    SUB_ASSIGN      reduce using rule 16 (postfix_expression -> function_call .)
    LEFT_ASSIGN     reduce using rule 16 (postfix_expression -> function_call .)
    RIGHT_ASSIGN    reduce using rule 16 (postfix_expression -> function_call .)
    AND_ASSIGN      reduce using rule 16 (postfix_expression -> function_call .)
    XOR_ASSIGN      reduce using rule 16 (postfix_expression -> function_call .)
    OR_ASSIGN       reduce using rule 16 (postfix_expression -> function_call .)
    STAR            reduce using rule 16 (postfix_expression -> function_call .)
    SLASH           reduce using rule 16 (postfix_expression -> function_call .)
    PERCENT         reduce using rule 16 (postfix_expression -> function_call .)
    PLUS            reduce using rule 16 (postfix_expression -> function_call .)
    MINUS           reduce using rule 16 (postfix_expression -> function_call .)
    LEFT_OP         reduce using rule 16 (postfix_expression -> function_call .)
    RIGHT_OP        reduce using rule 16 (postfix_expression -> function_call .)
    LESS            reduce using rule 16 (postfix_expression -> function_call .)
    GREATER         reduce using rule 16 (postfix_expression -> function_call .)
    LE_OP           reduce using rule 16 (postfix_expression -> function_call .)
    GE_OP           reduce using rule 16 (postfix_expression -> function_call .)
    AMP             reduce using rule 16 (postfix_expression -> function_call .)
    CARET           reduce using rule 16 (postfix_expression -> function_call .)
    PIPE            reduce using rule 16 (postfix_expression -> function_call .)
    AND_OP          reduce using rule 16 (postfix_expression -> function_call .)
    QUEST           reduce using rule 16 (postfix_expression -> function_call .)
    OR_OP           reduce using rule 16 (postfix_expression -> function_call .)
    SEMI            reduce using rule 16 (postfix_expression -> function_call .)
    COMMA           reduce using rule 16 (postfix_expression -> function_call .)
    EQ_OP           reduce using rule 16 (postfix_expression -> function_call .)
    NE_OP           reduce using rule 16 (postfix_expression -> function_call .)
    COLON           reduce using rule 16 (postfix_expression -> function_call .)
    R_PAREN         reduce using rule 16 (postfix_expression -> function_call .)
    R_SQUARE        reduce using rule 16 (postfix_expression -> function_call .)
    R_BRACE         reduce using rule 16 (postfix_expression -> function_call .)


state 109

    (25) unary_op_before_cast_exp -> unary_operator . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 211
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 110

    (34) multiplicative_expression -> cast_expression .

    STAR            reduce using rule 34 (multiplicative_expression -> cast_expression .)
    SLASH           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    PERCENT         reduce using rule 34 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 34 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 34 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LESS            reduce using rule 34 (multiplicative_expression -> cast_expression .)
    GREATER         reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    AMP             reduce using rule 34 (multiplicative_expression -> cast_expression .)
    CARET           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    PIPE            reduce using rule 34 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 34 (multiplicative_expression -> cast_expression .)
    QUEST           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 34 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    R_PAREN         reduce using rule 34 (multiplicative_expression -> cast_expression .)
    R_SQUARE        reduce using rule 34 (multiplicative_expression -> cast_expression .)
    R_BRACE         reduce using rule 34 (multiplicative_expression -> cast_expression .)


state 111

    (57) inclusive_or_expression -> exclusive_or_expression .
    (56) exclusive_or_expression -> exclusive_or_expression . CARET and_expression

    PIPE            reduce using rule 57 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 57 (inclusive_or_expression -> exclusive_or_expression .)
    QUEST           reduce using rule 57 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 57 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 57 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 57 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 57 (inclusive_or_expression -> exclusive_or_expression .)
    R_PAREN         reduce using rule 57 (inclusive_or_expression -> exclusive_or_expression .)
    R_SQUARE        reduce using rule 57 (inclusive_or_expression -> exclusive_or_expression .)
    R_BRACE         reduce using rule 57 (inclusive_or_expression -> exclusive_or_expression .)
    CARET           shift and go to state 212


state 112

    (1) primary_expression -> variable_use .

    L_SQUARE        reduce using rule 1 (primary_expression -> variable_use .)
    DOT             reduce using rule 1 (primary_expression -> variable_use .)
    PTR_OP          reduce using rule 1 (primary_expression -> variable_use .)
    INC_OP          reduce using rule 1 (primary_expression -> variable_use .)
    DEC_OP          reduce using rule 1 (primary_expression -> variable_use .)
    EQUAL           reduce using rule 1 (primary_expression -> variable_use .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    DIV_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    MOD_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    LEFT_ASSIGN     reduce using rule 1 (primary_expression -> variable_use .)
    RIGHT_ASSIGN    reduce using rule 1 (primary_expression -> variable_use .)
    AND_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    XOR_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    OR_ASSIGN       reduce using rule 1 (primary_expression -> variable_use .)
    STAR            reduce using rule 1 (primary_expression -> variable_use .)
    SLASH           reduce using rule 1 (primary_expression -> variable_use .)
    PERCENT         reduce using rule 1 (primary_expression -> variable_use .)
    PLUS            reduce using rule 1 (primary_expression -> variable_use .)
    MINUS           reduce using rule 1 (primary_expression -> variable_use .)
    LEFT_OP         reduce using rule 1 (primary_expression -> variable_use .)
    RIGHT_OP        reduce using rule 1 (primary_expression -> variable_use .)
    LESS            reduce using rule 1 (primary_expression -> variable_use .)
    GREATER         reduce using rule 1 (primary_expression -> variable_use .)
    LE_OP           reduce using rule 1 (primary_expression -> variable_use .)
    GE_OP           reduce using rule 1 (primary_expression -> variable_use .)
    AMP             reduce using rule 1 (primary_expression -> variable_use .)
    CARET           reduce using rule 1 (primary_expression -> variable_use .)
    PIPE            reduce using rule 1 (primary_expression -> variable_use .)
    AND_OP          reduce using rule 1 (primary_expression -> variable_use .)
    QUEST           reduce using rule 1 (primary_expression -> variable_use .)
    OR_OP           reduce using rule 1 (primary_expression -> variable_use .)
    SEMI            reduce using rule 1 (primary_expression -> variable_use .)
    COMMA           reduce using rule 1 (primary_expression -> variable_use .)
    EQ_OP           reduce using rule 1 (primary_expression -> variable_use .)
    NE_OP           reduce using rule 1 (primary_expression -> variable_use .)
    COLON           reduce using rule 1 (primary_expression -> variable_use .)
    R_PAREN         reduce using rule 1 (primary_expression -> variable_use .)
    R_SQUARE        reduce using rule 1 (primary_expression -> variable_use .)
    R_BRACE         reduce using rule 1 (primary_expression -> variable_use .)


state 113

    (2) primary_expression -> const_or_parenthesis .

    L_SQUARE        reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    DOT             reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    PTR_OP          reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    INC_OP          reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    DEC_OP          reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    EQUAL           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    MUL_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    DIV_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    MOD_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    SUB_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    LEFT_ASSIGN     reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    RIGHT_ASSIGN    reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    AND_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    XOR_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    OR_ASSIGN       reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    STAR            reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    SLASH           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    PERCENT         reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    PLUS            reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    MINUS           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    LEFT_OP         reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    RIGHT_OP        reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    LESS            reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    GREATER         reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    LE_OP           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    GE_OP           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    AMP             reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    CARET           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    PIPE            reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    AND_OP          reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    QUEST           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    OR_OP           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    SEMI            reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    COMMA           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    EQ_OP           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    NE_OP           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    COLON           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    R_PAREN         reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    R_SQUARE        reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    R_BRACE         reduce using rule 2 (primary_expression -> const_or_parenthesis .)


state 114

    (26) unary_operator -> AMP .

    L_PAREN         reduce using rule 26 (unary_operator -> AMP .)
    INC_OP          reduce using rule 26 (unary_operator -> AMP .)
    DEC_OP          reduce using rule 26 (unary_operator -> AMP .)
    SIZEOF          reduce using rule 26 (unary_operator -> AMP .)
    IDENTIFIER      reduce using rule 26 (unary_operator -> AMP .)
    AMP             reduce using rule 26 (unary_operator -> AMP .)
    STAR            reduce using rule 26 (unary_operator -> AMP .)
    PLUS            reduce using rule 26 (unary_operator -> AMP .)
    MINUS           reduce using rule 26 (unary_operator -> AMP .)
    TILDA           reduce using rule 26 (unary_operator -> AMP .)
    EXCLAIM         reduce using rule 26 (unary_operator -> AMP .)
    CONSTANT        reduce using rule 26 (unary_operator -> AMP .)
    CHARACTER       reduce using rule 26 (unary_operator -> AMP .)
    STRING_LITERAL  reduce using rule 26 (unary_operator -> AMP .)


state 115

    (27) unary_operator -> STAR .

    L_PAREN         reduce using rule 27 (unary_operator -> STAR .)
    INC_OP          reduce using rule 27 (unary_operator -> STAR .)
    DEC_OP          reduce using rule 27 (unary_operator -> STAR .)
    SIZEOF          reduce using rule 27 (unary_operator -> STAR .)
    IDENTIFIER      reduce using rule 27 (unary_operator -> STAR .)
    AMP             reduce using rule 27 (unary_operator -> STAR .)
    STAR            reduce using rule 27 (unary_operator -> STAR .)
    PLUS            reduce using rule 27 (unary_operator -> STAR .)
    MINUS           reduce using rule 27 (unary_operator -> STAR .)
    TILDA           reduce using rule 27 (unary_operator -> STAR .)
    EXCLAIM         reduce using rule 27 (unary_operator -> STAR .)
    CONSTANT        reduce using rule 27 (unary_operator -> STAR .)
    CHARACTER       reduce using rule 27 (unary_operator -> STAR .)
    STRING_LITERAL  reduce using rule 27 (unary_operator -> STAR .)


state 116

    (28) unary_operator -> PLUS .

    L_PAREN         reduce using rule 28 (unary_operator -> PLUS .)
    INC_OP          reduce using rule 28 (unary_operator -> PLUS .)
    DEC_OP          reduce using rule 28 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 28 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 28 (unary_operator -> PLUS .)
    AMP             reduce using rule 28 (unary_operator -> PLUS .)
    STAR            reduce using rule 28 (unary_operator -> PLUS .)
    PLUS            reduce using rule 28 (unary_operator -> PLUS .)
    MINUS           reduce using rule 28 (unary_operator -> PLUS .)
    TILDA           reduce using rule 28 (unary_operator -> PLUS .)
    EXCLAIM         reduce using rule 28 (unary_operator -> PLUS .)
    CONSTANT        reduce using rule 28 (unary_operator -> PLUS .)
    CHARACTER       reduce using rule 28 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 28 (unary_operator -> PLUS .)


state 117

    (29) unary_operator -> MINUS .

    L_PAREN         reduce using rule 29 (unary_operator -> MINUS .)
    INC_OP          reduce using rule 29 (unary_operator -> MINUS .)
    DEC_OP          reduce using rule 29 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 29 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 29 (unary_operator -> MINUS .)
    AMP             reduce using rule 29 (unary_operator -> MINUS .)
    STAR            reduce using rule 29 (unary_operator -> MINUS .)
    PLUS            reduce using rule 29 (unary_operator -> MINUS .)
    MINUS           reduce using rule 29 (unary_operator -> MINUS .)
    TILDA           reduce using rule 29 (unary_operator -> MINUS .)
    EXCLAIM         reduce using rule 29 (unary_operator -> MINUS .)
    CONSTANT        reduce using rule 29 (unary_operator -> MINUS .)
    CHARACTER       reduce using rule 29 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 29 (unary_operator -> MINUS .)


state 118

    (30) unary_operator -> TILDA .

    L_PAREN         reduce using rule 30 (unary_operator -> TILDA .)
    INC_OP          reduce using rule 30 (unary_operator -> TILDA .)
    DEC_OP          reduce using rule 30 (unary_operator -> TILDA .)
    SIZEOF          reduce using rule 30 (unary_operator -> TILDA .)
    IDENTIFIER      reduce using rule 30 (unary_operator -> TILDA .)
    AMP             reduce using rule 30 (unary_operator -> TILDA .)
    STAR            reduce using rule 30 (unary_operator -> TILDA .)
    PLUS            reduce using rule 30 (unary_operator -> TILDA .)
    MINUS           reduce using rule 30 (unary_operator -> TILDA .)
    TILDA           reduce using rule 30 (unary_operator -> TILDA .)
    EXCLAIM         reduce using rule 30 (unary_operator -> TILDA .)
    CONSTANT        reduce using rule 30 (unary_operator -> TILDA .)
    CHARACTER       reduce using rule 30 (unary_operator -> TILDA .)
    STRING_LITERAL  reduce using rule 30 (unary_operator -> TILDA .)


state 119

    (31) unary_operator -> EXCLAIM .

    L_PAREN         reduce using rule 31 (unary_operator -> EXCLAIM .)
    INC_OP          reduce using rule 31 (unary_operator -> EXCLAIM .)
    DEC_OP          reduce using rule 31 (unary_operator -> EXCLAIM .)
    SIZEOF          reduce using rule 31 (unary_operator -> EXCLAIM .)
    IDENTIFIER      reduce using rule 31 (unary_operator -> EXCLAIM .)
    AMP             reduce using rule 31 (unary_operator -> EXCLAIM .)
    STAR            reduce using rule 31 (unary_operator -> EXCLAIM .)
    PLUS            reduce using rule 31 (unary_operator -> EXCLAIM .)
    MINUS           reduce using rule 31 (unary_operator -> EXCLAIM .)
    TILDA           reduce using rule 31 (unary_operator -> EXCLAIM .)
    EXCLAIM         reduce using rule 31 (unary_operator -> EXCLAIM .)
    CONSTANT        reduce using rule 31 (unary_operator -> EXCLAIM .)
    CHARACTER       reduce using rule 31 (unary_operator -> EXCLAIM .)
    STRING_LITERAL  reduce using rule 31 (unary_operator -> EXCLAIM .)


state 120

    (55) exclusive_or_expression -> and_expression .
    (54) and_expression -> and_expression . AMP equality_expression

    CARET           reduce using rule 55 (exclusive_or_expression -> and_expression .)
    PIPE            reduce using rule 55 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 55 (exclusive_or_expression -> and_expression .)
    QUEST           reduce using rule 55 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 55 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 55 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 55 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 55 (exclusive_or_expression -> and_expression .)
    R_PAREN         reduce using rule 55 (exclusive_or_expression -> and_expression .)
    R_SQUARE        reduce using rule 55 (exclusive_or_expression -> and_expression .)
    R_BRACE         reduce using rule 55 (exclusive_or_expression -> and_expression .)
    AMP             shift and go to state 213


state 121

    (3) const_or_parenthesis -> CONSTANT .

    L_SQUARE        reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    DOT             reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    PTR_OP          reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    INC_OP          reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    DEC_OP          reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    EQUAL           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    MUL_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    DIV_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    MOD_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    ADD_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    SUB_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    LEFT_ASSIGN     reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    AND_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    XOR_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    OR_ASSIGN       reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    STAR            reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    SLASH           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    PERCENT         reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    PLUS            reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    MINUS           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    LEFT_OP         reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    RIGHT_OP        reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    LESS            reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    GREATER         reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    LE_OP           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    GE_OP           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    AMP             reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    CARET           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    PIPE            reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    AND_OP          reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    QUEST           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    OR_OP           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    SEMI            reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    COMMA           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    EQ_OP           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    NE_OP           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    COLON           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    R_PAREN         reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    R_SQUARE        reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    R_BRACE         reduce using rule 3 (const_or_parenthesis -> CONSTANT .)


state 122

    (4) const_or_parenthesis -> CHARACTER .

    L_SQUARE        reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    DOT             reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    PTR_OP          reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    INC_OP          reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    DEC_OP          reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    EQUAL           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    MUL_ASSIGN      reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    DIV_ASSIGN      reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    MOD_ASSIGN      reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    ADD_ASSIGN      reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    SUB_ASSIGN      reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    LEFT_ASSIGN     reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    RIGHT_ASSIGN    reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    AND_ASSIGN      reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    XOR_ASSIGN      reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    OR_ASSIGN       reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    STAR            reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    SLASH           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    PERCENT         reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    PLUS            reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    MINUS           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    LEFT_OP         reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    RIGHT_OP        reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    LESS            reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    GREATER         reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    LE_OP           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    GE_OP           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    AMP             reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    CARET           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    PIPE            reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    AND_OP          reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    QUEST           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    OR_OP           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    SEMI            reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    COMMA           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    EQ_OP           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    NE_OP           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    COLON           reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    R_PAREN         reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    R_SQUARE        reduce using rule 4 (const_or_parenthesis -> CHARACTER .)
    R_BRACE         reduce using rule 4 (const_or_parenthesis -> CHARACTER .)


state 123

    (5) const_or_parenthesis -> STRING_LITERAL .

    L_SQUARE        reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    DOT             reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    PTR_OP          reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    INC_OP          reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    DEC_OP          reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    EQUAL           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    LEFT_ASSIGN     reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    RIGHT_ASSIGN    reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    STAR            reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    SLASH           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    PERCENT         reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    PLUS            reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    MINUS           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    LEFT_OP         reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    RIGHT_OP        reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    LESS            reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    GREATER         reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    LE_OP           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    GE_OP           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    AMP             reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    CARET           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    PIPE            reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    AND_OP          reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    QUEST           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    OR_OP           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    SEMI            reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    COMMA           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    EQ_OP           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    NE_OP           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    COLON           reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    R_PAREN         reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    R_SQUARE        reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)
    R_BRACE         reduce using rule 5 (const_or_parenthesis -> STRING_LITERAL .)


state 124

    (53) and_expression -> equality_expression .
    (52) equality_exp_lhs -> equality_expression .

    AMP             reduce using rule 53 (and_expression -> equality_expression .)
    CARET           reduce using rule 53 (and_expression -> equality_expression .)
    PIPE            reduce using rule 53 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 53 (and_expression -> equality_expression .)
    QUEST           reduce using rule 53 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 53 (and_expression -> equality_expression .)
    SEMI            reduce using rule 53 (and_expression -> equality_expression .)
    COMMA           reduce using rule 53 (and_expression -> equality_expression .)
    COLON           reduce using rule 53 (and_expression -> equality_expression .)
    R_PAREN         reduce using rule 53 (and_expression -> equality_expression .)
    R_SQUARE        reduce using rule 53 (and_expression -> equality_expression .)
    R_BRACE         reduce using rule 53 (and_expression -> equality_expression .)
    EQ_OP           reduce using rule 52 (equality_exp_lhs -> equality_expression .)
    NE_OP           reduce using rule 52 (equality_exp_lhs -> equality_expression .)


state 125

    (49) equality_expression -> relational_expression .
    (45) relational_expression -> relational_expression . LESS shift_expression
    (46) relational_expression -> relational_expression . GREATER shift_expression
    (47) relational_expression -> relational_expression . LE_OP shift_expression
    (48) relational_expression -> relational_expression . GE_OP shift_expression

    AMP             reduce using rule 49 (equality_expression -> relational_expression .)
    CARET           reduce using rule 49 (equality_expression -> relational_expression .)
    PIPE            reduce using rule 49 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 49 (equality_expression -> relational_expression .)
    QUEST           reduce using rule 49 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 49 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 49 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 49 (equality_expression -> relational_expression .)
    EQ_OP           reduce using rule 49 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 49 (equality_expression -> relational_expression .)
    COLON           reduce using rule 49 (equality_expression -> relational_expression .)
    R_PAREN         reduce using rule 49 (equality_expression -> relational_expression .)
    R_SQUARE        reduce using rule 49 (equality_expression -> relational_expression .)
    R_BRACE         reduce using rule 49 (equality_expression -> relational_expression .)
    LESS            shift and go to state 214
    GREATER         shift and go to state 215
    LE_OP           shift and go to state 216
    GE_OP           shift and go to state 217


state 126

    (50) equality_expression -> equality_exp_lhs . EQ_OP relational_expression
    (51) equality_expression -> equality_exp_lhs . NE_OP relational_expression

    EQ_OP           shift and go to state 218
    NE_OP           shift and go to state 219


state 127

    (44) relational_expression -> shift_expression .
    (42) shift_expression -> shift_expression . LEFT_OP additive_expression
    (43) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 44 (relational_expression -> shift_expression .)
    GREATER         reduce using rule 44 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 44 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 44 (relational_expression -> shift_expression .)
    AMP             reduce using rule 44 (relational_expression -> shift_expression .)
    CARET           reduce using rule 44 (relational_expression -> shift_expression .)
    PIPE            reduce using rule 44 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 44 (relational_expression -> shift_expression .)
    QUEST           reduce using rule 44 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 44 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 44 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 44 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 44 (relational_expression -> shift_expression .)
    COLON           reduce using rule 44 (relational_expression -> shift_expression .)
    R_PAREN         reduce using rule 44 (relational_expression -> shift_expression .)
    R_SQUARE        reduce using rule 44 (relational_expression -> shift_expression .)
    R_BRACE         reduce using rule 44 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 220
    RIGHT_OP        shift and go to state 221


state 128

    (41) shift_expression -> additive_expression .
    (39) additive_expression -> additive_expression . PLUS multiplicative_expression
    (40) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 41 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 41 (shift_expression -> additive_expression .)
    LESS            reduce using rule 41 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 41 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 41 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 41 (shift_expression -> additive_expression .)
    AMP             reduce using rule 41 (shift_expression -> additive_expression .)
    CARET           reduce using rule 41 (shift_expression -> additive_expression .)
    PIPE            reduce using rule 41 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 41 (shift_expression -> additive_expression .)
    QUEST           reduce using rule 41 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 41 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 41 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 41 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 41 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 41 (shift_expression -> additive_expression .)
    COLON           reduce using rule 41 (shift_expression -> additive_expression .)
    R_PAREN         reduce using rule 41 (shift_expression -> additive_expression .)
    R_SQUARE        reduce using rule 41 (shift_expression -> additive_expression .)
    R_BRACE         reduce using rule 41 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 222
    MINUS           shift and go to state 223


state 129

    (38) additive_expression -> multiplicative_expression .
    (35) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (36) multiplicative_expression -> multiplicative_expression . SLASH cast_expression
    (37) multiplicative_expression -> multiplicative_expression . PERCENT cast_expression

    PLUS            reduce using rule 38 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 38 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 38 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    AMP             reduce using rule 38 (additive_expression -> multiplicative_expression .)
    CARET           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    PIPE            reduce using rule 38 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 38 (additive_expression -> multiplicative_expression .)
    QUEST           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 38 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    R_PAREN         reduce using rule 38 (additive_expression -> multiplicative_expression .)
    R_SQUARE        reduce using rule 38 (additive_expression -> multiplicative_expression .)
    R_BRACE         reduce using rule 38 (additive_expression -> multiplicative_expression .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 225
    PERCENT         shift and go to state 226


state 130

    (142) direct_declarator -> function_declaration .

    EQUAL           reduce using rule 142 (direct_declarator -> function_declaration .)
    SEMI            reduce using rule 142 (direct_declarator -> function_declaration .)
    COMMA           reduce using rule 142 (direct_declarator -> function_declaration .)
    R_PAREN         reduce using rule 142 (direct_declarator -> function_declaration .)
    COLON           reduce using rule 142 (direct_declarator -> function_declaration .)


state 131

    (83) declaration -> declaration_specifiers init_declarator_list SEMI .

    IDENTIFIER      reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEDEF         reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    EXTERN          reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STATIC          reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AUTO            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    REGISTER        reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONST           reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOLATILE        reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOID            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHAR            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SHORT           reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LONG            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT           reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DOUBLE          reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIGNED          reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNSIGNED        reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ENUM            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRUCT          reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNION           reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    L_BRACE         reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    R_BRACE         reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CASE            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEFAULT         reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SWITCH          reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    GOTO            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONTINUE        reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INC_OP          reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEC_OP          reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIZEOF          reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AMP             reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STAR            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TILDA           reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    EXCLAIM         reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONSTANT        reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHARACTER       reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRING_LITERAL  reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    L_PAREN         reduce using rule 83 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 132

    (91) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (92) init_declarator -> . uninitialized_declaration
    (93) init_declarator -> . initialized_declaration
    (95) uninitialized_declaration -> . declarator
    (94) initialized_declaration -> . declarator EQUAL initializer
    (139) declarator -> . pointer direct_declarator
    (140) declarator -> . direct_declarator
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN

    STAR            shift and go to state 56
    IDENTIFIER      shift and go to state 49
    L_PAREN         shift and go to state 50

    init_declarator                shift and go to state 227
    uninitialized_declaration      shift and go to state 51
    initialized_declaration        shift and go to state 52
    declarator                     shift and go to state 53
    pointer                        shift and go to state 54
    direct_declarator              shift and go to state 55
    variable_declaration           shift and go to state 57
    function_declaration           shift and go to state 130
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59

state 133

    (146) variable_declaration1 -> IDENTIFIER L_SQUARE . constant_expression R_SQUARE
    (147) variable_declaration1 -> IDENTIFIER L_SQUARE . R_SQUARE
    (81) constant_expression -> . conditional_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    R_SQUARE        shift and go to state 229
    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    constant_expression            shift and go to state 228
    conditional_expression         shift and go to state 164
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 106
    exclusive_or_expression        shift and go to state 111
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 134

    (148) variable_declaration2 -> L_PAREN declarator . R_PAREN

    R_PAREN         shift and go to state 230


state 135

    (94) initialized_declaration -> declarator EQUAL . initializer
    (181) initializer -> . assignment_expression
    (182) initializer -> . L_BRACE initializer_list R_BRACE
    (183) initializer -> . L_BRACE initializer_list COMMA R_BRACE
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACE         shift and go to state 233
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    initializer                    shift and go to state 231
    assignment_expression          shift and go to state 232
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 136

    (139) declarator -> pointer direct_declarator .

    EQUAL           reduce using rule 139 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 139 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 139 (declarator -> pointer direct_declarator .)
    R_PAREN         reduce using rule 139 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 139 (declarator -> pointer direct_declarator .)


state 137

    (153) pointer -> STAR type_qualifier_list .
    (155) pointer -> STAR type_qualifier_list . pointer
    (157) type_qualifier_list -> type_qualifier_list . type_qualifier
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 153 (pointer -> STAR type_qualifier_list .)
    L_PAREN         reduce using rule 153 (pointer -> STAR type_qualifier_list .)
    L_SQUARE        reduce using rule 153 (pointer -> STAR type_qualifier_list .)
    COMMA           reduce using rule 153 (pointer -> STAR type_qualifier_list .)
    R_PAREN         reduce using rule 153 (pointer -> STAR type_qualifier_list .)
    STAR            shift and go to state 56
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24

    pointer                        shift and go to state 234
    type_qualifier                 shift and go to state 235

state 138

    (154) pointer -> STAR pointer .

    IDENTIFIER      reduce using rule 154 (pointer -> STAR pointer .)
    L_PAREN         reduce using rule 154 (pointer -> STAR pointer .)
    L_SQUARE        reduce using rule 154 (pointer -> STAR pointer .)
    COMMA           reduce using rule 154 (pointer -> STAR pointer .)
    R_PAREN         reduce using rule 154 (pointer -> STAR pointer .)


state 139

    (156) type_qualifier_list -> type_qualifier .

    STAR            reduce using rule 156 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 156 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 156 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 156 (type_qualifier_list -> type_qualifier .)
    L_PAREN         reduce using rule 156 (type_qualifier_list -> type_qualifier .)
    L_SQUARE        reduce using rule 156 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 156 (type_qualifier_list -> type_qualifier .)
    R_PAREN         reduce using rule 156 (type_qualifier_list -> type_qualifier .)


state 140

    (165) identifier_list -> IDENTIFIER .

    R_PAREN         reduce using rule 165 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 165 (identifier_list -> IDENTIFIER .)


state 141

    (149) function_declaration -> IDENTIFIER L_PAREN parameter_type_list . R_PAREN

    R_PAREN         shift and go to state 236


state 142

    (151) function_declaration -> IDENTIFIER L_PAREN R_PAREN .

    L_BRACE         reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    TYPEDEF         reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    EXTERN          reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    STATIC          reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    AUTO            reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    REGISTER        reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    CONST           reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    VOLATILE        reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    VOID            reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    CHAR            reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    SHORT           reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    INT             reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    LONG            reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    FLOAT           reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    DOUBLE          reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    SIGNED          reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    UNSIGNED        reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    ENUM            reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    STRUCT          reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    UNION           reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    EQUAL           reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    SEMI            reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    COMMA           reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    COLON           reduce using rule 151 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)


state 143

    (150) function_declaration -> IDENTIFIER L_PAREN identifier_list . R_PAREN
    (166) identifier_list -> identifier_list . COMMA IDENTIFIER

    R_PAREN         shift and go to state 237
    COMMA           shift and go to state 238


state 144

    (158) parameter_type_list -> parameter_list .
    (159) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (161) parameter_list -> parameter_list . COMMA parameter_declaration

    R_PAREN         reduce using rule 158 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 239


state 145

    (160) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 160 (parameter_list -> parameter_declaration .)
    R_PAREN         reduce using rule 160 (parameter_list -> parameter_declaration .)


state 146

    (162) parameter_declaration -> declaration_specifiers . declarator
    (163) parameter_declaration -> declaration_specifiers . abstract_declarator
    (164) parameter_declaration -> declaration_specifiers .
    (139) declarator -> . pointer direct_declarator
    (140) declarator -> . direct_declarator
    (169) abstract_declarator -> . pointer
    (170) abstract_declarator -> . direct_abstract_declarator
    (171) abstract_declarator -> . pointer direct_abstract_declarator
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (172) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (173) direct_abstract_declarator -> . L_PAREN R_PAREN
    (174) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (175) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (176) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN

    COMMA           reduce using rule 164 (parameter_declaration -> declaration_specifiers .)
    R_PAREN         reduce using rule 164 (parameter_declaration -> declaration_specifiers .)
    STAR            shift and go to state 56
    L_SQUARE        shift and go to state 244
    L_PAREN         shift and go to state 245
    IDENTIFIER      shift and go to state 49

    declarator                     shift and go to state 240
    abstract_declarator            shift and go to state 241
    pointer                        shift and go to state 242
    direct_declarator              shift and go to state 55
    direct_abstract_declarator     shift and go to state 243
    variable_declaration           shift and go to state 57
    function_declaration           shift and go to state 130
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59

state 147

    (113) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE . struct_declaration_list R_BRACE
    (118) struct_declaration_list -> . struct_declaration
    (119) struct_declaration_list -> . struct_declaration_list struct_declaration
    (120) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (121) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_specifier
    (123) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (124) specifier_qualifier_list -> . type_qualifier
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration_list        shift and go to state 246
    struct_declaration             shift and go to state 149
    specifier_qualifier_list       shift and go to state 150
    type_specifier                 shift and go to state 151
    type_qualifier                 shift and go to state 152
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22

state 148

    (114) struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list . R_BRACE
    (119) struct_declaration_list -> struct_declaration_list . struct_declaration
    (120) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (121) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_specifier
    (123) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (124) specifier_qualifier_list -> . type_qualifier
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    R_BRACE         shift and go to state 247
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration             shift and go to state 248
    specifier_qualifier_list       shift and go to state 150
    type_specifier                 shift and go to state 151
    type_qualifier                 shift and go to state 152
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22

state 149

    (118) struct_declaration_list -> struct_declaration .

    R_BRACE         reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 118 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 118 (struct_declaration_list -> struct_declaration .)


state 150

    (120) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI
    (125) struct_declarator_list -> . struct_declarator
    (126) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (127) struct_declarator -> . declarator
    (128) struct_declarator -> . COLON constant_expression
    (129) struct_declarator -> . declarator COLON constant_expression
    (139) declarator -> . pointer direct_declarator
    (140) declarator -> . direct_declarator
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN

    COLON           shift and go to state 252
    STAR            shift and go to state 56
    IDENTIFIER      shift and go to state 49
    L_PAREN         shift and go to state 50

    struct_declarator_list         shift and go to state 249
    struct_declarator              shift and go to state 250
    declarator                     shift and go to state 251
    pointer                        shift and go to state 54
    direct_declarator              shift and go to state 55
    variable_declaration           shift and go to state 57
    function_declaration           shift and go to state 130
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59

state 151

    (121) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (122) specifier_qualifier_list -> type_specifier .
    (121) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_specifier
    (123) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (124) specifier_qualifier_list -> . type_qualifier
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    COLON           reduce using rule 122 (specifier_qualifier_list -> type_specifier .)
    STAR            reduce using rule 122 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 122 (specifier_qualifier_list -> type_specifier .)
    L_PAREN         reduce using rule 122 (specifier_qualifier_list -> type_specifier .)
    L_SQUARE        reduce using rule 122 (specifier_qualifier_list -> type_specifier .)
    R_PAREN         reduce using rule 122 (specifier_qualifier_list -> type_specifier .)
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_specifier                 shift and go to state 151
    specifier_qualifier_list       shift and go to state 253
    type_qualifier                 shift and go to state 152
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 152

    (123) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (124) specifier_qualifier_list -> type_qualifier .
    (121) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_specifier
    (123) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (124) specifier_qualifier_list -> . type_qualifier
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    COLON           reduce using rule 124 (specifier_qualifier_list -> type_qualifier .)
    STAR            reduce using rule 124 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 124 (specifier_qualifier_list -> type_qualifier .)
    L_PAREN         reduce using rule 124 (specifier_qualifier_list -> type_qualifier .)
    L_SQUARE        reduce using rule 124 (specifier_qualifier_list -> type_qualifier .)
    R_PAREN         reduce using rule 124 (specifier_qualifier_list -> type_qualifier .)
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_qualifier                 shift and go to state 152
    specifier_qualifier_list       shift and go to state 254
    type_specifier                 shift and go to state 151
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 153

    (130) enum_specifier -> ENUM L_BRACE enumerator_list . R_BRACE
    (134) enumerator_list -> enumerator_list . COMMA enumerator

    R_BRACE         shift and go to state 255
    COMMA           shift and go to state 256


state 154

    (133) enumerator_list -> enumerator .

    R_BRACE         reduce using rule 133 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 133 (enumerator_list -> enumerator .)


state 155

    (135) enumerator -> IDENTIFIER .
    (136) enumerator -> IDENTIFIER . EQUAL constant_expression

    R_BRACE         reduce using rule 135 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 135 (enumerator -> IDENTIFIER .)
    EQUAL           shift and go to state 257


state 156

    (131) enum_specifier -> ENUM IDENTIFIER L_BRACE . enumerator_list R_BRACE
    (133) enumerator_list -> . enumerator
    (134) enumerator_list -> . enumerator_list COMMA enumerator
    (135) enumerator -> . IDENTIFIER
    (136) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 155

    enumerator_list                shift and go to state 258
    enumerator                     shift and go to state 154

state 157

    (196) compound_statement -> compound_statement_begin statement_list R_BRACE .

    IDENTIFIER      reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    TYPEDEF         reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    EXTERN          reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    STATIC          reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    AUTO            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    REGISTER        reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    CONST           reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    VOLATILE        reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    VOID            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    CHAR            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    SHORT           reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    INT             reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    LONG            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    FLOAT           reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    DOUBLE          reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    SIGNED          reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    UNSIGNED        reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    ENUM            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    STRUCT          reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    UNION           reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    $end            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    R_BRACE         reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    CASE            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    DEFAULT         reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    SEMI            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    IF              reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    SWITCH          reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    GOTO            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    CONTINUE        reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    BREAK           reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    RETURN          reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    L_BRACE         reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    WHILE           reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    FOR             reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    INC_OP          reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    DEC_OP          reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    SIZEOF          reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    AMP             reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    STAR            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    PLUS            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    MINUS           reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    TILDA           reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    EXCLAIM         reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    CONSTANT        reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    CHARACTER       reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    STRING_LITERAL  reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    L_PAREN         reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)
    ELSE            reduce using rule 196 (compound_statement -> compound_statement_begin statement_list R_BRACE .)


state 158

    (203) statement_list -> statement_list statement .

    R_BRACE         reduce using rule 203 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 203 (statement_list -> statement_list statement .)
    CASE            reduce using rule 203 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 203 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 203 (statement_list -> statement_list statement .)
    IF              reduce using rule 203 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 203 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 203 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 203 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 203 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 203 (statement_list -> statement_list statement .)
    L_BRACE         reduce using rule 203 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 203 (statement_list -> statement_list statement .)
    FOR             reduce using rule 203 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 203 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 203 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 203 (statement_list -> statement_list statement .)
    AMP             reduce using rule 203 (statement_list -> statement_list statement .)
    STAR            reduce using rule 203 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 203 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 203 (statement_list -> statement_list statement .)
    TILDA           reduce using rule 203 (statement_list -> statement_list statement .)
    EXCLAIM         reduce using rule 203 (statement_list -> statement_list statement .)
    CONSTANT        reduce using rule 203 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 203 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 203 (statement_list -> statement_list statement .)
    L_PAREN         reduce using rule 203 (statement_list -> statement_list statement .)


state 159

    (197) compound_statement -> compound_statement_begin declaration_list R_BRACE .

    IDENTIFIER      reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    TYPEDEF         reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    EXTERN          reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    STATIC          reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    AUTO            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    REGISTER        reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    CONST           reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    VOLATILE        reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    VOID            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    CHAR            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    SHORT           reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    INT             reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    LONG            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    FLOAT           reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    DOUBLE          reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    SIGNED          reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    UNSIGNED        reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    ENUM            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    STRUCT          reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    UNION           reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    $end            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    R_BRACE         reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    CASE            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    DEFAULT         reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    SEMI            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    IF              reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    SWITCH          reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    GOTO            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    CONTINUE        reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    BREAK           reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    RETURN          reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    L_BRACE         reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    WHILE           reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    FOR             reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    INC_OP          reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    DEC_OP          reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    SIZEOF          reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    AMP             reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    STAR            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    PLUS            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    MINUS           reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    TILDA           reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    EXCLAIM         reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    CONSTANT        reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    CHARACTER       reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    STRING_LITERAL  reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    L_PAREN         reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)
    ELSE            reduce using rule 197 (compound_statement -> compound_statement_begin declaration_list R_BRACE .)


state 160

    (198) compound_statement -> compound_statement_begin declaration_list statement_list . R_BRACE
    (203) statement_list -> statement_list . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACE         shift and go to state 259
    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    compound_statement_begin       shift and go to state 41
    statement                      shift and go to state 158
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    expression                     shift and go to state 84
    iteration_header               shift and go to state 88
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 161

    (192) labeled_statement -> IDENTIFIER COLON . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    statement                      shift and go to state 260
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    compound_statement_begin       shift and go to state 41
    expression                     shift and go to state 84
    iteration_header               shift and go to state 88
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 162

    (8) function_call -> IDENTIFIER L_PAREN . R_PAREN
    (9) function_call -> IDENTIFIER L_PAREN . argument_expression_list R_PAREN
    (17) argument_expression_list -> . assignment_expression
    (18) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_PAREN         shift and go to state 261
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    argument_expression_list       shift and go to state 262
    assignment_expression          shift and go to state 263
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 163

    (193) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 264


state 164

    (81) constant_expression -> conditional_expression .

    COLON           reduce using rule 81 (constant_expression -> conditional_expression .)
    R_SQUARE        reduce using rule 81 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 81 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 81 (constant_expression -> conditional_expression .)
    R_BRACE         reduce using rule 81 (constant_expression -> conditional_expression .)


state 165

    (32) cast_expression -> unary_expression .

    STAR            reduce using rule 32 (cast_expression -> unary_expression .)
    SLASH           reduce using rule 32 (cast_expression -> unary_expression .)
    PERCENT         reduce using rule 32 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 32 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 32 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 32 (cast_expression -> unary_expression .)
    LESS            reduce using rule 32 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 32 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    AMP             reduce using rule 32 (cast_expression -> unary_expression .)
    CARET           reduce using rule 32 (cast_expression -> unary_expression .)
    PIPE            reduce using rule 32 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 32 (cast_expression -> unary_expression .)
    QUEST           reduce using rule 32 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    COLON           reduce using rule 32 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 32 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 32 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 32 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 32 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 32 (cast_expression -> unary_expression .)
    R_PAREN         reduce using rule 32 (cast_expression -> unary_expression .)
    R_SQUARE        reduce using rule 32 (cast_expression -> unary_expression .)
    R_BRACE         reduce using rule 32 (cast_expression -> unary_expression .)


state 166

    (33) cast_expression -> L_PAREN . type_name R_PAREN cast_expression
    (6) const_or_parenthesis -> L_PAREN . expression R_PAREN
    (167) type_name -> . specifier_qualifier_list
    (168) type_name -> . specifier_qualifier_list abstract_declarator
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (121) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_specifier
    (123) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (124) specifier_qualifier_list -> . type_qualifier
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    type_name                      shift and go to state 173
    cast_expression                shift and go to state 110
    expression                     shift and go to state 172
    specifier_qualifier_list       shift and go to state 174
    assignment_expression          shift and go to state 93
    type_specifier                 shift and go to state 151
    type_qualifier                 shift and go to state 152
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    struct_or_union                shift and go to state 34
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 167

    (8) function_call -> IDENTIFIER . L_PAREN R_PAREN
    (9) function_call -> IDENTIFIER . L_PAREN argument_expression_list R_PAREN
    (7) variable_use -> IDENTIFIER .

    L_PAREN         shift and go to state 162
    L_SQUARE        reduce using rule 7 (variable_use -> IDENTIFIER .)
    DOT             reduce using rule 7 (variable_use -> IDENTIFIER .)
    PTR_OP          reduce using rule 7 (variable_use -> IDENTIFIER .)
    INC_OP          reduce using rule 7 (variable_use -> IDENTIFIER .)
    DEC_OP          reduce using rule 7 (variable_use -> IDENTIFIER .)
    STAR            reduce using rule 7 (variable_use -> IDENTIFIER .)
    SLASH           reduce using rule 7 (variable_use -> IDENTIFIER .)
    PERCENT         reduce using rule 7 (variable_use -> IDENTIFIER .)
    PLUS            reduce using rule 7 (variable_use -> IDENTIFIER .)
    MINUS           reduce using rule 7 (variable_use -> IDENTIFIER .)
    LEFT_OP         reduce using rule 7 (variable_use -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 7 (variable_use -> IDENTIFIER .)
    LESS            reduce using rule 7 (variable_use -> IDENTIFIER .)
    GREATER         reduce using rule 7 (variable_use -> IDENTIFIER .)
    LE_OP           reduce using rule 7 (variable_use -> IDENTIFIER .)
    GE_OP           reduce using rule 7 (variable_use -> IDENTIFIER .)
    AMP             reduce using rule 7 (variable_use -> IDENTIFIER .)
    CARET           reduce using rule 7 (variable_use -> IDENTIFIER .)
    PIPE            reduce using rule 7 (variable_use -> IDENTIFIER .)
    AND_OP          reduce using rule 7 (variable_use -> IDENTIFIER .)
    QUEST           reduce using rule 7 (variable_use -> IDENTIFIER .)
    OR_OP           reduce using rule 7 (variable_use -> IDENTIFIER .)
    COLON           reduce using rule 7 (variable_use -> IDENTIFIER .)
    EQ_OP           reduce using rule 7 (variable_use -> IDENTIFIER .)
    NE_OP           reduce using rule 7 (variable_use -> IDENTIFIER .)
    EQUAL           reduce using rule 7 (variable_use -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 7 (variable_use -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 7 (variable_use -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 7 (variable_use -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 7 (variable_use -> IDENTIFIER .)
    R_PAREN         reduce using rule 7 (variable_use -> IDENTIFIER .)
    COMMA           reduce using rule 7 (variable_use -> IDENTIFIER .)
    SEMI            reduce using rule 7 (variable_use -> IDENTIFIER .)
    R_SQUARE        reduce using rule 7 (variable_use -> IDENTIFIER .)
    R_BRACE         reduce using rule 7 (variable_use -> IDENTIFIER .)


state 168

    (194) labeled_statement -> DEFAULT COLON . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    statement                      shift and go to state 265
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    compound_statement_begin       shift and go to state 41
    expression                     shift and go to state 84
    iteration_header               shift and go to state 88
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 169

    (205) expression_statement -> expression SEMI .

    R_BRACE         reduce using rule 205 (expression_statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 205 (expression_statement -> expression SEMI .)
    CASE            reduce using rule 205 (expression_statement -> expression SEMI .)
    DEFAULT         reduce using rule 205 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 205 (expression_statement -> expression SEMI .)
    IF              reduce using rule 205 (expression_statement -> expression SEMI .)
    SWITCH          reduce using rule 205 (expression_statement -> expression SEMI .)
    GOTO            reduce using rule 205 (expression_statement -> expression SEMI .)
    CONTINUE        reduce using rule 205 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 205 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 205 (expression_statement -> expression SEMI .)
    L_BRACE         reduce using rule 205 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 205 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 205 (expression_statement -> expression SEMI .)
    INC_OP          reduce using rule 205 (expression_statement -> expression SEMI .)
    DEC_OP          reduce using rule 205 (expression_statement -> expression SEMI .)
    SIZEOF          reduce using rule 205 (expression_statement -> expression SEMI .)
    AMP             reduce using rule 205 (expression_statement -> expression SEMI .)
    STAR            reduce using rule 205 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 205 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 205 (expression_statement -> expression SEMI .)
    TILDA           reduce using rule 205 (expression_statement -> expression SEMI .)
    EXCLAIM         reduce using rule 205 (expression_statement -> expression SEMI .)
    CONSTANT        reduce using rule 205 (expression_statement -> expression SEMI .)
    CHARACTER       reduce using rule 205 (expression_statement -> expression SEMI .)
    STRING_LITERAL  reduce using rule 205 (expression_statement -> expression SEMI .)
    L_PAREN         reduce using rule 205 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 205 (expression_statement -> expression SEMI .)
    R_PAREN         reduce using rule 205 (expression_statement -> expression SEMI .)


state 170

    (80) expression -> expression COMMA . assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    assignment_expression          shift and go to state 266
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 171

    (206) selection_statement -> IF L_PAREN . expression R_PAREN statement
    (207) selection_statement -> IF L_PAREN . expression R_PAREN statement ELSE statement
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 267
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 172

    (6) const_or_parenthesis -> L_PAREN expression . R_PAREN
    (80) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 268
    COMMA           shift and go to state 170


state 173

    (33) cast_expression -> L_PAREN type_name . R_PAREN cast_expression

    R_PAREN         shift and go to state 269


state 174

    (167) type_name -> specifier_qualifier_list .
    (168) type_name -> specifier_qualifier_list . abstract_declarator
    (169) abstract_declarator -> . pointer
    (170) abstract_declarator -> . direct_abstract_declarator
    (171) abstract_declarator -> . pointer direct_abstract_declarator
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (172) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (173) direct_abstract_declarator -> . L_PAREN R_PAREN
    (174) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (175) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (176) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN

    R_PAREN         reduce using rule 167 (type_name -> specifier_qualifier_list .)
    STAR            shift and go to state 56
    L_SQUARE        shift and go to state 244
    L_PAREN         shift and go to state 272

    abstract_declarator            shift and go to state 270
    pointer                        shift and go to state 271
    direct_abstract_declarator     shift and go to state 243

state 175

    (208) selection_statement -> SWITCH L_PAREN . expression R_PAREN statement
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 273
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 176

    (209) iteration_statement -> iteration_header iteration_body .

    R_BRACE         reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    IDENTIFIER      reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    CASE            reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    DEFAULT         reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    SEMI            reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    IF              reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    SWITCH          reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    GOTO            reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    CONTINUE        reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    BREAK           reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    RETURN          reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    L_BRACE         reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    WHILE           reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    FOR             reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    INC_OP          reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    DEC_OP          reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    SIZEOF          reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    AMP             reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    STAR            reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    PLUS            reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    MINUS           reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    TILDA           reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    EXCLAIM         reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    CONSTANT        reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    CHARACTER       reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    STRING_LITERAL  reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    L_PAREN         reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)
    ELSE            reduce using rule 209 (iteration_statement -> iteration_header iteration_body .)


state 177

    (213) iteration_body -> statement .

    R_BRACE         reduce using rule 213 (iteration_body -> statement .)
    IDENTIFIER      reduce using rule 213 (iteration_body -> statement .)
    CASE            reduce using rule 213 (iteration_body -> statement .)
    DEFAULT         reduce using rule 213 (iteration_body -> statement .)
    SEMI            reduce using rule 213 (iteration_body -> statement .)
    IF              reduce using rule 213 (iteration_body -> statement .)
    SWITCH          reduce using rule 213 (iteration_body -> statement .)
    GOTO            reduce using rule 213 (iteration_body -> statement .)
    CONTINUE        reduce using rule 213 (iteration_body -> statement .)
    BREAK           reduce using rule 213 (iteration_body -> statement .)
    RETURN          reduce using rule 213 (iteration_body -> statement .)
    L_BRACE         reduce using rule 213 (iteration_body -> statement .)
    WHILE           reduce using rule 213 (iteration_body -> statement .)
    FOR             reduce using rule 213 (iteration_body -> statement .)
    INC_OP          reduce using rule 213 (iteration_body -> statement .)
    DEC_OP          reduce using rule 213 (iteration_body -> statement .)
    SIZEOF          reduce using rule 213 (iteration_body -> statement .)
    AMP             reduce using rule 213 (iteration_body -> statement .)
    STAR            reduce using rule 213 (iteration_body -> statement .)
    PLUS            reduce using rule 213 (iteration_body -> statement .)
    MINUS           reduce using rule 213 (iteration_body -> statement .)
    TILDA           reduce using rule 213 (iteration_body -> statement .)
    EXCLAIM         reduce using rule 213 (iteration_body -> statement .)
    CONSTANT        reduce using rule 213 (iteration_body -> statement .)
    CHARACTER       reduce using rule 213 (iteration_body -> statement .)
    STRING_LITERAL  reduce using rule 213 (iteration_body -> statement .)
    L_PAREN         reduce using rule 213 (iteration_body -> statement .)
    ELSE            reduce using rule 213 (iteration_body -> statement .)


state 178

    (214) jump_statement -> GOTO IDENTIFIER . SEMI

    SEMI            shift and go to state 274


state 179

    (215) jump_statement -> CONTINUE SEMI .

    R_BRACE         reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    IDENTIFIER      reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    L_BRACE         reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    INC_OP          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    DEC_OP          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    AMP             reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    STAR            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    TILDA           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    EXCLAIM         reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    CONSTANT        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    CHARACTER       reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    L_PAREN         reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)


state 180

    (216) jump_statement -> BREAK SEMI .

    R_BRACE         reduce using rule 216 (jump_statement -> BREAK SEMI .)
    IDENTIFIER      reduce using rule 216 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 216 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 216 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 216 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 216 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 216 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 216 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 216 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 216 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 216 (jump_statement -> BREAK SEMI .)
    L_BRACE         reduce using rule 216 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 216 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 216 (jump_statement -> BREAK SEMI .)
    INC_OP          reduce using rule 216 (jump_statement -> BREAK SEMI .)
    DEC_OP          reduce using rule 216 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 216 (jump_statement -> BREAK SEMI .)
    AMP             reduce using rule 216 (jump_statement -> BREAK SEMI .)
    STAR            reduce using rule 216 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 216 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 216 (jump_statement -> BREAK SEMI .)
    TILDA           reduce using rule 216 (jump_statement -> BREAK SEMI .)
    EXCLAIM         reduce using rule 216 (jump_statement -> BREAK SEMI .)
    CONSTANT        reduce using rule 216 (jump_statement -> BREAK SEMI .)
    CHARACTER       reduce using rule 216 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 216 (jump_statement -> BREAK SEMI .)
    L_PAREN         reduce using rule 216 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 216 (jump_statement -> BREAK SEMI .)


state 181

    (217) jump_statement -> RETURN SEMI .

    R_BRACE         reduce using rule 217 (jump_statement -> RETURN SEMI .)
    IDENTIFIER      reduce using rule 217 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 217 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 217 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    L_BRACE         reduce using rule 217 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 217 (jump_statement -> RETURN SEMI .)
    INC_OP          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    DEC_OP          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    AMP             reduce using rule 217 (jump_statement -> RETURN SEMI .)
    STAR            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    TILDA           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    EXCLAIM         reduce using rule 217 (jump_statement -> RETURN SEMI .)
    CONSTANT        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    CHARACTER       reduce using rule 217 (jump_statement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 217 (jump_statement -> RETURN SEMI .)
    L_PAREN         reduce using rule 217 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 217 (jump_statement -> RETURN SEMI .)


state 182

    (218) jump_statement -> RETURN expression . SEMI
    (80) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 275
    COMMA           shift and go to state 170


state 183

    (210) iteration_header -> WHILE L_PAREN . expression R_PAREN
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 276
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 184

    (211) iteration_header -> FOR L_PAREN . expression_statement expression_statement R_PAREN
    (212) iteration_header -> FOR L_PAREN . expression_statement expression_statement expression R_PAREN
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    SEMI            shift and go to state 80
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression_statement           shift and go to state 277
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 185

    (66) assignment_expression -> assignment_lhs assignment_operator . assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    assignment_lhs                 shift and go to state 97
    assignment_expression          shift and go to state 278
    conditional_expression         shift and go to state 96
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 186

    (68) assignment_operator -> EQUAL .

    INC_OP          reduce using rule 68 (assignment_operator -> EQUAL .)
    DEC_OP          reduce using rule 68 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 68 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 68 (assignment_operator -> EQUAL .)
    AMP             reduce using rule 68 (assignment_operator -> EQUAL .)
    STAR            reduce using rule 68 (assignment_operator -> EQUAL .)
    PLUS            reduce using rule 68 (assignment_operator -> EQUAL .)
    MINUS           reduce using rule 68 (assignment_operator -> EQUAL .)
    TILDA           reduce using rule 68 (assignment_operator -> EQUAL .)
    EXCLAIM         reduce using rule 68 (assignment_operator -> EQUAL .)
    CONSTANT        reduce using rule 68 (assignment_operator -> EQUAL .)
    CHARACTER       reduce using rule 68 (assignment_operator -> EQUAL .)
    STRING_LITERAL  reduce using rule 68 (assignment_operator -> EQUAL .)
    L_PAREN         reduce using rule 68 (assignment_operator -> EQUAL .)


state 187

    (69) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    AMP             reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    STAR            reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    PLUS            reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    MINUS           reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    TILDA           reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    EXCLAIM         reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    CONSTANT        reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    CHARACTER       reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    L_PAREN         reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)


state 188

    (70) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    AMP             reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    STAR            reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    PLUS            reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    MINUS           reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    TILDA           reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    EXCLAIM         reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    CONSTANT        reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    CHARACTER       reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    L_PAREN         reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)


state 189

    (71) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    AMP             reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    STAR            reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    TILDA           reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    EXCLAIM         reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    CONSTANT        reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    CHARACTER       reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    L_PAREN         reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)


state 190

    (72) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    AMP             reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    STAR            reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    TILDA           reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    EXCLAIM         reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    CONSTANT        reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    CHARACTER       reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    L_PAREN         reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)


state 191

    (73) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    AMP             reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    STAR            reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    TILDA           reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    EXCLAIM         reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    CONSTANT        reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    CHARACTER       reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    L_PAREN         reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)


state 192

    (74) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    AMP             reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    STAR            reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    PLUS            reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    MINUS           reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    TILDA           reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    EXCLAIM         reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    CONSTANT        reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    CHARACTER       reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    L_PAREN         reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)


state 193

    (75) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    AMP             reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    STAR            reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    PLUS            reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    MINUS           reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    TILDA           reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    EXCLAIM         reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    CONSTANT        reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    CHARACTER       reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    STRING_LITERAL  reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    L_PAREN         reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)


state 194

    (76) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    AMP             reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    STAR            reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    TILDA           reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    EXCLAIM         reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    CONSTANT        reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    CHARACTER       reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 76 (assignment_operator -> AND_ASSIGN .)
    L_PAREN         reduce using rule 76 (assignment_operator -> AND_ASSIGN .)


state 195

    (77) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    AMP             reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    STAR            reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    TILDA           reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    EXCLAIM         reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    CONSTANT        reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    CHARACTER       reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)
    L_PAREN         reduce using rule 77 (assignment_operator -> XOR_ASSIGN .)


state 196

    (78) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    AMP             reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    STAR            reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    TILDA           reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    EXCLAIM         reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    CONSTANT        reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    CHARACTER       reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 78 (assignment_operator -> OR_ASSIGN .)
    L_PAREN         reduce using rule 78 (assignment_operator -> OR_ASSIGN .)


state 197

    (64) conditional_expression -> logical_or_expression QUEST . expression COLON conditional_expression
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    logical_or_expression          shift and go to state 98
    expression                     shift and go to state 279
    conditional_expression         shift and go to state 96
    assignment_expression          shift and go to state 93
    assignment_lhs                 shift and go to state 97
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 198

    (62) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    logical_and_expression         shift and go to state 280
    inclusive_or_expression        shift and go to state 106
    exclusive_or_expression        shift and go to state 111
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 199

    (60) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    inclusive_or_expression        shift and go to state 281
    exclusive_or_expression        shift and go to state 111
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 200

    (11) postfix_expression -> postfix_expression L_SQUARE . expression R_SQUARE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    postfix_expression             shift and go to state 101
    expression                     shift and go to state 282
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 201

    (12) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 283


state 202

    (13) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 284


state 203

    (14) postfix_expression -> postfix_expression INC_OP .

    L_SQUARE        reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    DOT             reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    EQUAL           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    STAR            reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    SLASH           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    PERCENT         reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    PLUS            reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    MINUS           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    LESS            reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    GREATER         reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    AMP             reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    CARET           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    PIPE            reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    QUEST           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    SEMI            reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    COMMA           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    COLON           reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    R_PAREN         reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    R_SQUARE        reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)
    R_BRACE         reduce using rule 14 (postfix_expression -> postfix_expression INC_OP .)


state 204

    (15) postfix_expression -> postfix_expression DEC_OP .

    L_SQUARE        reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    DOT             reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    EQUAL           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    STAR            reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    SLASH           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    PERCENT         reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    PLUS            reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    MINUS           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    LESS            reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    GREATER         reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    AMP             reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    CARET           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    PIPE            reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    QUEST           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    SEMI            reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    COMMA           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    COLON           reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    R_PAREN         reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    R_SQUARE        reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)
    R_BRACE         reduce using rule 15 (postfix_expression -> postfix_expression DEC_OP .)


state 205

    (20) unary_expression -> INC_OP unary_expression .

    EQUAL           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    STAR            reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    SLASH           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    PERCENT         reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    PLUS            reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    MINUS           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    LESS            reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    GREATER         reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    AMP             reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    CARET           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    PIPE            reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    QUEST           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    SEMI            reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    COMMA           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    COLON           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    R_PAREN         reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    R_SQUARE        reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    R_BRACE         reduce using rule 20 (unary_expression -> INC_OP unary_expression .)


state 206

    (6) const_or_parenthesis -> L_PAREN . expression R_PAREN
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 172
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 207

    (21) unary_expression -> DEC_OP unary_expression .

    EQUAL           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    STAR            reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    SLASH           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    PERCENT         reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    PLUS            reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    MINUS           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    LESS            reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    GREATER         reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    AMP             reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    CARET           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    PIPE            reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    QUEST           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    SEMI            reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    COMMA           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    COLON           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    R_PAREN         reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    R_SQUARE        reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    R_BRACE         reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)


state 208

    (23) unary_expression -> SIZEOF unary_expression .

    EQUAL           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    STAR            reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    SLASH           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    PERCENT         reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    LESS            reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    GREATER         reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    AMP             reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    CARET           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    PIPE            reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    QUEST           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    R_PAREN         reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    R_SQUARE        reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    R_BRACE         reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)


state 209

    (24) unary_expression -> SIZEOF L_PAREN . type_name R_PAREN
    (6) const_or_parenthesis -> L_PAREN . expression R_PAREN
    (167) type_name -> . specifier_qualifier_list
    (168) type_name -> . specifier_qualifier_list abstract_declarator
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (121) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_specifier
    (123) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (124) specifier_qualifier_list -> . type_qualifier
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    type_name                      shift and go to state 285
    expression                     shift and go to state 172
    specifier_qualifier_list       shift and go to state 174
    assignment_expression          shift and go to state 93
    type_specifier                 shift and go to state 151
    type_qualifier                 shift and go to state 152
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    struct_or_union                shift and go to state 34
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 210

    (58) inclusive_or_expression -> inclusive_or_expression PIPE . exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    exclusive_or_expression        shift and go to state 286
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 211

    (25) unary_op_before_cast_exp -> unary_operator cast_expression .

    EQUAL           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    STAR            reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    SLASH           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    PERCENT         reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    PLUS            reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    MINUS           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    LESS            reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    GREATER         reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    LE_OP           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    GE_OP           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    AMP             reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    CARET           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    PIPE            reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    AND_OP          reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    QUEST           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    OR_OP           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    SEMI            reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    COMMA           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    NE_OP           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    COLON           reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    R_PAREN         reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    R_SQUARE        reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    R_BRACE         reduce using rule 25 (unary_op_before_cast_exp -> unary_operator cast_expression .)


state 212

    (56) exclusive_or_expression -> exclusive_or_expression CARET . and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    and_expression                 shift and go to state 287
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 213

    (54) and_expression -> and_expression AMP . equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    equality_expression            shift and go to state 288
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 214

    (45) relational_expression -> relational_expression LESS . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    shift_expression               shift and go to state 289
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 215

    (46) relational_expression -> relational_expression GREATER . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    shift_expression               shift and go to state 290
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 216

    (47) relational_expression -> relational_expression LE_OP . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    shift_expression               shift and go to state 291
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 217

    (48) relational_expression -> relational_expression GE_OP . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    shift_expression               shift and go to state 292
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 218

    (50) equality_expression -> equality_exp_lhs EQ_OP . relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    relational_expression          shift and go to state 293
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 219

    (51) equality_expression -> equality_exp_lhs NE_OP . relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    relational_expression          shift and go to state 294
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 220

    (42) shift_expression -> shift_expression LEFT_OP . additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    additive_expression            shift and go to state 295
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 221

    (43) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    additive_expression            shift and go to state 296
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 222

    (39) additive_expression -> additive_expression PLUS . multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    multiplicative_expression      shift and go to state 297
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 223

    (40) additive_expression -> additive_expression MINUS . multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    multiplicative_expression      shift and go to state 298
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 224

    (35) multiplicative_expression -> multiplicative_expression STAR . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    cast_expression                shift and go to state 299
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 225

    (36) multiplicative_expression -> multiplicative_expression SLASH . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    cast_expression                shift and go to state 300
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 226

    (37) multiplicative_expression -> multiplicative_expression PERCENT . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    cast_expression                shift and go to state 301
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 227

    (91) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 91 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 91 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 228

    (146) variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression . R_SQUARE

    R_SQUARE        shift and go to state 302


state 229

    (147) variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .

    EQUAL           reduce using rule 147 (variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .)
    SEMI            reduce using rule 147 (variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .)
    COMMA           reduce using rule 147 (variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .)
    R_PAREN         reduce using rule 147 (variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .)
    COLON           reduce using rule 147 (variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .)


state 230

    (148) variable_declaration2 -> L_PAREN declarator R_PAREN .

    EQUAL           reduce using rule 148 (variable_declaration2 -> L_PAREN declarator R_PAREN .)
    SEMI            reduce using rule 148 (variable_declaration2 -> L_PAREN declarator R_PAREN .)
    COMMA           reduce using rule 148 (variable_declaration2 -> L_PAREN declarator R_PAREN .)
    R_PAREN         reduce using rule 148 (variable_declaration2 -> L_PAREN declarator R_PAREN .)
    COLON           reduce using rule 148 (variable_declaration2 -> L_PAREN declarator R_PAREN .)


state 231

    (94) initialized_declaration -> declarator EQUAL initializer .

    SEMI            reduce using rule 94 (initialized_declaration -> declarator EQUAL initializer .)
    COMMA           reduce using rule 94 (initialized_declaration -> declarator EQUAL initializer .)


state 232

    (181) initializer -> assignment_expression .

    SEMI            reduce using rule 181 (initializer -> assignment_expression .)
    COMMA           reduce using rule 181 (initializer -> assignment_expression .)
    R_BRACE         reduce using rule 181 (initializer -> assignment_expression .)


state 233

    (182) initializer -> L_BRACE . initializer_list R_BRACE
    (183) initializer -> L_BRACE . initializer_list COMMA R_BRACE
    (184) initializer_list -> . initializer
    (185) initializer_list -> . initializer_list COMMA initializer
    (181) initializer -> . assignment_expression
    (182) initializer -> . L_BRACE initializer_list R_BRACE
    (183) initializer -> . L_BRACE initializer_list COMMA R_BRACE
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACE         shift and go to state 233
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    initializer_list               shift and go to state 303
    initializer                    shift and go to state 304
    assignment_expression          shift and go to state 232
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 234

    (155) pointer -> STAR type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 155 (pointer -> STAR type_qualifier_list pointer .)
    L_PAREN         reduce using rule 155 (pointer -> STAR type_qualifier_list pointer .)
    L_SQUARE        reduce using rule 155 (pointer -> STAR type_qualifier_list pointer .)
    COMMA           reduce using rule 155 (pointer -> STAR type_qualifier_list pointer .)
    R_PAREN         reduce using rule 155 (pointer -> STAR type_qualifier_list pointer .)


state 235

    (157) type_qualifier_list -> type_qualifier_list type_qualifier .

    STAR            reduce using rule 157 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 157 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 157 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 157 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    L_PAREN         reduce using rule 157 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    L_SQUARE        reduce using rule 157 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 157 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    R_PAREN         reduce using rule 157 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 236

    (149) function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .

    L_BRACE         reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    TYPEDEF         reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    EXTERN          reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    STATIC          reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    AUTO            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    REGISTER        reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    CONST           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    VOLATILE        reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    VOID            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    CHAR            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    SHORT           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    INT             reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    LONG            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    FLOAT           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    DOUBLE          reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    SIGNED          reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    UNSIGNED        reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    ENUM            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    STRUCT          reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    UNION           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    EQUAL           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    SEMI            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    COMMA           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    R_PAREN         reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    COLON           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)


state 237

    (150) function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .

    L_BRACE         reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    TYPEDEF         reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    EXTERN          reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    STATIC          reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    AUTO            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    REGISTER        reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    CONST           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    VOLATILE        reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    VOID            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    CHAR            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    SHORT           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    INT             reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    LONG            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    FLOAT           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    DOUBLE          reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    SIGNED          reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    UNSIGNED        reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    ENUM            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    STRUCT          reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    UNION           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    EQUAL           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    SEMI            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    COMMA           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    R_PAREN         reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    COLON           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)


state 238

    (166) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 305


state 239

    (159) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (161) parameter_list -> parameter_list COMMA . parameter_declaration
    (162) parameter_declaration -> . declaration_specifiers declarator
    (163) parameter_declaration -> . declaration_specifiers abstract_declarator
    (164) parameter_declaration -> . declaration_specifiers
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 306
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    parameter_declaration          shift and go to state 307
    declaration_specifiers         shift and go to state 146
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 240

    (162) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 162 (parameter_declaration -> declaration_specifiers declarator .)
    R_PAREN         reduce using rule 162 (parameter_declaration -> declaration_specifiers declarator .)


state 241

    (163) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 163 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    R_PAREN         reduce using rule 163 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 242

    (139) declarator -> pointer . direct_declarator
    (169) abstract_declarator -> pointer .
    (171) abstract_declarator -> pointer . direct_abstract_declarator
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (172) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (173) direct_abstract_declarator -> . L_PAREN R_PAREN
    (174) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (175) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (176) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN

    COMMA           reduce using rule 169 (abstract_declarator -> pointer .)
    R_PAREN         reduce using rule 169 (abstract_declarator -> pointer .)
    L_SQUARE        shift and go to state 244
    L_PAREN         shift and go to state 245
    IDENTIFIER      shift and go to state 49

    direct_declarator              shift and go to state 136
    direct_abstract_declarator     shift and go to state 308
    variable_declaration           shift and go to state 57
    function_declaration           shift and go to state 130
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59

state 243

    (170) abstract_declarator -> direct_abstract_declarator .
    (177) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN R_PAREN
    (178) direct_abstract_declarator -> direct_abstract_declarator . L_SQUARE R_SQUARE
    (179) direct_abstract_declarator -> direct_abstract_declarator . L_SQUARE constant_expression R_SQUARE
    (180) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN parameter_type_list R_PAREN

    COMMA           reduce using rule 170 (abstract_declarator -> direct_abstract_declarator .)
    R_PAREN         reduce using rule 170 (abstract_declarator -> direct_abstract_declarator .)
    L_PAREN         shift and go to state 309
    L_SQUARE        shift and go to state 310


state 244

    (172) direct_abstract_declarator -> L_SQUARE . R_SQUARE
    (174) direct_abstract_declarator -> L_SQUARE . constant_expression R_SQUARE
    (81) constant_expression -> . conditional_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    R_SQUARE        shift and go to state 311
    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    constant_expression            shift and go to state 312
    conditional_expression         shift and go to state 164
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 106
    exclusive_or_expression        shift and go to state 111
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 245

    (173) direct_abstract_declarator -> L_PAREN . R_PAREN
    (175) direct_abstract_declarator -> L_PAREN . abstract_declarator R_PAREN
    (176) direct_abstract_declarator -> L_PAREN . parameter_type_list R_PAREN
    (148) variable_declaration2 -> L_PAREN . declarator R_PAREN
    (169) abstract_declarator -> . pointer
    (170) abstract_declarator -> . direct_abstract_declarator
    (171) abstract_declarator -> . pointer direct_abstract_declarator
    (158) parameter_type_list -> . parameter_list
    (159) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (139) declarator -> . pointer direct_declarator
    (140) declarator -> . direct_declarator
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (172) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (173) direct_abstract_declarator -> . L_PAREN R_PAREN
    (174) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (175) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (176) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (160) parameter_list -> . parameter_declaration
    (161) parameter_list -> . parameter_list COMMA parameter_declaration
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (162) parameter_declaration -> . declaration_specifiers declarator
    (163) parameter_declaration -> . declaration_specifiers abstract_declarator
    (164) parameter_declaration -> . declaration_specifiers
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    R_PAREN         shift and go to state 313
    STAR            shift and go to state 56
    L_SQUARE        shift and go to state 244
    L_PAREN         shift and go to state 245
    IDENTIFIER      shift and go to state 49
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    abstract_declarator            shift and go to state 314
    parameter_type_list            shift and go to state 315
    declarator                     shift and go to state 134
    pointer                        shift and go to state 316
    direct_abstract_declarator     shift and go to state 243
    parameter_list                 shift and go to state 144
    direct_declarator              shift and go to state 55
    parameter_declaration          shift and go to state 145
    variable_declaration           shift and go to state 57
    function_declaration           shift and go to state 130
    declaration_specifiers         shift and go to state 146
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 246

    (113) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list . R_BRACE
    (119) struct_declaration_list -> struct_declaration_list . struct_declaration
    (120) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (121) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_specifier
    (123) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (124) specifier_qualifier_list -> . type_qualifier
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    R_BRACE         shift and go to state 317
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration             shift and go to state 248
    specifier_qualifier_list       shift and go to state 150
    type_specifier                 shift and go to state 151
    type_qualifier                 shift and go to state 152
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22

state 247

    (114) struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .

    TYPEDEF         reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    EXTERN          reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    STATIC          reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    AUTO            reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    REGISTER        reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    CONST           reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    VOLATILE        reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    VOID            reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    CHAR            reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    SHORT           reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    INT             reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    LONG            reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    FLOAT           reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    DOUBLE          reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    SIGNED          reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    UNSIGNED        reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    ENUM            reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    STRUCT          reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    UNION           reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    SEMI            reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    IDENTIFIER      reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    STAR            reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    L_PAREN         reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    L_SQUARE        reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    COMMA           reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    R_PAREN         reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    COLON           reduce using rule 114 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)


state 248

    (119) struct_declaration_list -> struct_declaration_list struct_declaration .

    R_BRACE         reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 119 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 249

    (120) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI
    (126) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            shift and go to state 318
    COMMA           shift and go to state 319


state 250

    (125) struct_declarator_list -> struct_declarator .

    SEMI            reduce using rule 125 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 125 (struct_declarator_list -> struct_declarator .)


state 251

    (127) struct_declarator -> declarator .
    (129) struct_declarator -> declarator . COLON constant_expression

    SEMI            reduce using rule 127 (struct_declarator -> declarator .)
    COMMA           reduce using rule 127 (struct_declarator -> declarator .)
    COLON           shift and go to state 320


state 252

    (128) struct_declarator -> COLON . constant_expression
    (81) constant_expression -> . conditional_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    constant_expression            shift and go to state 321
    conditional_expression         shift and go to state 164
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 106
    exclusive_or_expression        shift and go to state 111
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 253

    (121) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    COLON           reduce using rule 121 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    STAR            reduce using rule 121 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 121 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    L_PAREN         reduce using rule 121 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    L_SQUARE        reduce using rule 121 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    R_PAREN         reduce using rule 121 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 254

    (123) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    COLON           reduce using rule 123 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    STAR            reduce using rule 123 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 123 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    L_PAREN         reduce using rule 123 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    L_SQUARE        reduce using rule 123 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    R_PAREN         reduce using rule 123 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 255

    (130) enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .

    TYPEDEF         reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    EXTERN          reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    STATIC          reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    AUTO            reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    REGISTER        reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    CONST           reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    VOLATILE        reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    VOID            reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    CHAR            reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    SHORT           reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    INT             reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    LONG            reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    FLOAT           reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    DOUBLE          reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    SIGNED          reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    UNSIGNED        reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    ENUM            reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    STRUCT          reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    UNION           reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    SEMI            reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    IDENTIFIER      reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    STAR            reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    L_PAREN         reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    L_SQUARE        reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    COMMA           reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    R_PAREN         reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    COLON           reduce using rule 130 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)


state 256

    (134) enumerator_list -> enumerator_list COMMA . enumerator
    (135) enumerator -> . IDENTIFIER
    (136) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 155

    enumerator                     shift and go to state 322

state 257

    (136) enumerator -> IDENTIFIER EQUAL . constant_expression
    (81) constant_expression -> . conditional_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    constant_expression            shift and go to state 323
    conditional_expression         shift and go to state 164
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 106
    exclusive_or_expression        shift and go to state 111
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 258

    (131) enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list . R_BRACE
    (134) enumerator_list -> enumerator_list . COMMA enumerator

    R_BRACE         shift and go to state 324
    COMMA           shift and go to state 256


state 259

    (198) compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .

    IDENTIFIER      reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    TYPEDEF         reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    EXTERN          reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    STATIC          reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    AUTO            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    REGISTER        reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    CONST           reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    VOLATILE        reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    VOID            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    CHAR            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    SHORT           reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    INT             reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    LONG            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    FLOAT           reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    DOUBLE          reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    SIGNED          reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    UNSIGNED        reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    ENUM            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    STRUCT          reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    UNION           reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    $end            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    R_BRACE         reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    CASE            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    DEFAULT         reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    SEMI            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    IF              reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    SWITCH          reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    GOTO            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    CONTINUE        reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    BREAK           reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    RETURN          reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    L_BRACE         reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    WHILE           reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    FOR             reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    INC_OP          reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    DEC_OP          reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    SIZEOF          reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    AMP             reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    STAR            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    PLUS            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    MINUS           reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    TILDA           reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    EXCLAIM         reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    CONSTANT        reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    CHARACTER       reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    STRING_LITERAL  reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    L_PAREN         reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)
    ELSE            reduce using rule 198 (compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE .)


state 260

    (192) labeled_statement -> IDENTIFIER COLON statement .

    R_BRACE         reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMI            reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    L_BRACE         reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    INC_OP          reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    DEC_OP          reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    AMP             reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    STAR            reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    TILDA           reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    EXCLAIM         reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    CONSTANT        reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    CHARACTER       reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_LITERAL  reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    L_PAREN         reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)


state 261

    (8) function_call -> IDENTIFIER L_PAREN R_PAREN .

    L_SQUARE        reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    DOT             reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    PTR_OP          reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    INC_OP          reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    DEC_OP          reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    EQUAL           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    MUL_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    DIV_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    MOD_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    ADD_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    SUB_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    LEFT_ASSIGN     reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    RIGHT_ASSIGN    reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    AND_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    XOR_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    OR_ASSIGN       reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    STAR            reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    SLASH           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    PERCENT         reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    PLUS            reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    MINUS           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    LEFT_OP         reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    RIGHT_OP        reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    LESS            reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    GREATER         reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    LE_OP           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    GE_OP           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    AMP             reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    CARET           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    PIPE            reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    AND_OP          reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    QUEST           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    OR_OP           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    SEMI            reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    COMMA           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    EQ_OP           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    NE_OP           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    COLON           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    R_SQUARE        reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    R_BRACE         reduce using rule 8 (function_call -> IDENTIFIER L_PAREN R_PAREN .)


state 262

    (9) function_call -> IDENTIFIER L_PAREN argument_expression_list . R_PAREN
    (18) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    R_PAREN         shift and go to state 325
    COMMA           shift and go to state 326


state 263

    (17) argument_expression_list -> assignment_expression .

    R_PAREN         reduce using rule 17 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 17 (argument_expression_list -> assignment_expression .)


state 264

    (193) labeled_statement -> CASE constant_expression COLON . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    statement                      shift and go to state 327
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    compound_statement_begin       shift and go to state 41
    expression                     shift and go to state 84
    iteration_header               shift and go to state 88
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 265

    (194) labeled_statement -> DEFAULT COLON statement .

    R_BRACE         reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    L_BRACE         reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    INC_OP          reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    DEC_OP          reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    AMP             reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    STAR            reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    TILDA           reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    EXCLAIM         reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    CONSTANT        reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    CHARACTER       reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    L_PAREN         reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)


state 266

    (80) expression -> expression COMMA assignment_expression .

    SEMI            reduce using rule 80 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 80 (expression -> expression COMMA assignment_expression .)
    R_PAREN         reduce using rule 80 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 80 (expression -> expression COMMA assignment_expression .)
    R_SQUARE        reduce using rule 80 (expression -> expression COMMA assignment_expression .)


state 267

    (206) selection_statement -> IF L_PAREN expression . R_PAREN statement
    (207) selection_statement -> IF L_PAREN expression . R_PAREN statement ELSE statement
    (80) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 328
    COMMA           shift and go to state 170


state 268

    (6) const_or_parenthesis -> L_PAREN expression R_PAREN .

    L_SQUARE        reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    DOT             reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    PTR_OP          reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    INC_OP          reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    DEC_OP          reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    EQUAL           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    MUL_ASSIGN      reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    DIV_ASSIGN      reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    MOD_ASSIGN      reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    ADD_ASSIGN      reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    SUB_ASSIGN      reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    LEFT_ASSIGN     reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    RIGHT_ASSIGN    reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    AND_ASSIGN      reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    XOR_ASSIGN      reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    OR_ASSIGN       reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    STAR            reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    SLASH           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    PERCENT         reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    PLUS            reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    MINUS           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    LEFT_OP         reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    RIGHT_OP        reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    LESS            reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    GREATER         reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    LE_OP           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    GE_OP           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    AMP             reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    CARET           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    PIPE            reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    AND_OP          reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    QUEST           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    OR_OP           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    SEMI            reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    COMMA           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    EQ_OP           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    NE_OP           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    COLON           reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    R_PAREN         reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    R_SQUARE        reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    R_BRACE         reduce using rule 6 (const_or_parenthesis -> L_PAREN expression R_PAREN .)


state 269

    (33) cast_expression -> L_PAREN type_name R_PAREN . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    cast_expression                shift and go to state 329
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 270

    (168) type_name -> specifier_qualifier_list abstract_declarator .

    R_PAREN         reduce using rule 168 (type_name -> specifier_qualifier_list abstract_declarator .)


state 271

    (169) abstract_declarator -> pointer .
    (171) abstract_declarator -> pointer . direct_abstract_declarator
    (172) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (173) direct_abstract_declarator -> . L_PAREN R_PAREN
    (174) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (175) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (176) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN

    R_PAREN         reduce using rule 169 (abstract_declarator -> pointer .)
    L_SQUARE        shift and go to state 244
    L_PAREN         shift and go to state 272

    direct_abstract_declarator     shift and go to state 308

state 272

    (173) direct_abstract_declarator -> L_PAREN . R_PAREN
    (175) direct_abstract_declarator -> L_PAREN . abstract_declarator R_PAREN
    (176) direct_abstract_declarator -> L_PAREN . parameter_type_list R_PAREN
    (169) abstract_declarator -> . pointer
    (170) abstract_declarator -> . direct_abstract_declarator
    (171) abstract_declarator -> . pointer direct_abstract_declarator
    (158) parameter_type_list -> . parameter_list
    (159) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (172) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (173) direct_abstract_declarator -> . L_PAREN R_PAREN
    (174) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (175) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (176) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (160) parameter_list -> . parameter_declaration
    (161) parameter_list -> . parameter_list COMMA parameter_declaration
    (162) parameter_declaration -> . declaration_specifiers declarator
    (163) parameter_declaration -> . declaration_specifiers abstract_declarator
    (164) parameter_declaration -> . declaration_specifiers
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    R_PAREN         shift and go to state 313
    STAR            shift and go to state 56
    L_SQUARE        shift and go to state 244
    L_PAREN         shift and go to state 272
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    abstract_declarator            shift and go to state 314
    parameter_type_list            shift and go to state 315
    pointer                        shift and go to state 271
    direct_abstract_declarator     shift and go to state 243
    parameter_list                 shift and go to state 144
    parameter_declaration          shift and go to state 145
    declaration_specifiers         shift and go to state 146
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 273

    (208) selection_statement -> SWITCH L_PAREN expression . R_PAREN statement
    (80) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 330
    COMMA           shift and go to state 170


state 274

    (214) jump_statement -> GOTO IDENTIFIER SEMI .

    R_BRACE         reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CASE            reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEFAULT         reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SEMI            reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IF              reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SWITCH          reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    GOTO            reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CONTINUE        reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BREAK           reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    RETURN          reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    L_BRACE         reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    WHILE           reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FOR             reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INC_OP          reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEC_OP          reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SIZEOF          reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    AMP             reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STAR            reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    PLUS            reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    MINUS           reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    TILDA           reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    EXCLAIM         reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CONSTANT        reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CHARACTER       reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STRING_LITERAL  reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    L_PAREN         reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ELSE            reduce using rule 214 (jump_statement -> GOTO IDENTIFIER SEMI .)


state 275

    (218) jump_statement -> RETURN expression SEMI .

    R_BRACE         reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    IDENTIFIER      reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    L_BRACE         reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    INC_OP          reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    DEC_OP          reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    AMP             reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    STAR            reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    TILDA           reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    EXCLAIM         reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    CONSTANT        reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    CHARACTER       reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    L_PAREN         reduce using rule 218 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 218 (jump_statement -> RETURN expression SEMI .)


state 276

    (210) iteration_header -> WHILE L_PAREN expression . R_PAREN
    (80) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 331
    COMMA           shift and go to state 170


state 277

    (211) iteration_header -> FOR L_PAREN expression_statement . expression_statement R_PAREN
    (212) iteration_header -> FOR L_PAREN expression_statement . expression_statement expression R_PAREN
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    SEMI            shift and go to state 80
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression_statement           shift and go to state 332
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 278

    (66) assignment_expression -> assignment_lhs assignment_operator assignment_expression .

    SEMI            reduce using rule 66 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)
    COMMA           reduce using rule 66 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)
    R_PAREN         reduce using rule 66 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)
    COLON           reduce using rule 66 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)
    R_SQUARE        reduce using rule 66 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)
    R_BRACE         reduce using rule 66 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)


state 279

    (64) conditional_expression -> logical_or_expression QUEST expression . COLON conditional_expression
    (80) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 333
    COMMA           shift and go to state 170


state 280

    (62) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (60) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    QUEST           reduce using rule 62 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 62 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    SEMI            reduce using rule 62 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COMMA           reduce using rule 62 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COLON           reduce using rule 62 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    R_PAREN         reduce using rule 62 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    R_SQUARE        reduce using rule 62 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    R_BRACE         reduce using rule 62 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 199


state 281

    (60) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (58) inclusive_or_expression -> inclusive_or_expression . PIPE exclusive_or_expression

    AND_OP          reduce using rule 60 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    QUEST           reduce using rule 60 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 60 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    SEMI            reduce using rule 60 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COMMA           reduce using rule 60 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COLON           reduce using rule 60 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    R_PAREN         reduce using rule 60 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    R_SQUARE        reduce using rule 60 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    R_BRACE         reduce using rule 60 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    PIPE            shift and go to state 210


state 282

    (11) postfix_expression -> postfix_expression L_SQUARE expression . R_SQUARE
    (80) expression -> expression . COMMA assignment_expression

    R_SQUARE        shift and go to state 334
    COMMA           shift and go to state 170


state 283

    (12) postfix_expression -> postfix_expression DOT IDENTIFIER .

    L_SQUARE        reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PTR_OP          reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INC_OP          reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DEC_OP          reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUAL           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    STAR            reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SLASH           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PERCENT         reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_OP         reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_OP        reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS            reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER         reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LE_OP           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GE_OP           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AMP             reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CARET           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PIPE            reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_OP          reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUEST           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_OP           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMI            reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ_OP           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NE_OP           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_PAREN         reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_SQUARE        reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_BRACE         reduce using rule 12 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 284

    (13) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    L_SQUARE        reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DOT             reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQUAL           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    STAR            reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SLASH           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PERCENT         reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PLUS            reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MINUS           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LESS            reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GREATER         reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AMP             reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    CARET           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PIPE            reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    QUEST           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SEMI            reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COMMA           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COLON           reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    R_PAREN         reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    R_SQUARE        reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    R_BRACE         reduce using rule 13 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 285

    (24) unary_expression -> SIZEOF L_PAREN type_name . R_PAREN

    R_PAREN         shift and go to state 335


state 286

    (58) inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .
    (56) exclusive_or_expression -> exclusive_or_expression . CARET and_expression

    PIPE            reduce using rule 58 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    AND_OP          reduce using rule 58 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    QUEST           reduce using rule 58 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    OR_OP           reduce using rule 58 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    SEMI            reduce using rule 58 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    COMMA           reduce using rule 58 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    COLON           reduce using rule 58 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    R_PAREN         reduce using rule 58 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    R_SQUARE        reduce using rule 58 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    R_BRACE         reduce using rule 58 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    CARET           shift and go to state 212


state 287

    (56) exclusive_or_expression -> exclusive_or_expression CARET and_expression .
    (54) and_expression -> and_expression . AMP equality_expression

    CARET           reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    PIPE            reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    AND_OP          reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    QUEST           reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    OR_OP           reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    SEMI            reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    COMMA           reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    COLON           reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    R_PAREN         reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    R_SQUARE        reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    R_BRACE         reduce using rule 56 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    AMP             shift and go to state 213


state 288

    (54) and_expression -> and_expression AMP equality_expression .
    (52) equality_exp_lhs -> equality_expression .

    AMP             reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    CARET           reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    PIPE            reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    AND_OP          reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    QUEST           reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    OR_OP           reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    SEMI            reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    COMMA           reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    COLON           reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    R_PAREN         reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    R_SQUARE        reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    R_BRACE         reduce using rule 54 (and_expression -> and_expression AMP equality_expression .)
    EQ_OP           reduce using rule 52 (equality_exp_lhs -> equality_expression .)
    NE_OP           reduce using rule 52 (equality_exp_lhs -> equality_expression .)


state 289

    (45) relational_expression -> relational_expression LESS shift_expression .
    (42) shift_expression -> shift_expression . LEFT_OP additive_expression
    (43) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER         reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    LE_OP           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    GE_OP           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    AMP             reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    CARET           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    PIPE            reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    AND_OP          reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    QUEST           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    OR_OP           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    SEMI            reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    EQ_OP           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    NE_OP           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    COLON           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    R_PAREN         reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    R_SQUARE        reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    R_BRACE         reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    LEFT_OP         shift and go to state 220
    RIGHT_OP        shift and go to state 221


state 290

    (46) relational_expression -> relational_expression GREATER shift_expression .
    (42) shift_expression -> shift_expression . LEFT_OP additive_expression
    (43) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER         reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    LE_OP           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    GE_OP           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    AMP             reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    CARET           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    PIPE            reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    AND_OP          reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    QUEST           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    OR_OP           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    SEMI            reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    EQ_OP           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    NE_OP           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    COLON           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    R_PAREN         reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    R_SQUARE        reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    R_BRACE         reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    LEFT_OP         shift and go to state 220
    RIGHT_OP        shift and go to state 221


state 291

    (47) relational_expression -> relational_expression LE_OP shift_expression .
    (42) shift_expression -> shift_expression . LEFT_OP additive_expression
    (43) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    GREATER         reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    AMP             reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    CARET           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    PIPE            reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    QUEST           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    SEMI            reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    COMMA           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    COLON           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    R_PAREN         reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    R_SQUARE        reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    R_BRACE         reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 220
    RIGHT_OP        shift and go to state 221


state 292

    (48) relational_expression -> relational_expression GE_OP shift_expression .
    (42) shift_expression -> shift_expression . LEFT_OP additive_expression
    (43) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    GREATER         reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    AMP             reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    CARET           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    PIPE            reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    QUEST           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    SEMI            reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    COMMA           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    COLON           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    R_PAREN         reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    R_SQUARE        reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    R_BRACE         reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 220
    RIGHT_OP        shift and go to state 221


state 293

    (50) equality_expression -> equality_exp_lhs EQ_OP relational_expression .
    (45) relational_expression -> relational_expression . LESS shift_expression
    (46) relational_expression -> relational_expression . GREATER shift_expression
    (47) relational_expression -> relational_expression . LE_OP shift_expression
    (48) relational_expression -> relational_expression . GE_OP shift_expression

    AMP             reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    CARET           reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    PIPE            reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    AND_OP          reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    QUEST           reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    OR_OP           reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    SEMI            reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    COMMA           reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    EQ_OP           reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    NE_OP           reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    COLON           reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    R_PAREN         reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    R_SQUARE        reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    R_BRACE         reduce using rule 50 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    LESS            shift and go to state 214
    GREATER         shift and go to state 215
    LE_OP           shift and go to state 216
    GE_OP           shift and go to state 217


state 294

    (51) equality_expression -> equality_exp_lhs NE_OP relational_expression .
    (45) relational_expression -> relational_expression . LESS shift_expression
    (46) relational_expression -> relational_expression . GREATER shift_expression
    (47) relational_expression -> relational_expression . LE_OP shift_expression
    (48) relational_expression -> relational_expression . GE_OP shift_expression

    AMP             reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    CARET           reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    PIPE            reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    AND_OP          reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    QUEST           reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    OR_OP           reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    SEMI            reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    COMMA           reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    EQ_OP           reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    NE_OP           reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    COLON           reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    R_PAREN         reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    R_SQUARE        reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    R_BRACE         reduce using rule 51 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    LESS            shift and go to state 214
    GREATER         shift and go to state 215
    LE_OP           shift and go to state 216
    GE_OP           shift and go to state 217


state 295

    (42) shift_expression -> shift_expression LEFT_OP additive_expression .
    (39) additive_expression -> additive_expression . PLUS multiplicative_expression
    (40) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LESS            reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GREATER         reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AMP             reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    CARET           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PIPE            reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    QUEST           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SEMI            reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COMMA           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COLON           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    R_PAREN         reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    R_SQUARE        reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    R_BRACE         reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PLUS            shift and go to state 222
    MINUS           shift and go to state 223


state 296

    (43) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (39) additive_expression -> additive_expression . PLUS multiplicative_expression
    (40) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LESS            reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GREATER         reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AMP             reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    CARET           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PIPE            reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    QUEST           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SEMI            reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COMMA           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COLON           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    R_PAREN         reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    R_SQUARE        reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    R_BRACE         reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PLUS            shift and go to state 222
    MINUS           shift and go to state 223


state 297

    (39) additive_expression -> additive_expression PLUS multiplicative_expression .
    (35) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (36) multiplicative_expression -> multiplicative_expression . SLASH cast_expression
    (37) multiplicative_expression -> multiplicative_expression . PERCENT cast_expression

    PLUS            reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_OP         reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE_OP           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE_OP           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AMP             reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CARET           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    PIPE            reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_OP          reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QUEST           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OP           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_OP           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE_OP           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    R_PAREN         reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    R_SQUARE        reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    R_BRACE         reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 225
    PERCENT         shift and go to state 226


state 298

    (40) additive_expression -> additive_expression MINUS multiplicative_expression .
    (35) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (36) multiplicative_expression -> multiplicative_expression . SLASH cast_expression
    (37) multiplicative_expression -> multiplicative_expression . PERCENT cast_expression

    PLUS            reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_OP         reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE_OP           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE_OP           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AMP             reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CARET           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    PIPE            reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_OP          reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QUEST           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OP           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_OP           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE_OP           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    R_PAREN         reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    R_SQUARE        reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    R_BRACE         reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STAR            shift and go to state 224
    SLASH           shift and go to state 225
    PERCENT         shift and go to state 226


state 299

    (35) multiplicative_expression -> multiplicative_expression STAR cast_expression .

    STAR            reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    SLASH           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    PERCENT         reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    PLUS            reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    MINUS           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LEFT_OP         reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    RIGHT_OP        reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LESS            reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    GREATER         reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    GE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    AMP             reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    CARET           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    PIPE            reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    AND_OP          reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    QUEST           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    OR_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    SEMI            reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    COMMA           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    EQ_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    NE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    COLON           reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    R_PAREN         reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    R_SQUARE        reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    R_BRACE         reduce using rule 35 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)


state 300

    (36) multiplicative_expression -> multiplicative_expression SLASH cast_expression .

    STAR            reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    SLASH           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    PERCENT         reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    PLUS            reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    MINUS           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    LEFT_OP         reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    RIGHT_OP        reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    LESS            reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    GREATER         reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    LE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    GE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    AMP             reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    CARET           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    PIPE            reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    AND_OP          reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    QUEST           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    OR_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    SEMI            reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    COMMA           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    EQ_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    NE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    COLON           reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    R_PAREN         reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    R_SQUARE        reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    R_BRACE         reduce using rule 36 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)


state 301

    (37) multiplicative_expression -> multiplicative_expression PERCENT cast_expression .

    STAR            reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    SLASH           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    PERCENT         reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    PLUS            reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    MINUS           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    LEFT_OP         reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    RIGHT_OP        reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    LESS            reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    GREATER         reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    LE_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    GE_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    AMP             reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    CARET           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    PIPE            reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    AND_OP          reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    QUEST           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    OR_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    SEMI            reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    COMMA           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    EQ_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    NE_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    COLON           reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    R_PAREN         reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    R_SQUARE        reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    R_BRACE         reduce using rule 37 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)


state 302

    (146) variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .

    EQUAL           reduce using rule 146 (variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .)
    SEMI            reduce using rule 146 (variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .)
    COMMA           reduce using rule 146 (variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .)
    R_PAREN         reduce using rule 146 (variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .)
    COLON           reduce using rule 146 (variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .)


state 303

    (182) initializer -> L_BRACE initializer_list . R_BRACE
    (183) initializer -> L_BRACE initializer_list . COMMA R_BRACE
    (185) initializer_list -> initializer_list . COMMA initializer

    R_BRACE         shift and go to state 336
    COMMA           shift and go to state 337


state 304

    (184) initializer_list -> initializer .

    R_BRACE         reduce using rule 184 (initializer_list -> initializer .)
    COMMA           reduce using rule 184 (initializer_list -> initializer .)


state 305

    (166) identifier_list -> identifier_list COMMA IDENTIFIER .

    R_PAREN         reduce using rule 166 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 166 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 306

    (159) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    R_PAREN         reduce using rule 159 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 307

    (161) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 161 (parameter_list -> parameter_list COMMA parameter_declaration .)
    R_PAREN         reduce using rule 161 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 308

    (171) abstract_declarator -> pointer direct_abstract_declarator .
    (177) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN R_PAREN
    (178) direct_abstract_declarator -> direct_abstract_declarator . L_SQUARE R_SQUARE
    (179) direct_abstract_declarator -> direct_abstract_declarator . L_SQUARE constant_expression R_SQUARE
    (180) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN parameter_type_list R_PAREN

    COMMA           reduce using rule 171 (abstract_declarator -> pointer direct_abstract_declarator .)
    R_PAREN         reduce using rule 171 (abstract_declarator -> pointer direct_abstract_declarator .)
    L_PAREN         shift and go to state 309
    L_SQUARE        shift and go to state 310


state 309

    (177) direct_abstract_declarator -> direct_abstract_declarator L_PAREN . R_PAREN
    (180) direct_abstract_declarator -> direct_abstract_declarator L_PAREN . parameter_type_list R_PAREN
    (158) parameter_type_list -> . parameter_list
    (159) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (160) parameter_list -> . parameter_declaration
    (161) parameter_list -> . parameter_list COMMA parameter_declaration
    (162) parameter_declaration -> . declaration_specifiers declarator
    (163) parameter_declaration -> . declaration_specifiers abstract_declarator
    (164) parameter_declaration -> . declaration_specifiers
    (84) declaration_specifiers -> . storage_class_specifier
    (85) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_specifier
    (87) declaration_specifiers -> . type_specifier declaration_specifiers
    (88) declaration_specifiers -> . type_qualifier
    (89) declaration_specifiers -> . type_qualifier declaration_specifiers
    (96) storage_class_specifier -> . TYPEDEF
    (97) storage_class_specifier -> . EXTERN
    (98) storage_class_specifier -> . STATIC
    (99) storage_class_specifier -> . AUTO
    (100) storage_class_specifier -> . REGISTER
    (110) type_specifier -> . type
    (111) type_specifier -> . struct_or_union_specifier
    (112) type_specifier -> . enum_specifier
    (137) type_qualifier -> . CONST
    (138) type_qualifier -> . VOLATILE
    (101) type -> . VOID
    (102) type -> . CHAR
    (103) type -> . SHORT
    (104) type -> . INT
    (105) type -> . LONG
    (106) type -> . FLOAT
    (107) type -> . DOUBLE
    (108) type -> . SIGNED
    (109) type -> . UNSIGNED
    (113) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (115) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (130) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (132) enum_specifier -> . ENUM IDENTIFIER
    (116) struct_or_union -> . STRUCT
    (117) struct_or_union -> . UNION

    R_PAREN         shift and go to state 338
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    CONST           shift and go to state 23
    VOLATILE        shift and go to state 24
    VOID            shift and go to state 25
    CHAR            shift and go to state 26
    SHORT           shift and go to state 27
    INT             shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 32
    UNSIGNED        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    parameter_type_list            shift and go to state 339
    parameter_list                 shift and go to state 144
    parameter_declaration          shift and go to state 145
    declaration_specifiers         shift and go to state 146
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    type                           shift and go to state 20
    struct_or_union_specifier      shift and go to state 21
    enum_specifier                 shift and go to state 22
    struct_or_union                shift and go to state 34

state 310

    (178) direct_abstract_declarator -> direct_abstract_declarator L_SQUARE . R_SQUARE
    (179) direct_abstract_declarator -> direct_abstract_declarator L_SQUARE . constant_expression R_SQUARE
    (81) constant_expression -> . conditional_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    R_SQUARE        shift and go to state 340
    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    constant_expression            shift and go to state 341
    conditional_expression         shift and go to state 164
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 106
    exclusive_or_expression        shift and go to state 111
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 311

    (172) direct_abstract_declarator -> L_SQUARE R_SQUARE .

    L_PAREN         reduce using rule 172 (direct_abstract_declarator -> L_SQUARE R_SQUARE .)
    L_SQUARE        reduce using rule 172 (direct_abstract_declarator -> L_SQUARE R_SQUARE .)
    COMMA           reduce using rule 172 (direct_abstract_declarator -> L_SQUARE R_SQUARE .)
    R_PAREN         reduce using rule 172 (direct_abstract_declarator -> L_SQUARE R_SQUARE .)


state 312

    (174) direct_abstract_declarator -> L_SQUARE constant_expression . R_SQUARE

    R_SQUARE        shift and go to state 342


state 313

    (173) direct_abstract_declarator -> L_PAREN R_PAREN .

    L_PAREN         reduce using rule 173 (direct_abstract_declarator -> L_PAREN R_PAREN .)
    L_SQUARE        reduce using rule 173 (direct_abstract_declarator -> L_PAREN R_PAREN .)
    COMMA           reduce using rule 173 (direct_abstract_declarator -> L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 173 (direct_abstract_declarator -> L_PAREN R_PAREN .)


state 314

    (175) direct_abstract_declarator -> L_PAREN abstract_declarator . R_PAREN

    R_PAREN         shift and go to state 343


state 315

    (176) direct_abstract_declarator -> L_PAREN parameter_type_list . R_PAREN

    R_PAREN         shift and go to state 344


state 316

    (169) abstract_declarator -> pointer .
    (171) abstract_declarator -> pointer . direct_abstract_declarator
    (139) declarator -> pointer . direct_declarator
    (172) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (173) direct_abstract_declarator -> . L_PAREN R_PAREN
    (174) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (175) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (176) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN

    R_PAREN         reduce using rule 169 (abstract_declarator -> pointer .)
    L_SQUARE        shift and go to state 244
    L_PAREN         shift and go to state 245
    IDENTIFIER      shift and go to state 49

    direct_abstract_declarator     shift and go to state 308
    direct_declarator              shift and go to state 136
    variable_declaration           shift and go to state 57
    function_declaration           shift and go to state 130
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59

state 317

    (113) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .

    TYPEDEF         reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    EXTERN          reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    STATIC          reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    AUTO            reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    REGISTER        reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    CONST           reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    VOLATILE        reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    VOID            reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    CHAR            reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    SHORT           reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    INT             reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    LONG            reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    FLOAT           reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    DOUBLE          reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    SIGNED          reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    UNSIGNED        reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    ENUM            reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    STRUCT          reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    UNION           reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    SEMI            reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    IDENTIFIER      reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    STAR            reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    L_PAREN         reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    L_SQUARE        reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    COMMA           reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    R_PAREN         reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    COLON           reduce using rule 113 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)


state 318

    (120) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .

    R_BRACE         reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CONST           reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOLATILE        reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOID            reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CHAR            reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SHORT           reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    INT             reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    LONG            reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    FLOAT           reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    DOUBLE          reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SIGNED          reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNSIGNED        reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    ENUM            reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STRUCT          reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNION           reduce using rule 120 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)


state 319

    (126) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (127) struct_declarator -> . declarator
    (128) struct_declarator -> . COLON constant_expression
    (129) struct_declarator -> . declarator COLON constant_expression
    (139) declarator -> . pointer direct_declarator
    (140) declarator -> . direct_declarator
    (152) pointer -> . STAR
    (153) pointer -> . STAR type_qualifier_list
    (154) pointer -> . STAR pointer
    (155) pointer -> . STAR type_qualifier_list pointer
    (141) direct_declarator -> . variable_declaration
    (142) direct_declarator -> . function_declaration
    (143) variable_declaration -> . variable_declaration1
    (144) variable_declaration -> . variable_declaration2
    (149) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (151) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (145) variable_declaration1 -> . IDENTIFIER
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (147) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (148) variable_declaration2 -> . L_PAREN declarator R_PAREN

    COLON           shift and go to state 252
    STAR            shift and go to state 56
    IDENTIFIER      shift and go to state 49
    L_PAREN         shift and go to state 50

    struct_declarator              shift and go to state 345
    declarator                     shift and go to state 251
    pointer                        shift and go to state 54
    direct_declarator              shift and go to state 55
    variable_declaration           shift and go to state 57
    function_declaration           shift and go to state 130
    variable_declaration1          shift and go to state 58
    variable_declaration2          shift and go to state 59

state 320

    (129) struct_declarator -> declarator COLON . constant_expression
    (81) constant_expression -> . conditional_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    constant_expression            shift and go to state 346
    conditional_expression         shift and go to state 164
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 106
    exclusive_or_expression        shift and go to state 111
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 321

    (128) struct_declarator -> COLON constant_expression .

    SEMI            reduce using rule 128 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 128 (struct_declarator -> COLON constant_expression .)


state 322

    (134) enumerator_list -> enumerator_list COMMA enumerator .

    R_BRACE         reduce using rule 134 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 134 (enumerator_list -> enumerator_list COMMA enumerator .)


state 323

    (136) enumerator -> IDENTIFIER EQUAL constant_expression .

    R_BRACE         reduce using rule 136 (enumerator -> IDENTIFIER EQUAL constant_expression .)
    COMMA           reduce using rule 136 (enumerator -> IDENTIFIER EQUAL constant_expression .)


state 324

    (131) enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .

    TYPEDEF         reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    EXTERN          reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    STATIC          reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    AUTO            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    REGISTER        reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    CONST           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    VOLATILE        reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    VOID            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    CHAR            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    SHORT           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    INT             reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    LONG            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    FLOAT           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    DOUBLE          reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    SIGNED          reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    UNSIGNED        reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    ENUM            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    STRUCT          reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    UNION           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    SEMI            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    IDENTIFIER      reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    STAR            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    L_PAREN         reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    L_SQUARE        reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    COMMA           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    R_PAREN         reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    COLON           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)


state 325

    (9) function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .

    L_SQUARE        reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    DOT             reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    PTR_OP          reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    INC_OP          reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    DEC_OP          reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    EQUAL           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    MUL_ASSIGN      reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    DIV_ASSIGN      reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    MOD_ASSIGN      reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    ADD_ASSIGN      reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    SUB_ASSIGN      reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    LEFT_ASSIGN     reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    RIGHT_ASSIGN    reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    AND_ASSIGN      reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    XOR_ASSIGN      reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    OR_ASSIGN       reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    STAR            reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    SLASH           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    PERCENT         reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    PLUS            reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    MINUS           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    LEFT_OP         reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    RIGHT_OP        reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    LESS            reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    GREATER         reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    LE_OP           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    GE_OP           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    AMP             reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    CARET           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    PIPE            reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    AND_OP          reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    QUEST           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    OR_OP           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    SEMI            reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    COMMA           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    EQ_OP           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    NE_OP           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    COLON           reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    R_PAREN         reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    R_SQUARE        reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    R_BRACE         reduce using rule 9 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)


state 326

    (18) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    assignment_expression          shift and go to state 347
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 327

    (193) labeled_statement -> CASE constant_expression COLON statement .

    R_BRACE         reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    L_BRACE         reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    INC_OP          reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC_OP          reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    AMP             reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    STAR            reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    TILDA           reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    EXCLAIM         reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    CONSTANT        reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    CHARACTER       reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    L_PAREN         reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)


state 328

    (206) selection_statement -> IF L_PAREN expression R_PAREN . statement
    (207) selection_statement -> IF L_PAREN expression R_PAREN . statement ELSE statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 84
    statement                      shift and go to state 348
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    compound_statement_begin       shift and go to state 41
    iteration_header               shift and go to state 88
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 329

    (33) cast_expression -> L_PAREN type_name R_PAREN cast_expression .

    STAR            reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    SLASH           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    PERCENT         reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    PLUS            reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    MINUS           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LEFT_OP         reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    RIGHT_OP        reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LESS            reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    GREATER         reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LE_OP           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    GE_OP           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    AMP             reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    CARET           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    PIPE            reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    AND_OP          reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    QUEST           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    OR_OP           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    SEMI            reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    COMMA           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    EQ_OP           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    NE_OP           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    COLON           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    R_PAREN         reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    EQUAL           reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    MUL_ASSIGN      reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    DIV_ASSIGN      reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    MOD_ASSIGN      reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    ADD_ASSIGN      reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    SUB_ASSIGN      reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LEFT_ASSIGN     reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    RIGHT_ASSIGN    reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    AND_ASSIGN      reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    XOR_ASSIGN      reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    OR_ASSIGN       reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    R_SQUARE        reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    R_BRACE         reduce using rule 33 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)


state 330

    (208) selection_statement -> SWITCH L_PAREN expression R_PAREN . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 84
    statement                      shift and go to state 349
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    compound_statement_begin       shift and go to state 41
    iteration_header               shift and go to state 88
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 331

    (210) iteration_header -> WHILE L_PAREN expression R_PAREN .

    IDENTIFIER      reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    CASE            reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    DEFAULT         reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    SEMI            reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    IF              reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    SWITCH          reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    GOTO            reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    CONTINUE        reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    BREAK           reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    RETURN          reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    L_BRACE         reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    WHILE           reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    FOR             reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    INC_OP          reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    DEC_OP          reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    SIZEOF          reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    AMP             reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    STAR            reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    PLUS            reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    MINUS           reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    TILDA           reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    EXCLAIM         reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    CONSTANT        reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    CHARACTER       reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    STRING_LITERAL  reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    L_PAREN         reduce using rule 210 (iteration_header -> WHILE L_PAREN expression R_PAREN .)


state 332

    (211) iteration_header -> FOR L_PAREN expression_statement expression_statement . R_PAREN
    (212) iteration_header -> FOR L_PAREN expression_statement expression_statement . expression R_PAREN
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_PAREN         shift and go to state 350
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 351
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 333

    (64) conditional_expression -> logical_or_expression QUEST expression COLON . conditional_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 166
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    logical_or_expression          shift and go to state 98
    conditional_expression         shift and go to state 352
    logical_and_expression         shift and go to state 100
    inclusive_or_expression        shift and go to state 106
    exclusive_or_expression        shift and go to state 111
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129
    cast_expression                shift and go to state 110
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113

state 334

    (11) postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .

    L_SQUARE        reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    DOT             reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    PTR_OP          reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    INC_OP          reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    DEC_OP          reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    EQUAL           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    MUL_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    DIV_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    MOD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    ADD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    SUB_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    LEFT_ASSIGN     reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    RIGHT_ASSIGN    reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    AND_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    XOR_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    OR_ASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    STAR            reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    SLASH           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    PERCENT         reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    PLUS            reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    MINUS           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    LEFT_OP         reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    RIGHT_OP        reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    LESS            reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    GREATER         reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    LE_OP           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    GE_OP           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    AMP             reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    CARET           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    PIPE            reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    AND_OP          reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    QUEST           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    OR_OP           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    SEMI            reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    COMMA           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    EQ_OP           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    NE_OP           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    COLON           reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    R_PAREN         reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    R_SQUARE        reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    R_BRACE         reduce using rule 11 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)


state 335

    (24) unary_expression -> SIZEOF L_PAREN type_name R_PAREN .

    EQUAL           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MUL_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    DIV_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MOD_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    ADD_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SUB_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LEFT_ASSIGN     reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    RIGHT_ASSIGN    reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    AND_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    XOR_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    OR_ASSIGN       reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    STAR            reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SLASH           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    PERCENT         reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    PLUS            reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MINUS           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LEFT_OP         reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    RIGHT_OP        reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LESS            reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    GREATER         reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LE_OP           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    GE_OP           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    AMP             reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    CARET           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    PIPE            reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    AND_OP          reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    QUEST           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    OR_OP           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SEMI            reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    COMMA           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    EQ_OP           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    NE_OP           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    COLON           reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_PAREN         reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_SQUARE        reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_BRACE         reduce using rule 24 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)


state 336

    (182) initializer -> L_BRACE initializer_list R_BRACE .

    SEMI            reduce using rule 182 (initializer -> L_BRACE initializer_list R_BRACE .)
    COMMA           reduce using rule 182 (initializer -> L_BRACE initializer_list R_BRACE .)
    R_BRACE         reduce using rule 182 (initializer -> L_BRACE initializer_list R_BRACE .)


state 337

    (183) initializer -> L_BRACE initializer_list COMMA . R_BRACE
    (185) initializer_list -> initializer_list COMMA . initializer
    (181) initializer -> . assignment_expression
    (182) initializer -> . L_BRACE initializer_list R_BRACE
    (183) initializer -> . L_BRACE initializer_list COMMA R_BRACE
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACE         shift and go to state 353
    L_BRACE         shift and go to state 233
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    IDENTIFIER      shift and go to state 167
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    initializer                    shift and go to state 354
    assignment_expression          shift and go to state 232
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 338

    (177) direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .

    L_PAREN         reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)
    L_SQUARE        reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)
    COMMA           reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)


state 339

    (180) direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list . R_PAREN

    R_PAREN         shift and go to state 355


state 340

    (178) direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE .

    L_PAREN         reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE .)
    L_SQUARE        reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE .)
    COMMA           reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE .)
    R_PAREN         reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE .)


state 341

    (179) direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression . R_SQUARE

    R_SQUARE        shift and go to state 356


state 342

    (174) direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE .

    L_PAREN         reduce using rule 174 (direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE .)
    L_SQUARE        reduce using rule 174 (direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE .)
    COMMA           reduce using rule 174 (direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE .)
    R_PAREN         reduce using rule 174 (direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE .)


state 343

    (175) direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .

    L_PAREN         reduce using rule 175 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)
    L_SQUARE        reduce using rule 175 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)
    COMMA           reduce using rule 175 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)
    R_PAREN         reduce using rule 175 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)


state 344

    (176) direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .

    L_PAREN         reduce using rule 176 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)
    L_SQUARE        reduce using rule 176 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)
    COMMA           reduce using rule 176 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)
    R_PAREN         reduce using rule 176 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)


state 345

    (126) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMI            reduce using rule 126 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 126 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 346

    (129) struct_declarator -> declarator COLON constant_expression .

    SEMI            reduce using rule 129 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 129 (struct_declarator -> declarator COLON constant_expression .)


state 347

    (18) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    R_PAREN         reduce using rule 18 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 18 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 348

    (206) selection_statement -> IF L_PAREN expression R_PAREN statement .
    (207) selection_statement -> IF L_PAREN expression R_PAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    R_BRACE         reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CASE            reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DEFAULT         reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SEMI            reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    IF              reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SWITCH          reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    GOTO            reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CONTINUE        reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    BREAK           reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    RETURN          reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    L_BRACE         reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    WHILE           reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    FOR             reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    INC_OP          reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DEC_OP          reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SIZEOF          reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    AMP             reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    STAR            reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    PLUS            reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    MINUS           reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    TILDA           reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    EXCLAIM         reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CONSTANT        reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CHARACTER       reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    STRING_LITERAL  reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    L_PAREN         reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    ELSE            shift and go to state 357

  ! ELSE            [ reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement .) ]


state 349

    (208) selection_statement -> SWITCH L_PAREN expression R_PAREN statement .

    R_BRACE         reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    CASE            reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    DEFAULT         reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    SEMI            reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    IF              reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    SWITCH          reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    GOTO            reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    CONTINUE        reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    BREAK           reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    RETURN          reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    L_BRACE         reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    WHILE           reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    FOR             reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    INC_OP          reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    DEC_OP          reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    SIZEOF          reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    AMP             reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    STAR            reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    PLUS            reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    MINUS           reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    TILDA           reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    EXCLAIM         reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    CONSTANT        reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    CHARACTER       reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    STRING_LITERAL  reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    L_PAREN         reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    ELSE            reduce using rule 208 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)


state 350

    (211) iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .

    IDENTIFIER      reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    CASE            reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    DEFAULT         reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    SEMI            reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    IF              reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    SWITCH          reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    GOTO            reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    CONTINUE        reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    BREAK           reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    RETURN          reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    L_BRACE         reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    WHILE           reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    FOR             reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    INC_OP          reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    DEC_OP          reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    SIZEOF          reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    AMP             reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    STAR            reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    PLUS            reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    MINUS           reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    TILDA           reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    EXCLAIM         reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    CONSTANT        reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    CHARACTER       reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    STRING_LITERAL  reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    L_PAREN         reduce using rule 211 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)


state 351

    (212) iteration_header -> FOR L_PAREN expression_statement expression_statement expression . R_PAREN
    (80) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 358
    COMMA           shift and go to state 170


state 352

    (64) conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .

    SEMI            reduce using rule 64 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)
    COMMA           reduce using rule 64 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)
    COLON           reduce using rule 64 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)
    R_PAREN         reduce using rule 64 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)
    R_SQUARE        reduce using rule 64 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)
    R_BRACE         reduce using rule 64 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)


state 353

    (183) initializer -> L_BRACE initializer_list COMMA R_BRACE .

    SEMI            reduce using rule 183 (initializer -> L_BRACE initializer_list COMMA R_BRACE .)
    COMMA           reduce using rule 183 (initializer -> L_BRACE initializer_list COMMA R_BRACE .)
    R_BRACE         reduce using rule 183 (initializer -> L_BRACE initializer_list COMMA R_BRACE .)


state 354

    (185) initializer_list -> initializer_list COMMA initializer .

    R_BRACE         reduce using rule 185 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 185 (initializer_list -> initializer_list COMMA initializer .)


state 355

    (180) direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .

    L_PAREN         reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)
    L_SQUARE        reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)
    COMMA           reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)
    R_PAREN         reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)


state 356

    (179) direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE .

    L_PAREN         reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE .)
    L_SQUARE        reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE .)
    COMMA           reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE .)
    R_PAREN         reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE .)


state 357

    (207) selection_statement -> IF L_PAREN expression R_PAREN statement ELSE . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . compound_statement_begin R_BRACE
    (196) compound_statement -> . compound_statement_begin statement_list R_BRACE
    (197) compound_statement -> . compound_statement_begin declaration_list R_BRACE
    (198) compound_statement -> . compound_statement_begin declaration_list statement_list R_BRACE
    (204) expression_statement -> . SEMI
    (205) expression_statement -> . expression SEMI
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (207) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (208) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . iteration_header iteration_body
    (214) jump_statement -> . GOTO IDENTIFIER SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . BREAK SEMI
    (217) jump_statement -> . RETURN SEMI
    (218) jump_statement -> . RETURN expression SEMI
    (199) compound_statement_begin -> . L_BRACE
    (79) expression -> . assignment_expression
    (80) expression -> . expression COMMA assignment_expression
    (210) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (211) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (212) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (63) conditional_expression -> . logical_or_expression
    (64) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (67) assignment_lhs -> . unary_expression
    (61) logical_or_expression -> . logical_and_expression
    (62) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_op_before_cast_exp
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (59) logical_and_expression -> . inclusive_or_expression
    (60) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (12) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (13) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (14) postfix_expression -> . postfix_expression INC_OP
    (15) postfix_expression -> . postfix_expression DEC_OP
    (16) postfix_expression -> . function_call
    (25) unary_op_before_cast_exp -> . unary_operator cast_expression
    (57) inclusive_or_expression -> . exclusive_or_expression
    (58) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (8) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (9) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (26) unary_operator -> . AMP
    (27) unary_operator -> . STAR
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . TILDA
    (31) unary_operator -> . EXCLAIM
    (55) exclusive_or_expression -> . and_expression
    (56) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (7) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . CHARACTER
    (5) const_or_parenthesis -> . STRING_LITERAL
    (6) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (53) and_expression -> . equality_expression
    (54) and_expression -> . and_expression AMP equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (51) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (52) equality_exp_lhs -> . equality_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (36) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (37) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    SEMI            shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    L_BRACE         shift and go to state 43
    WHILE           shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 103
    SIZEOF          shift and go to state 105
    AMP             shift and go to state 114
    STAR            shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    TILDA           shift and go to state 118
    EXCLAIM         shift and go to state 119
    CONSTANT        shift and go to state 121
    CHARACTER       shift and go to state 122
    STRING_LITERAL  shift and go to state 123
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 84
    statement                      shift and go to state 359
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    compound_statement_begin       shift and go to state 41
    iteration_header               shift and go to state 88
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 96
    assignment_lhs                 shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_expression               shift and go to state 99
    logical_and_expression         shift and go to state 100
    postfix_expression             shift and go to state 101
    unary_op_before_cast_exp       shift and go to state 104
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 107
    function_call                  shift and go to state 108
    unary_operator                 shift and go to state 109
    cast_expression                shift and go to state 110
    exclusive_or_expression        shift and go to state 111
    variable_use                   shift and go to state 112
    const_or_parenthesis           shift and go to state 113
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    equality_exp_lhs               shift and go to state 126
    shift_expression               shift and go to state 127
    additive_expression            shift and go to state 128
    multiplicative_expression      shift and go to state 129

state 358

    (212) iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .

    IDENTIFIER      reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    CASE            reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    DEFAULT         reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    SEMI            reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    IF              reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    SWITCH          reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    GOTO            reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    CONTINUE        reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    BREAK           reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    RETURN          reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    L_BRACE         reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    WHILE           reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    FOR             reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    INC_OP          reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    DEC_OP          reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    SIZEOF          reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    AMP             reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    STAR            reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    PLUS            reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    MINUS           reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    TILDA           reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    EXCLAIM         reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    CONSTANT        reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    CHARACTER       reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    STRING_LITERAL  reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    L_PAREN         reduce using rule 212 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)


state 359

    (207) selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .

    R_BRACE         reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CASE            reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DEFAULT         reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SEMI            reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    IF              reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SWITCH          reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    GOTO            reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CONTINUE        reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    BREAK           reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    RETURN          reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    L_BRACE         reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    WHILE           reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    FOR             reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    INC_OP          reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DEC_OP          reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SIZEOF          reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    AMP             reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    STAR            reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    PLUS            reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    MINUS           reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    TILDA           reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    EXCLAIM         reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CONSTANT        reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CHARACTER       reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    L_PAREN         reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    ELSE            reduce using rule 207 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 348 resolved as shift
