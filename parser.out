Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     primary_expression -> variable_use
Rule 2     primary_expression -> const_or_parenthesis
Rule 3     const_or_parenthesis -> CONSTANT
Rule 4     const_or_parenthesis -> STRING_LITERAL
Rule 5     const_or_parenthesis -> L_PAREN expression R_PAREN
Rule 6     variable_use -> IDENTIFIER
Rule 7     function_call -> IDENTIFIER L_PAREN R_PAREN
Rule 8     function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN
Rule 9     postfix_expression -> primary_expression
Rule 10    postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE
Rule 11    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 12    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 13    postfix_expression -> postfix_expression INC_OP
Rule 14    postfix_expression -> postfix_expression DEC_OP
Rule 15    postfix_expression -> function_call
Rule 16    argument_expression_list -> assignment_expression
Rule 17    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 18    unary_expression -> postfix_expression
Rule 19    unary_expression -> INC_OP unary_expression
Rule 20    unary_expression -> DEC_OP unary_expression
Rule 21    unary_expression -> unary_op_before_cast_exp
Rule 22    unary_expression -> SIZEOF unary_expression
Rule 23    unary_expression -> SIZEOF L_PAREN type_name R_PAREN
Rule 24    unary_op_before_cast_exp -> unary_operator cast_expression
Rule 25    unary_operator -> AMP
Rule 26    unary_operator -> STAR
Rule 27    unary_operator -> PLUS
Rule 28    unary_operator -> MINUS
Rule 29    unary_operator -> TILDA
Rule 30    unary_operator -> EXCLAIM
Rule 31    cast_expression -> unary_expression
Rule 32    cast_expression -> L_PAREN type_name R_PAREN cast_expression
Rule 33    multiplicative_expression -> cast_expression
Rule 34    multiplicative_expression -> multiplicative_expression STAR cast_expression
Rule 35    multiplicative_expression -> multiplicative_expression SLASH cast_expression
Rule 36    multiplicative_expression -> multiplicative_expression PERCENT cast_expression
Rule 37    additive_expression -> multiplicative_expression
Rule 38    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 39    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 40    shift_expression -> additive_expression
Rule 41    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 42    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 43    relational_expression -> shift_expression
Rule 44    relational_expression -> relational_expression LESS shift_expression
Rule 45    relational_expression -> relational_expression GREATER shift_expression
Rule 46    relational_expression -> relational_expression LE_OP shift_expression
Rule 47    relational_expression -> relational_expression GE_OP shift_expression
Rule 48    equality_expression -> relational_expression
Rule 49    equality_expression -> equality_exp_lhs EQ_OP relational_expression
Rule 50    equality_expression -> equality_exp_lhs NE_OP relational_expression
Rule 51    equality_exp_lhs -> equality_expression
Rule 52    and_expression -> equality_expression
Rule 53    and_expression -> and_expression AMP equality_expression
Rule 54    exclusive_or_expression -> and_expression
Rule 55    exclusive_or_expression -> exclusive_or_expression CARET and_expression
Rule 56    inclusive_or_expression -> exclusive_or_expression
Rule 57    inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression
Rule 58    logical_and_expression -> inclusive_or_expression
Rule 59    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 60    logical_or_expression -> logical_and_expression
Rule 61    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 62    conditional_expression -> logical_or_expression
Rule 63    conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression
Rule 64    assignment_expression -> conditional_expression
Rule 65    assignment_expression -> assignment_lhs assignment_operator assignment_expression
Rule 66    assignment_lhs -> unary_expression
Rule 67    assignment_operator -> EQUAL
Rule 68    assignment_operator -> MUL_ASSIGN
Rule 69    assignment_operator -> DIV_ASSIGN
Rule 70    assignment_operator -> MOD_ASSIGN
Rule 71    assignment_operator -> ADD_ASSIGN
Rule 72    assignment_operator -> SUB_ASSIGN
Rule 73    assignment_operator -> LEFT_ASSIGN
Rule 74    assignment_operator -> RIGHT_ASSIGN
Rule 75    assignment_operator -> AND_ASSIGN
Rule 76    assignment_operator -> XOR_ASSIGN
Rule 77    assignment_operator -> OR_ASSIGN
Rule 78    expression -> assignment_expression
Rule 79    expression -> expression COMMA assignment_expression
Rule 80    constant_expression -> conditional_expression
Rule 81    declaration -> declaration_specifiers SEMI
Rule 82    declaration -> declaration_specifiers init_declarator_list SEMI
Rule 83    declaration_specifiers -> storage_class_specifier
Rule 84    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 85    declaration_specifiers -> type_specifier
Rule 86    declaration_specifiers -> type_specifier declaration_specifiers
Rule 87    declaration_specifiers -> type_qualifier
Rule 88    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 89    init_declarator_list -> init_declarator
Rule 90    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 91    init_declarator -> uninitialized_declaration
Rule 92    init_declarator -> initialized_declaration
Rule 93    initialized_declaration -> declarator EQUAL initializer
Rule 94    uninitialized_declaration -> declarator
Rule 95    storage_class_specifier -> TYPEDEF
Rule 96    storage_class_specifier -> EXTERN
Rule 97    storage_class_specifier -> STATIC
Rule 98    storage_class_specifier -> AUTO
Rule 99    storage_class_specifier -> REGISTER
Rule 100   type_specifier -> VOID
Rule 101   type_specifier -> CHAR
Rule 102   type_specifier -> SHORT
Rule 103   type_specifier -> INT
Rule 104   type_specifier -> LONG
Rule 105   type_specifier -> FLOAT
Rule 106   type_specifier -> DOUBLE
Rule 107   type_specifier -> SIGNED
Rule 108   type_specifier -> UNSIGNED
Rule 109   type_specifier -> TYPE_NAME
Rule 110   type_specifier -> struct_or_union_specifier
Rule 111   type_specifier -> enum_specifier
Rule 112   struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
Rule 113   struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE
Rule 114   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 115   struct_or_union -> STRUCT
Rule 116   struct_or_union -> UNION
Rule 117   struct_declaration_list -> struct_declaration
Rule 118   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 119   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI
Rule 120   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 121   specifier_qualifier_list -> type_specifier
Rule 122   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 123   specifier_qualifier_list -> type_qualifier
Rule 124   struct_declarator_list -> struct_declarator
Rule 125   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 126   struct_declarator -> declarator
Rule 127   struct_declarator -> COLON constant_expression
Rule 128   struct_declarator -> declarator COLON constant_expression
Rule 129   enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE
Rule 130   enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
Rule 131   enum_specifier -> ENUM IDENTIFIER
Rule 132   enumerator_list -> enumerator
Rule 133   enumerator_list -> enumerator_list COMMA enumerator
Rule 134   enumerator -> IDENTIFIER
Rule 135   enumerator -> IDENTIFIER EQUAL constant_expression
Rule 136   type_qualifier -> CONST
Rule 137   type_qualifier -> VOLATILE
Rule 138   declarator -> pointer direct_declarator
Rule 139   declarator -> direct_declarator
Rule 140   direct_declarator -> variable_declaration
Rule 141   direct_declarator -> function_declaration
Rule 142   variable_declaration -> variable_declaration1
Rule 143   variable_declaration -> variable_declaration2
Rule 144   variable_declaration1 -> IDENTIFIER
Rule 145   variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE
Rule 146   variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE
Rule 147   variable_declaration2 -> L_PAREN declarator R_PAREN
Rule 148   function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN
Rule 149   function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN
Rule 150   function_declaration -> IDENTIFIER L_PAREN R_PAREN
Rule 151   pointer -> STAR
Rule 152   pointer -> STAR type_qualifier_list
Rule 153   pointer -> STAR pointer
Rule 154   pointer -> STAR type_qualifier_list pointer
Rule 155   type_qualifier_list -> type_qualifier
Rule 156   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 157   parameter_type_list -> parameter_list
Rule 158   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 159   parameter_list -> parameter_declaration
Rule 160   parameter_list -> parameter_list COMMA parameter_declaration
Rule 161   parameter_declaration -> declaration_specifiers declarator
Rule 162   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 163   parameter_declaration -> declaration_specifiers
Rule 164   identifier_list -> IDENTIFIER
Rule 165   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 166   type_name -> specifier_qualifier_list
Rule 167   type_name -> specifier_qualifier_list abstract_declarator
Rule 168   abstract_declarator -> pointer
Rule 169   abstract_declarator -> direct_abstract_declarator
Rule 170   abstract_declarator -> pointer direct_abstract_declarator
Rule 171   direct_abstract_declarator -> L_SQUARE R_SQUARE
Rule 172   direct_abstract_declarator -> L_PAREN R_PAREN
Rule 173   direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE
Rule 174   direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN
Rule 175   direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN
Rule 176   direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN
Rule 177   direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE
Rule 178   direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
Rule 179   direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
Rule 180   initializer -> assignment_expression
Rule 181   initializer -> L_BRACE initializer_list R_BRACE
Rule 182   initializer -> L_BRACE initializer_list COMMA R_BRACE
Rule 183   initializer_list -> initializer
Rule 184   initializer_list -> initializer_list COMMA initializer
Rule 185   statement -> labeled_statement
Rule 186   statement -> compound_statement
Rule 187   statement -> expression_statement
Rule 188   statement -> selection_statement
Rule 189   statement -> iteration_statement
Rule 190   statement -> jump_statement
Rule 191   labeled_statement -> IDENTIFIER COLON statement
Rule 192   labeled_statement -> CASE constant_expression COLON statement
Rule 193   labeled_statement -> DEFAULT COLON statement
Rule 194   compound_statement -> L_BRACE R_BRACE
Rule 195   compound_statement -> L_BRACE statement_list R_BRACE
Rule 196   compound_statement -> L_BRACE declaration_list R_BRACE
Rule 197   compound_statement -> L_BRACE declaration_list statement_list R_BRACE
Rule 198   declaration_list -> declaration
Rule 199   declaration_list -> declaration_list declaration
Rule 200   statement_list -> statement
Rule 201   statement_list -> statement_list statement
Rule 202   expression_statement -> SEMI
Rule 203   expression_statement -> expression SEMI
Rule 204   selection_statement -> IF L_PAREN expression R_PAREN statement
Rule 205   selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement
Rule 206   selection_statement -> SWITCH L_PAREN expression R_PAREN statement
Rule 207   iteration_statement -> iteration_header iteration_body
Rule 208   iteration_header -> WHILE L_PAREN expression R_PAREN
Rule 209   iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN
Rule 210   iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN
Rule 211   iteration_body -> statement
Rule 212   jump_statement -> GOTO IDENTIFIER SEMI
Rule 213   jump_statement -> CONTINUE SEMI
Rule 214   jump_statement -> BREAK SEMI
Rule 215   jump_statement -> RETURN SEMI
Rule 216   jump_statement -> RETURN expression SEMI
Rule 217   translation_unit -> external_declaration
Rule 218   translation_unit -> translation_unit external_declaration
Rule 219   external_declaration -> function_definition
Rule 220   external_declaration -> other_declarations
Rule 221   other_declarations -> declaration
Rule 222   function_header -> fheader_type1
Rule 223   function_header -> fheader_type2
Rule 224   fheader_type1 -> declaration_specifiers function_declaration
Rule 225   fheader_type2 -> function_declaration
Rule 226   function_definition -> function_header compound_statement
Rule 227   function_definition -> function_header declaration_list compound_statement

Terminals, with rules where they appear

ADD_ASSIGN           : 71
AMP                  : 25 53
AND_ASSIGN           : 75
AND_OP               : 59
AUTO                 : 98
BREAK                : 214
CARET                : 55
CASE                 : 192
CHAR                 : 101
COLON                : 63 127 128 191 192 193
COMMA                : 17 79 90 125 133 158 160 165 182 184
CONST                : 136
CONSTANT             : 3
CONTINUE             : 213
DEC_OP               : 14 20
DEFAULT              : 193
DIV_ASSIGN           : 69
DOT                  : 11
DOUBLE               : 106
ELLIPSIS             : 158
ELSE                 : 205
ENUM                 : 129 130 131
EQUAL                : 67 93 135
EQ_OP                : 49
EXCLAIM              : 30
EXTERN               : 96
FLOAT                : 105
FOR                  : 209 210
GE_OP                : 47
GOTO                 : 212
GREATER              : 45
IDENTIFIER           : 6 7 8 11 12 112 114 130 131 134 135 144 145 146 148 149 150 164 165 191 212
IF                   : 204 205
INC_OP               : 13 19
INT                  : 103
LEFT_ASSIGN          : 73
LEFT_OP              : 41
LESS                 : 44
LE_OP                : 46
LONG                 : 104
L_BRACE              : 112 113 129 130 181 182 194 195 196 197
L_PAREN              : 5 7 8 23 32 147 148 149 150 172 174 175 176 179 204 205 206 208 209 210
L_SQUARE             : 10 145 146 171 173 177 178
MINUS                : 28 39
MOD_ASSIGN           : 70
MUL_ASSIGN           : 68
NE_OP                : 50
OR_ASSIGN            : 77
OR_OP                : 61
PERCENT              : 36
PIPE                 : 57
PLUS                 : 27 38
PTR_OP               : 12
QUEST                : 63
REGISTER             : 99
RETURN               : 215 216
RIGHT_ASSIGN         : 74
RIGHT_OP             : 42
R_BRACE              : 112 113 129 130 181 182 194 195 196 197
R_PAREN              : 5 7 8 23 32 147 148 149 150 172 174 175 176 179 204 205 206 208 209 210
R_SQUARE             : 10 145 146 171 173 177 178
SEMI                 : 81 82 119 202 203 212 213 214 215 216
SHORT                : 102
SIGNED               : 107
SIZEOF               : 22 23
SLASH                : 35
STAR                 : 26 34 151 152 153 154
STATIC               : 97
STRING_LITERAL       : 4
STRUCT               : 115
SUB_ASSIGN           : 72
SWITCH               : 206
TILDA                : 29
TYPEDEF              : 95
TYPE_NAME            : 109
UNION                : 116
UNSIGNED             : 108
VOID                 : 100
VOLATILE             : 137
WHILE                : 208
XOR_ASSIGN           : 76
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 162 167 174
additive_expression  : 38 39 40 41 42
and_expression       : 53 54 55
argument_expression_list : 8 17
assignment_expression : 16 17 65 78 79 180
assignment_lhs       : 65
assignment_operator  : 65
cast_expression      : 24 32 33 34 35 36
compound_statement   : 186 226 227
conditional_expression : 63 64 80
const_or_parenthesis : 2
constant_expression  : 127 128 135 145 173 178 192
declaration          : 198 199 221
declaration_list     : 196 197 199 227
declaration_specifiers : 81 82 84 86 88 161 162 163 224
declarator           : 93 94 126 128 147 161
direct_abstract_declarator : 169 170 176 177 178 179
direct_declarator    : 138 139
enum_specifier       : 111
enumerator           : 132 133
enumerator_list      : 129 130 133
equality_exp_lhs     : 49 50
equality_expression  : 51 52 53
exclusive_or_expression : 55 56 57
expression           : 5 10 63 79 203 204 205 206 208 210 216
expression_statement : 187 209 209 210 210
external_declaration : 217 218
fheader_type1        : 222
fheader_type2        : 223
function_call        : 15
function_declaration : 141 224 225
function_definition  : 219
function_header      : 226 227
identifier_list      : 149 165
inclusive_or_expression : 57 58 59
init_declarator      : 89 90
init_declarator_list : 82 90
initialized_declaration : 92
initializer          : 93 183 184
initializer_list     : 181 182 184
iteration_body       : 207
iteration_header     : 207
iteration_statement  : 189
jump_statement       : 190
labeled_statement    : 185
logical_and_expression : 59 60 61
logical_or_expression : 61 62 63
multiplicative_expression : 34 35 36 37 38 39
other_declarations   : 220
parameter_declaration : 159 160
parameter_list       : 157 158 160
parameter_type_list  : 148 175 179
pointer              : 138 153 154 168 170
postfix_expression   : 10 11 12 13 14 18
primary_expression   : 9
relational_expression : 44 45 46 47 48 49 50
selection_statement  : 188
shift_expression     : 41 42 43 44 45 46 47
specifier_qualifier_list : 119 120 122 166 167
statement            : 191 192 193 200 201 204 205 205 206 211
statement_list       : 195 197 201
storage_class_specifier : 83 84
struct_declaration   : 117 118
struct_declaration_list : 112 113 118
struct_declarator    : 124 125
struct_declarator_list : 119 125
struct_or_union      : 112 113 114
struct_or_union_specifier : 110
translation_unit     : 218 0
type_name            : 23 32
type_qualifier       : 87 88 122 123 155 156
type_qualifier_list  : 152 154 156
type_specifier       : 85 86 120 121
unary_expression     : 19 20 22 31 66
unary_op_before_cast_exp : 21
unary_operator       : 24
uninitialized_declaration : 91
variable_declaration : 140
variable_declaration1 : 142
variable_declaration2 : 143
variable_use         : 1

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (217) translation_unit -> . external_declaration
    (218) translation_unit -> . translation_unit external_declaration
    (219) external_declaration -> . function_definition
    (220) external_declaration -> . other_declarations
    (226) function_definition -> . function_header compound_statement
    (227) function_definition -> . function_header declaration_list compound_statement
    (221) other_declarations -> . declaration
    (222) function_header -> . fheader_type1
    (223) function_header -> . fheader_type2
    (81) declaration -> . declaration_specifiers SEMI
    (82) declaration -> . declaration_specifiers init_declarator_list SEMI
    (224) fheader_type1 -> . declaration_specifiers function_declaration
    (225) fheader_type2 -> . function_declaration
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    IDENTIFIER      shift and go to state 14
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    other_declarations             shift and go to state 4
    function_header                shift and go to state 5
    declaration                    shift and go to state 6
    fheader_type1                  shift and go to state 7
    fheader_type2                  shift and go to state 8
    declaration_specifiers         shift and go to state 9
    function_declaration           shift and go to state 10
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 1

    (0) S' -> translation_unit .
    (218) translation_unit -> translation_unit . external_declaration
    (219) external_declaration -> . function_definition
    (220) external_declaration -> . other_declarations
    (226) function_definition -> . function_header compound_statement
    (227) function_definition -> . function_header declaration_list compound_statement
    (221) other_declarations -> . declaration
    (222) function_header -> . fheader_type1
    (223) function_header -> . fheader_type2
    (81) declaration -> . declaration_specifiers SEMI
    (82) declaration -> . declaration_specifiers init_declarator_list SEMI
    (224) fheader_type1 -> . declaration_specifiers function_declaration
    (225) fheader_type2 -> . function_declaration
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    IDENTIFIER      shift and go to state 14
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    external_declaration           shift and go to state 38
    function_definition            shift and go to state 3
    other_declarations             shift and go to state 4
    function_header                shift and go to state 5
    declaration                    shift and go to state 6
    fheader_type1                  shift and go to state 7
    fheader_type2                  shift and go to state 8
    declaration_specifiers         shift and go to state 9
    function_declaration           shift and go to state 10
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 2

    (217) translation_unit -> external_declaration .

    IDENTIFIER      reduce using rule 217 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 217 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 217 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 217 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 217 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 217 (translation_unit -> external_declaration .)
    VOID            reduce using rule 217 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 217 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 217 (translation_unit -> external_declaration .)
    INT             reduce using rule 217 (translation_unit -> external_declaration .)
    LONG            reduce using rule 217 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 217 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 217 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 217 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 217 (translation_unit -> external_declaration .)
    TYPE_NAME       reduce using rule 217 (translation_unit -> external_declaration .)
    CONST           reduce using rule 217 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 217 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 217 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 217 (translation_unit -> external_declaration .)
    UNION           reduce using rule 217 (translation_unit -> external_declaration .)
    $end            reduce using rule 217 (translation_unit -> external_declaration .)


state 3

    (219) external_declaration -> function_definition .

    IDENTIFIER      reduce using rule 219 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 219 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 219 (external_declaration -> function_definition .)
    STATIC          reduce using rule 219 (external_declaration -> function_definition .)
    AUTO            reduce using rule 219 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 219 (external_declaration -> function_definition .)
    VOID            reduce using rule 219 (external_declaration -> function_definition .)
    CHAR            reduce using rule 219 (external_declaration -> function_definition .)
    SHORT           reduce using rule 219 (external_declaration -> function_definition .)
    INT             reduce using rule 219 (external_declaration -> function_definition .)
    LONG            reduce using rule 219 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 219 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 219 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 219 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 219 (external_declaration -> function_definition .)
    TYPE_NAME       reduce using rule 219 (external_declaration -> function_definition .)
    CONST           reduce using rule 219 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 219 (external_declaration -> function_definition .)
    ENUM            reduce using rule 219 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 219 (external_declaration -> function_definition .)
    UNION           reduce using rule 219 (external_declaration -> function_definition .)
    $end            reduce using rule 219 (external_declaration -> function_definition .)


state 4

    (220) external_declaration -> other_declarations .

    IDENTIFIER      reduce using rule 220 (external_declaration -> other_declarations .)
    TYPEDEF         reduce using rule 220 (external_declaration -> other_declarations .)
    EXTERN          reduce using rule 220 (external_declaration -> other_declarations .)
    STATIC          reduce using rule 220 (external_declaration -> other_declarations .)
    AUTO            reduce using rule 220 (external_declaration -> other_declarations .)
    REGISTER        reduce using rule 220 (external_declaration -> other_declarations .)
    VOID            reduce using rule 220 (external_declaration -> other_declarations .)
    CHAR            reduce using rule 220 (external_declaration -> other_declarations .)
    SHORT           reduce using rule 220 (external_declaration -> other_declarations .)
    INT             reduce using rule 220 (external_declaration -> other_declarations .)
    LONG            reduce using rule 220 (external_declaration -> other_declarations .)
    FLOAT           reduce using rule 220 (external_declaration -> other_declarations .)
    DOUBLE          reduce using rule 220 (external_declaration -> other_declarations .)
    SIGNED          reduce using rule 220 (external_declaration -> other_declarations .)
    UNSIGNED        reduce using rule 220 (external_declaration -> other_declarations .)
    TYPE_NAME       reduce using rule 220 (external_declaration -> other_declarations .)
    CONST           reduce using rule 220 (external_declaration -> other_declarations .)
    VOLATILE        reduce using rule 220 (external_declaration -> other_declarations .)
    ENUM            reduce using rule 220 (external_declaration -> other_declarations .)
    STRUCT          reduce using rule 220 (external_declaration -> other_declarations .)
    UNION           reduce using rule 220 (external_declaration -> other_declarations .)
    $end            reduce using rule 220 (external_declaration -> other_declarations .)


state 5

    (226) function_definition -> function_header . compound_statement
    (227) function_definition -> function_header . declaration_list compound_statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (198) declaration_list -> . declaration
    (199) declaration_list -> . declaration_list declaration
    (81) declaration -> . declaration_specifiers SEMI
    (82) declaration -> . declaration_specifiers init_declarator_list SEMI
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    L_BRACE         shift and go to state 41
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    compound_statement             shift and go to state 39
    declaration_list               shift and go to state 40
    declaration                    shift and go to state 42
    declaration_specifiers         shift and go to state 43
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 6

    (221) other_declarations -> declaration .

    IDENTIFIER      reduce using rule 221 (other_declarations -> declaration .)
    TYPEDEF         reduce using rule 221 (other_declarations -> declaration .)
    EXTERN          reduce using rule 221 (other_declarations -> declaration .)
    STATIC          reduce using rule 221 (other_declarations -> declaration .)
    AUTO            reduce using rule 221 (other_declarations -> declaration .)
    REGISTER        reduce using rule 221 (other_declarations -> declaration .)
    VOID            reduce using rule 221 (other_declarations -> declaration .)
    CHAR            reduce using rule 221 (other_declarations -> declaration .)
    SHORT           reduce using rule 221 (other_declarations -> declaration .)
    INT             reduce using rule 221 (other_declarations -> declaration .)
    LONG            reduce using rule 221 (other_declarations -> declaration .)
    FLOAT           reduce using rule 221 (other_declarations -> declaration .)
    DOUBLE          reduce using rule 221 (other_declarations -> declaration .)
    SIGNED          reduce using rule 221 (other_declarations -> declaration .)
    UNSIGNED        reduce using rule 221 (other_declarations -> declaration .)
    TYPE_NAME       reduce using rule 221 (other_declarations -> declaration .)
    CONST           reduce using rule 221 (other_declarations -> declaration .)
    VOLATILE        reduce using rule 221 (other_declarations -> declaration .)
    ENUM            reduce using rule 221 (other_declarations -> declaration .)
    STRUCT          reduce using rule 221 (other_declarations -> declaration .)
    UNION           reduce using rule 221 (other_declarations -> declaration .)
    $end            reduce using rule 221 (other_declarations -> declaration .)


state 7

    (222) function_header -> fheader_type1 .

    L_BRACE         reduce using rule 222 (function_header -> fheader_type1 .)
    TYPEDEF         reduce using rule 222 (function_header -> fheader_type1 .)
    EXTERN          reduce using rule 222 (function_header -> fheader_type1 .)
    STATIC          reduce using rule 222 (function_header -> fheader_type1 .)
    AUTO            reduce using rule 222 (function_header -> fheader_type1 .)
    REGISTER        reduce using rule 222 (function_header -> fheader_type1 .)
    VOID            reduce using rule 222 (function_header -> fheader_type1 .)
    CHAR            reduce using rule 222 (function_header -> fheader_type1 .)
    SHORT           reduce using rule 222 (function_header -> fheader_type1 .)
    INT             reduce using rule 222 (function_header -> fheader_type1 .)
    LONG            reduce using rule 222 (function_header -> fheader_type1 .)
    FLOAT           reduce using rule 222 (function_header -> fheader_type1 .)
    DOUBLE          reduce using rule 222 (function_header -> fheader_type1 .)
    SIGNED          reduce using rule 222 (function_header -> fheader_type1 .)
    UNSIGNED        reduce using rule 222 (function_header -> fheader_type1 .)
    TYPE_NAME       reduce using rule 222 (function_header -> fheader_type1 .)
    CONST           reduce using rule 222 (function_header -> fheader_type1 .)
    VOLATILE        reduce using rule 222 (function_header -> fheader_type1 .)
    ENUM            reduce using rule 222 (function_header -> fheader_type1 .)
    STRUCT          reduce using rule 222 (function_header -> fheader_type1 .)
    UNION           reduce using rule 222 (function_header -> fheader_type1 .)


state 8

    (223) function_header -> fheader_type2 .

    L_BRACE         reduce using rule 223 (function_header -> fheader_type2 .)
    TYPEDEF         reduce using rule 223 (function_header -> fheader_type2 .)
    EXTERN          reduce using rule 223 (function_header -> fheader_type2 .)
    STATIC          reduce using rule 223 (function_header -> fheader_type2 .)
    AUTO            reduce using rule 223 (function_header -> fheader_type2 .)
    REGISTER        reduce using rule 223 (function_header -> fheader_type2 .)
    VOID            reduce using rule 223 (function_header -> fheader_type2 .)
    CHAR            reduce using rule 223 (function_header -> fheader_type2 .)
    SHORT           reduce using rule 223 (function_header -> fheader_type2 .)
    INT             reduce using rule 223 (function_header -> fheader_type2 .)
    LONG            reduce using rule 223 (function_header -> fheader_type2 .)
    FLOAT           reduce using rule 223 (function_header -> fheader_type2 .)
    DOUBLE          reduce using rule 223 (function_header -> fheader_type2 .)
    SIGNED          reduce using rule 223 (function_header -> fheader_type2 .)
    UNSIGNED        reduce using rule 223 (function_header -> fheader_type2 .)
    TYPE_NAME       reduce using rule 223 (function_header -> fheader_type2 .)
    CONST           reduce using rule 223 (function_header -> fheader_type2 .)
    VOLATILE        reduce using rule 223 (function_header -> fheader_type2 .)
    ENUM            reduce using rule 223 (function_header -> fheader_type2 .)
    STRUCT          reduce using rule 223 (function_header -> fheader_type2 .)
    UNION           reduce using rule 223 (function_header -> fheader_type2 .)


state 9

    (81) declaration -> declaration_specifiers . SEMI
    (82) declaration -> declaration_specifiers . init_declarator_list SEMI
    (224) fheader_type1 -> declaration_specifiers . function_declaration
    (89) init_declarator_list -> . init_declarator
    (90) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (91) init_declarator -> . uninitialized_declaration
    (92) init_declarator -> . initialized_declaration
    (94) uninitialized_declaration -> . declarator
    (93) initialized_declaration -> . declarator EQUAL initializer
    (138) declarator -> . pointer direct_declarator
    (139) declarator -> . direct_declarator
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN

    SEMI            shift and go to state 44
    IDENTIFIER      shift and go to state 48
    STAR            shift and go to state 55
    L_PAREN         shift and go to state 49

    init_declarator_list           shift and go to state 45
    function_declaration           shift and go to state 46
    init_declarator                shift and go to state 47
    uninitialized_declaration      shift and go to state 50
    initialized_declaration        shift and go to state 51
    declarator                     shift and go to state 52
    pointer                        shift and go to state 53
    direct_declarator              shift and go to state 54
    variable_declaration           shift and go to state 56
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58

state 10

    (225) fheader_type2 -> function_declaration .

    L_BRACE         reduce using rule 225 (fheader_type2 -> function_declaration .)
    TYPEDEF         reduce using rule 225 (fheader_type2 -> function_declaration .)
    EXTERN          reduce using rule 225 (fheader_type2 -> function_declaration .)
    STATIC          reduce using rule 225 (fheader_type2 -> function_declaration .)
    AUTO            reduce using rule 225 (fheader_type2 -> function_declaration .)
    REGISTER        reduce using rule 225 (fheader_type2 -> function_declaration .)
    VOID            reduce using rule 225 (fheader_type2 -> function_declaration .)
    CHAR            reduce using rule 225 (fheader_type2 -> function_declaration .)
    SHORT           reduce using rule 225 (fheader_type2 -> function_declaration .)
    INT             reduce using rule 225 (fheader_type2 -> function_declaration .)
    LONG            reduce using rule 225 (fheader_type2 -> function_declaration .)
    FLOAT           reduce using rule 225 (fheader_type2 -> function_declaration .)
    DOUBLE          reduce using rule 225 (fheader_type2 -> function_declaration .)
    SIGNED          reduce using rule 225 (fheader_type2 -> function_declaration .)
    UNSIGNED        reduce using rule 225 (fheader_type2 -> function_declaration .)
    TYPE_NAME       reduce using rule 225 (fheader_type2 -> function_declaration .)
    CONST           reduce using rule 225 (fheader_type2 -> function_declaration .)
    VOLATILE        reduce using rule 225 (fheader_type2 -> function_declaration .)
    ENUM            reduce using rule 225 (fheader_type2 -> function_declaration .)
    STRUCT          reduce using rule 225 (fheader_type2 -> function_declaration .)
    UNION           reduce using rule 225 (fheader_type2 -> function_declaration .)


state 11

    (83) declaration_specifiers -> storage_class_specifier .
    (84) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    SEMI            reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    STAR            reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    L_PAREN         reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    L_SQUARE        reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    R_PAREN         reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    storage_class_specifier        shift and go to state 11
    declaration_specifiers         shift and go to state 59
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 12

    (85) declaration_specifiers -> type_specifier .
    (86) declaration_specifiers -> type_specifier . declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    SEMI            reduce using rule 85 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 85 (declaration_specifiers -> type_specifier .)
    STAR            reduce using rule 85 (declaration_specifiers -> type_specifier .)
    L_PAREN         reduce using rule 85 (declaration_specifiers -> type_specifier .)
    L_SQUARE        reduce using rule 85 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 85 (declaration_specifiers -> type_specifier .)
    R_PAREN         reduce using rule 85 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_specifier                 shift and go to state 12
    declaration_specifiers         shift and go to state 60
    storage_class_specifier        shift and go to state 11
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 13

    (87) declaration_specifiers -> type_qualifier .
    (88) declaration_specifiers -> type_qualifier . declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    SEMI            reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    STAR            reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    L_PAREN         reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    L_SQUARE        reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    R_PAREN         reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_qualifier                 shift and go to state 13
    declaration_specifiers         shift and go to state 61
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 14

    (148) function_declaration -> IDENTIFIER . L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> IDENTIFIER . L_PAREN identifier_list R_PAREN
    (150) function_declaration -> IDENTIFIER . L_PAREN R_PAREN

    L_PAREN         shift and go to state 62


state 15

    (95) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    TYPE_NAME       reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    STAR            reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    L_PAREN         reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    L_SQUARE        reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 95 (storage_class_specifier -> TYPEDEF .)
    R_PAREN         reduce using rule 95 (storage_class_specifier -> TYPEDEF .)


state 16

    (96) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 96 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 96 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 96 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 96 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 96 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 96 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 96 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 96 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 96 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 96 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 96 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 96 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 96 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 96 (storage_class_specifier -> EXTERN .)
    TYPE_NAME       reduce using rule 96 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 96 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 96 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 96 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 96 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 96 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 96 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 96 (storage_class_specifier -> EXTERN .)
    STAR            reduce using rule 96 (storage_class_specifier -> EXTERN .)
    L_PAREN         reduce using rule 96 (storage_class_specifier -> EXTERN .)
    L_SQUARE        reduce using rule 96 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 96 (storage_class_specifier -> EXTERN .)
    R_PAREN         reduce using rule 96 (storage_class_specifier -> EXTERN .)


state 17

    (97) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 97 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 97 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 97 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 97 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 97 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 97 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 97 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 97 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 97 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 97 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 97 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 97 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 97 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 97 (storage_class_specifier -> STATIC .)
    TYPE_NAME       reduce using rule 97 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 97 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 97 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 97 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 97 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 97 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 97 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 97 (storage_class_specifier -> STATIC .)
    STAR            reduce using rule 97 (storage_class_specifier -> STATIC .)
    L_PAREN         reduce using rule 97 (storage_class_specifier -> STATIC .)
    L_SQUARE        reduce using rule 97 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 97 (storage_class_specifier -> STATIC .)
    R_PAREN         reduce using rule 97 (storage_class_specifier -> STATIC .)


state 18

    (98) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 98 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 98 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 98 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 98 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 98 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 98 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 98 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 98 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 98 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 98 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 98 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 98 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 98 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 98 (storage_class_specifier -> AUTO .)
    TYPE_NAME       reduce using rule 98 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 98 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 98 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 98 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 98 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 98 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 98 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 98 (storage_class_specifier -> AUTO .)
    STAR            reduce using rule 98 (storage_class_specifier -> AUTO .)
    L_PAREN         reduce using rule 98 (storage_class_specifier -> AUTO .)
    L_SQUARE        reduce using rule 98 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 98 (storage_class_specifier -> AUTO .)
    R_PAREN         reduce using rule 98 (storage_class_specifier -> AUTO .)


state 19

    (99) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 99 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 99 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 99 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 99 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 99 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 99 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 99 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 99 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 99 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 99 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 99 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 99 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 99 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 99 (storage_class_specifier -> REGISTER .)
    TYPE_NAME       reduce using rule 99 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 99 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 99 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 99 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 99 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 99 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 99 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 99 (storage_class_specifier -> REGISTER .)
    STAR            reduce using rule 99 (storage_class_specifier -> REGISTER .)
    L_PAREN         reduce using rule 99 (storage_class_specifier -> REGISTER .)
    L_SQUARE        reduce using rule 99 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 99 (storage_class_specifier -> REGISTER .)
    R_PAREN         reduce using rule 99 (storage_class_specifier -> REGISTER .)


state 20

    (100) type_specifier -> VOID .

    TYPEDEF         reduce using rule 100 (type_specifier -> VOID .)
    EXTERN          reduce using rule 100 (type_specifier -> VOID .)
    STATIC          reduce using rule 100 (type_specifier -> VOID .)
    AUTO            reduce using rule 100 (type_specifier -> VOID .)
    REGISTER        reduce using rule 100 (type_specifier -> VOID .)
    VOID            reduce using rule 100 (type_specifier -> VOID .)
    CHAR            reduce using rule 100 (type_specifier -> VOID .)
    SHORT           reduce using rule 100 (type_specifier -> VOID .)
    INT             reduce using rule 100 (type_specifier -> VOID .)
    LONG            reduce using rule 100 (type_specifier -> VOID .)
    FLOAT           reduce using rule 100 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 100 (type_specifier -> VOID .)
    SIGNED          reduce using rule 100 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 100 (type_specifier -> VOID .)
    TYPE_NAME       reduce using rule 100 (type_specifier -> VOID .)
    CONST           reduce using rule 100 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 100 (type_specifier -> VOID .)
    ENUM            reduce using rule 100 (type_specifier -> VOID .)
    STRUCT          reduce using rule 100 (type_specifier -> VOID .)
    UNION           reduce using rule 100 (type_specifier -> VOID .)
    SEMI            reduce using rule 100 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 100 (type_specifier -> VOID .)
    STAR            reduce using rule 100 (type_specifier -> VOID .)
    L_PAREN         reduce using rule 100 (type_specifier -> VOID .)
    L_SQUARE        reduce using rule 100 (type_specifier -> VOID .)
    COMMA           reduce using rule 100 (type_specifier -> VOID .)
    R_PAREN         reduce using rule 100 (type_specifier -> VOID .)
    COLON           reduce using rule 100 (type_specifier -> VOID .)


state 21

    (101) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 101 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 101 (type_specifier -> CHAR .)
    STATIC          reduce using rule 101 (type_specifier -> CHAR .)
    AUTO            reduce using rule 101 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 101 (type_specifier -> CHAR .)
    VOID            reduce using rule 101 (type_specifier -> CHAR .)
    CHAR            reduce using rule 101 (type_specifier -> CHAR .)
    SHORT           reduce using rule 101 (type_specifier -> CHAR .)
    INT             reduce using rule 101 (type_specifier -> CHAR .)
    LONG            reduce using rule 101 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 101 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 101 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 101 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 101 (type_specifier -> CHAR .)
    TYPE_NAME       reduce using rule 101 (type_specifier -> CHAR .)
    CONST           reduce using rule 101 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 101 (type_specifier -> CHAR .)
    ENUM            reduce using rule 101 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 101 (type_specifier -> CHAR .)
    UNION           reduce using rule 101 (type_specifier -> CHAR .)
    SEMI            reduce using rule 101 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 101 (type_specifier -> CHAR .)
    STAR            reduce using rule 101 (type_specifier -> CHAR .)
    L_PAREN         reduce using rule 101 (type_specifier -> CHAR .)
    L_SQUARE        reduce using rule 101 (type_specifier -> CHAR .)
    COMMA           reduce using rule 101 (type_specifier -> CHAR .)
    R_PAREN         reduce using rule 101 (type_specifier -> CHAR .)
    COLON           reduce using rule 101 (type_specifier -> CHAR .)


state 22

    (102) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 102 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 102 (type_specifier -> SHORT .)
    STATIC          reduce using rule 102 (type_specifier -> SHORT .)
    AUTO            reduce using rule 102 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 102 (type_specifier -> SHORT .)
    VOID            reduce using rule 102 (type_specifier -> SHORT .)
    CHAR            reduce using rule 102 (type_specifier -> SHORT .)
    SHORT           reduce using rule 102 (type_specifier -> SHORT .)
    INT             reduce using rule 102 (type_specifier -> SHORT .)
    LONG            reduce using rule 102 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 102 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 102 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 102 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 102 (type_specifier -> SHORT .)
    TYPE_NAME       reduce using rule 102 (type_specifier -> SHORT .)
    CONST           reduce using rule 102 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 102 (type_specifier -> SHORT .)
    ENUM            reduce using rule 102 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 102 (type_specifier -> SHORT .)
    UNION           reduce using rule 102 (type_specifier -> SHORT .)
    SEMI            reduce using rule 102 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 102 (type_specifier -> SHORT .)
    STAR            reduce using rule 102 (type_specifier -> SHORT .)
    L_PAREN         reduce using rule 102 (type_specifier -> SHORT .)
    L_SQUARE        reduce using rule 102 (type_specifier -> SHORT .)
    COMMA           reduce using rule 102 (type_specifier -> SHORT .)
    R_PAREN         reduce using rule 102 (type_specifier -> SHORT .)
    COLON           reduce using rule 102 (type_specifier -> SHORT .)


state 23

    (103) type_specifier -> INT .

    TYPEDEF         reduce using rule 103 (type_specifier -> INT .)
    EXTERN          reduce using rule 103 (type_specifier -> INT .)
    STATIC          reduce using rule 103 (type_specifier -> INT .)
    AUTO            reduce using rule 103 (type_specifier -> INT .)
    REGISTER        reduce using rule 103 (type_specifier -> INT .)
    VOID            reduce using rule 103 (type_specifier -> INT .)
    CHAR            reduce using rule 103 (type_specifier -> INT .)
    SHORT           reduce using rule 103 (type_specifier -> INT .)
    INT             reduce using rule 103 (type_specifier -> INT .)
    LONG            reduce using rule 103 (type_specifier -> INT .)
    FLOAT           reduce using rule 103 (type_specifier -> INT .)
    DOUBLE          reduce using rule 103 (type_specifier -> INT .)
    SIGNED          reduce using rule 103 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 103 (type_specifier -> INT .)
    TYPE_NAME       reduce using rule 103 (type_specifier -> INT .)
    CONST           reduce using rule 103 (type_specifier -> INT .)
    VOLATILE        reduce using rule 103 (type_specifier -> INT .)
    ENUM            reduce using rule 103 (type_specifier -> INT .)
    STRUCT          reduce using rule 103 (type_specifier -> INT .)
    UNION           reduce using rule 103 (type_specifier -> INT .)
    SEMI            reduce using rule 103 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 103 (type_specifier -> INT .)
    STAR            reduce using rule 103 (type_specifier -> INT .)
    L_PAREN         reduce using rule 103 (type_specifier -> INT .)
    L_SQUARE        reduce using rule 103 (type_specifier -> INT .)
    COMMA           reduce using rule 103 (type_specifier -> INT .)
    R_PAREN         reduce using rule 103 (type_specifier -> INT .)
    COLON           reduce using rule 103 (type_specifier -> INT .)


state 24

    (104) type_specifier -> LONG .

    TYPEDEF         reduce using rule 104 (type_specifier -> LONG .)
    EXTERN          reduce using rule 104 (type_specifier -> LONG .)
    STATIC          reduce using rule 104 (type_specifier -> LONG .)
    AUTO            reduce using rule 104 (type_specifier -> LONG .)
    REGISTER        reduce using rule 104 (type_specifier -> LONG .)
    VOID            reduce using rule 104 (type_specifier -> LONG .)
    CHAR            reduce using rule 104 (type_specifier -> LONG .)
    SHORT           reduce using rule 104 (type_specifier -> LONG .)
    INT             reduce using rule 104 (type_specifier -> LONG .)
    LONG            reduce using rule 104 (type_specifier -> LONG .)
    FLOAT           reduce using rule 104 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 104 (type_specifier -> LONG .)
    SIGNED          reduce using rule 104 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 104 (type_specifier -> LONG .)
    TYPE_NAME       reduce using rule 104 (type_specifier -> LONG .)
    CONST           reduce using rule 104 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 104 (type_specifier -> LONG .)
    ENUM            reduce using rule 104 (type_specifier -> LONG .)
    STRUCT          reduce using rule 104 (type_specifier -> LONG .)
    UNION           reduce using rule 104 (type_specifier -> LONG .)
    SEMI            reduce using rule 104 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 104 (type_specifier -> LONG .)
    STAR            reduce using rule 104 (type_specifier -> LONG .)
    L_PAREN         reduce using rule 104 (type_specifier -> LONG .)
    L_SQUARE        reduce using rule 104 (type_specifier -> LONG .)
    COMMA           reduce using rule 104 (type_specifier -> LONG .)
    R_PAREN         reduce using rule 104 (type_specifier -> LONG .)
    COLON           reduce using rule 104 (type_specifier -> LONG .)


state 25

    (105) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 105 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 105 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 105 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 105 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 105 (type_specifier -> FLOAT .)
    VOID            reduce using rule 105 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 105 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 105 (type_specifier -> FLOAT .)
    INT             reduce using rule 105 (type_specifier -> FLOAT .)
    LONG            reduce using rule 105 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 105 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 105 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 105 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 105 (type_specifier -> FLOAT .)
    TYPE_NAME       reduce using rule 105 (type_specifier -> FLOAT .)
    CONST           reduce using rule 105 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 105 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 105 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 105 (type_specifier -> FLOAT .)
    UNION           reduce using rule 105 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 105 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 105 (type_specifier -> FLOAT .)
    STAR            reduce using rule 105 (type_specifier -> FLOAT .)
    L_PAREN         reduce using rule 105 (type_specifier -> FLOAT .)
    L_SQUARE        reduce using rule 105 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 105 (type_specifier -> FLOAT .)
    R_PAREN         reduce using rule 105 (type_specifier -> FLOAT .)
    COLON           reduce using rule 105 (type_specifier -> FLOAT .)


state 26

    (106) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 106 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 106 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 106 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 106 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 106 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 106 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 106 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 106 (type_specifier -> DOUBLE .)
    INT             reduce using rule 106 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 106 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 106 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 106 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 106 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 106 (type_specifier -> DOUBLE .)
    TYPE_NAME       reduce using rule 106 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 106 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 106 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 106 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 106 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 106 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 106 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 106 (type_specifier -> DOUBLE .)
    STAR            reduce using rule 106 (type_specifier -> DOUBLE .)
    L_PAREN         reduce using rule 106 (type_specifier -> DOUBLE .)
    L_SQUARE        reduce using rule 106 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 106 (type_specifier -> DOUBLE .)
    R_PAREN         reduce using rule 106 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 106 (type_specifier -> DOUBLE .)


state 27

    (107) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 107 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 107 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 107 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 107 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 107 (type_specifier -> SIGNED .)
    VOID            reduce using rule 107 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 107 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 107 (type_specifier -> SIGNED .)
    INT             reduce using rule 107 (type_specifier -> SIGNED .)
    LONG            reduce using rule 107 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 107 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 107 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 107 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 107 (type_specifier -> SIGNED .)
    TYPE_NAME       reduce using rule 107 (type_specifier -> SIGNED .)
    CONST           reduce using rule 107 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 107 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 107 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 107 (type_specifier -> SIGNED .)
    UNION           reduce using rule 107 (type_specifier -> SIGNED .)
    SEMI            reduce using rule 107 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 107 (type_specifier -> SIGNED .)
    STAR            reduce using rule 107 (type_specifier -> SIGNED .)
    L_PAREN         reduce using rule 107 (type_specifier -> SIGNED .)
    L_SQUARE        reduce using rule 107 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 107 (type_specifier -> SIGNED .)
    R_PAREN         reduce using rule 107 (type_specifier -> SIGNED .)
    COLON           reduce using rule 107 (type_specifier -> SIGNED .)


state 28

    (108) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 108 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 108 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 108 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 108 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 108 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 108 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 108 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 108 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 108 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 108 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 108 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 108 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 108 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 108 (type_specifier -> UNSIGNED .)
    TYPE_NAME       reduce using rule 108 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 108 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 108 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 108 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 108 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 108 (type_specifier -> UNSIGNED .)
    SEMI            reduce using rule 108 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 108 (type_specifier -> UNSIGNED .)
    STAR            reduce using rule 108 (type_specifier -> UNSIGNED .)
    L_PAREN         reduce using rule 108 (type_specifier -> UNSIGNED .)
    L_SQUARE        reduce using rule 108 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 108 (type_specifier -> UNSIGNED .)
    R_PAREN         reduce using rule 108 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 108 (type_specifier -> UNSIGNED .)


state 29

    (109) type_specifier -> TYPE_NAME .

    TYPEDEF         reduce using rule 109 (type_specifier -> TYPE_NAME .)
    EXTERN          reduce using rule 109 (type_specifier -> TYPE_NAME .)
    STATIC          reduce using rule 109 (type_specifier -> TYPE_NAME .)
    AUTO            reduce using rule 109 (type_specifier -> TYPE_NAME .)
    REGISTER        reduce using rule 109 (type_specifier -> TYPE_NAME .)
    VOID            reduce using rule 109 (type_specifier -> TYPE_NAME .)
    CHAR            reduce using rule 109 (type_specifier -> TYPE_NAME .)
    SHORT           reduce using rule 109 (type_specifier -> TYPE_NAME .)
    INT             reduce using rule 109 (type_specifier -> TYPE_NAME .)
    LONG            reduce using rule 109 (type_specifier -> TYPE_NAME .)
    FLOAT           reduce using rule 109 (type_specifier -> TYPE_NAME .)
    DOUBLE          reduce using rule 109 (type_specifier -> TYPE_NAME .)
    SIGNED          reduce using rule 109 (type_specifier -> TYPE_NAME .)
    UNSIGNED        reduce using rule 109 (type_specifier -> TYPE_NAME .)
    TYPE_NAME       reduce using rule 109 (type_specifier -> TYPE_NAME .)
    CONST           reduce using rule 109 (type_specifier -> TYPE_NAME .)
    VOLATILE        reduce using rule 109 (type_specifier -> TYPE_NAME .)
    ENUM            reduce using rule 109 (type_specifier -> TYPE_NAME .)
    STRUCT          reduce using rule 109 (type_specifier -> TYPE_NAME .)
    UNION           reduce using rule 109 (type_specifier -> TYPE_NAME .)
    SEMI            reduce using rule 109 (type_specifier -> TYPE_NAME .)
    IDENTIFIER      reduce using rule 109 (type_specifier -> TYPE_NAME .)
    STAR            reduce using rule 109 (type_specifier -> TYPE_NAME .)
    L_PAREN         reduce using rule 109 (type_specifier -> TYPE_NAME .)
    L_SQUARE        reduce using rule 109 (type_specifier -> TYPE_NAME .)
    COMMA           reduce using rule 109 (type_specifier -> TYPE_NAME .)
    R_PAREN         reduce using rule 109 (type_specifier -> TYPE_NAME .)
    COLON           reduce using rule 109 (type_specifier -> TYPE_NAME .)


state 30

    (110) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    TYPE_NAME       reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    STAR            reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    L_PAREN         reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    L_SQUARE        reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    R_PAREN         reduce using rule 110 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 110 (type_specifier -> struct_or_union_specifier .)


state 31

    (111) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 111 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 111 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 111 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 111 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 111 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 111 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 111 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 111 (type_specifier -> enum_specifier .)
    INT             reduce using rule 111 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 111 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 111 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 111 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 111 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 111 (type_specifier -> enum_specifier .)
    TYPE_NAME       reduce using rule 111 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 111 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 111 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 111 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 111 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 111 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 111 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 111 (type_specifier -> enum_specifier .)
    STAR            reduce using rule 111 (type_specifier -> enum_specifier .)
    L_PAREN         reduce using rule 111 (type_specifier -> enum_specifier .)
    L_SQUARE        reduce using rule 111 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 111 (type_specifier -> enum_specifier .)
    R_PAREN         reduce using rule 111 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 111 (type_specifier -> enum_specifier .)


state 32

    (136) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 136 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 136 (type_qualifier -> CONST .)
    STATIC          reduce using rule 136 (type_qualifier -> CONST .)
    AUTO            reduce using rule 136 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 136 (type_qualifier -> CONST .)
    VOID            reduce using rule 136 (type_qualifier -> CONST .)
    CHAR            reduce using rule 136 (type_qualifier -> CONST .)
    SHORT           reduce using rule 136 (type_qualifier -> CONST .)
    INT             reduce using rule 136 (type_qualifier -> CONST .)
    LONG            reduce using rule 136 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 136 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 136 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 136 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 136 (type_qualifier -> CONST .)
    TYPE_NAME       reduce using rule 136 (type_qualifier -> CONST .)
    CONST           reduce using rule 136 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 136 (type_qualifier -> CONST .)
    ENUM            reduce using rule 136 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 136 (type_qualifier -> CONST .)
    UNION           reduce using rule 136 (type_qualifier -> CONST .)
    SEMI            reduce using rule 136 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 136 (type_qualifier -> CONST .)
    STAR            reduce using rule 136 (type_qualifier -> CONST .)
    L_PAREN         reduce using rule 136 (type_qualifier -> CONST .)
    L_SQUARE        reduce using rule 136 (type_qualifier -> CONST .)
    COMMA           reduce using rule 136 (type_qualifier -> CONST .)
    R_PAREN         reduce using rule 136 (type_qualifier -> CONST .)
    COLON           reduce using rule 136 (type_qualifier -> CONST .)


state 33

    (137) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 137 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 137 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 137 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 137 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 137 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 137 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 137 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 137 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 137 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 137 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 137 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 137 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 137 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 137 (type_qualifier -> VOLATILE .)
    TYPE_NAME       reduce using rule 137 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 137 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 137 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 137 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 137 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 137 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 137 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 137 (type_qualifier -> VOLATILE .)
    STAR            reduce using rule 137 (type_qualifier -> VOLATILE .)
    L_PAREN         reduce using rule 137 (type_qualifier -> VOLATILE .)
    L_SQUARE        reduce using rule 137 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 137 (type_qualifier -> VOLATILE .)
    R_PAREN         reduce using rule 137 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 137 (type_qualifier -> VOLATILE .)


state 34

    (112) struct_or_union_specifier -> struct_or_union . IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> struct_or_union . L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 63
    L_BRACE         shift and go to state 64


state 35

    (129) enum_specifier -> ENUM . L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> ENUM . IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> ENUM . IDENTIFIER

    L_BRACE         shift and go to state 65
    IDENTIFIER      shift and go to state 66


state 36

    (115) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 115 (struct_or_union -> STRUCT .)
    L_BRACE         reduce using rule 115 (struct_or_union -> STRUCT .)


state 37

    (116) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 116 (struct_or_union -> UNION .)
    L_BRACE         reduce using rule 116 (struct_or_union -> UNION .)


state 38

    (218) translation_unit -> translation_unit external_declaration .

    IDENTIFIER      reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    TYPE_NAME       reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 218 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 218 (translation_unit -> translation_unit external_declaration .)


state 39

    (226) function_definition -> function_header compound_statement .

    IDENTIFIER      reduce using rule 226 (function_definition -> function_header compound_statement .)
    TYPEDEF         reduce using rule 226 (function_definition -> function_header compound_statement .)
    EXTERN          reduce using rule 226 (function_definition -> function_header compound_statement .)
    STATIC          reduce using rule 226 (function_definition -> function_header compound_statement .)
    AUTO            reduce using rule 226 (function_definition -> function_header compound_statement .)
    REGISTER        reduce using rule 226 (function_definition -> function_header compound_statement .)
    VOID            reduce using rule 226 (function_definition -> function_header compound_statement .)
    CHAR            reduce using rule 226 (function_definition -> function_header compound_statement .)
    SHORT           reduce using rule 226 (function_definition -> function_header compound_statement .)
    INT             reduce using rule 226 (function_definition -> function_header compound_statement .)
    LONG            reduce using rule 226 (function_definition -> function_header compound_statement .)
    FLOAT           reduce using rule 226 (function_definition -> function_header compound_statement .)
    DOUBLE          reduce using rule 226 (function_definition -> function_header compound_statement .)
    SIGNED          reduce using rule 226 (function_definition -> function_header compound_statement .)
    UNSIGNED        reduce using rule 226 (function_definition -> function_header compound_statement .)
    TYPE_NAME       reduce using rule 226 (function_definition -> function_header compound_statement .)
    CONST           reduce using rule 226 (function_definition -> function_header compound_statement .)
    VOLATILE        reduce using rule 226 (function_definition -> function_header compound_statement .)
    ENUM            reduce using rule 226 (function_definition -> function_header compound_statement .)
    STRUCT          reduce using rule 226 (function_definition -> function_header compound_statement .)
    UNION           reduce using rule 226 (function_definition -> function_header compound_statement .)
    $end            reduce using rule 226 (function_definition -> function_header compound_statement .)


state 40

    (227) function_definition -> function_header declaration_list . compound_statement
    (199) declaration_list -> declaration_list . declaration
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (81) declaration -> . declaration_specifiers SEMI
    (82) declaration -> . declaration_specifiers init_declarator_list SEMI
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    L_BRACE         shift and go to state 41
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    compound_statement             shift and go to state 67
    declaration                    shift and go to state 68
    declaration_specifiers         shift and go to state 43
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 41

    (194) compound_statement -> L_BRACE . R_BRACE
    (195) compound_statement -> L_BRACE . statement_list R_BRACE
    (196) compound_statement -> L_BRACE . declaration_list R_BRACE
    (197) compound_statement -> L_BRACE . declaration_list statement_list R_BRACE
    (200) statement_list -> . statement
    (201) statement_list -> . statement_list statement
    (198) declaration_list -> . declaration
    (199) declaration_list -> . declaration_list declaration
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (81) declaration -> . declaration_specifiers SEMI
    (82) declaration -> . declaration_specifiers init_declarator_list SEMI
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACE         shift and go to state 69
    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    statement_list                 shift and go to state 70
    declaration_list               shift and go to state 71
    statement                      shift and go to state 72
    declaration                    shift and go to state 42
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    declaration_specifiers         shift and go to state 43
    expression                     shift and go to state 83
    iteration_header               shift and go to state 87
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    assignment_expression          shift and go to state 92
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    struct_or_union                shift and go to state 34
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 42

    (198) declaration_list -> declaration .

    L_BRACE         reduce using rule 198 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 198 (declaration_list -> declaration .)
    EXTERN          reduce using rule 198 (declaration_list -> declaration .)
    STATIC          reduce using rule 198 (declaration_list -> declaration .)
    AUTO            reduce using rule 198 (declaration_list -> declaration .)
    REGISTER        reduce using rule 198 (declaration_list -> declaration .)
    VOID            reduce using rule 198 (declaration_list -> declaration .)
    CHAR            reduce using rule 198 (declaration_list -> declaration .)
    SHORT           reduce using rule 198 (declaration_list -> declaration .)
    INT             reduce using rule 198 (declaration_list -> declaration .)
    LONG            reduce using rule 198 (declaration_list -> declaration .)
    FLOAT           reduce using rule 198 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 198 (declaration_list -> declaration .)
    SIGNED          reduce using rule 198 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 198 (declaration_list -> declaration .)
    TYPE_NAME       reduce using rule 198 (declaration_list -> declaration .)
    CONST           reduce using rule 198 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 198 (declaration_list -> declaration .)
    ENUM            reduce using rule 198 (declaration_list -> declaration .)
    STRUCT          reduce using rule 198 (declaration_list -> declaration .)
    UNION           reduce using rule 198 (declaration_list -> declaration .)
    R_BRACE         reduce using rule 198 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 198 (declaration_list -> declaration .)
    CASE            reduce using rule 198 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 198 (declaration_list -> declaration .)
    SEMI            reduce using rule 198 (declaration_list -> declaration .)
    IF              reduce using rule 198 (declaration_list -> declaration .)
    SWITCH          reduce using rule 198 (declaration_list -> declaration .)
    GOTO            reduce using rule 198 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 198 (declaration_list -> declaration .)
    BREAK           reduce using rule 198 (declaration_list -> declaration .)
    RETURN          reduce using rule 198 (declaration_list -> declaration .)
    WHILE           reduce using rule 198 (declaration_list -> declaration .)
    FOR             reduce using rule 198 (declaration_list -> declaration .)
    INC_OP          reduce using rule 198 (declaration_list -> declaration .)
    DEC_OP          reduce using rule 198 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 198 (declaration_list -> declaration .)
    AMP             reduce using rule 198 (declaration_list -> declaration .)
    STAR            reduce using rule 198 (declaration_list -> declaration .)
    PLUS            reduce using rule 198 (declaration_list -> declaration .)
    MINUS           reduce using rule 198 (declaration_list -> declaration .)
    TILDA           reduce using rule 198 (declaration_list -> declaration .)
    EXCLAIM         reduce using rule 198 (declaration_list -> declaration .)
    CONSTANT        reduce using rule 198 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 198 (declaration_list -> declaration .)
    L_PAREN         reduce using rule 198 (declaration_list -> declaration .)


state 43

    (81) declaration -> declaration_specifiers . SEMI
    (82) declaration -> declaration_specifiers . init_declarator_list SEMI
    (89) init_declarator_list -> . init_declarator
    (90) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (91) init_declarator -> . uninitialized_declaration
    (92) init_declarator -> . initialized_declaration
    (94) uninitialized_declaration -> . declarator
    (93) initialized_declaration -> . declarator EQUAL initializer
    (138) declarator -> . pointer direct_declarator
    (139) declarator -> . direct_declarator
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN

    SEMI            shift and go to state 44
    STAR            shift and go to state 55
    IDENTIFIER      shift and go to state 48
    L_PAREN         shift and go to state 49

    init_declarator_list           shift and go to state 45
    init_declarator                shift and go to state 47
    uninitialized_declaration      shift and go to state 50
    initialized_declaration        shift and go to state 51
    declarator                     shift and go to state 52
    pointer                        shift and go to state 53
    direct_declarator              shift and go to state 54
    variable_declaration           shift and go to state 56
    function_declaration           shift and go to state 128
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58

state 44

    (81) declaration -> declaration_specifiers SEMI .

    IDENTIFIER      reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    TYPEDEF         reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    EXTERN          reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    STATIC          reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    AUTO            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    REGISTER        reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    VOID            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    CHAR            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    SHORT           reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    INT             reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    LONG            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    FLOAT           reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    DOUBLE          reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    SIGNED          reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    UNSIGNED        reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    TYPE_NAME       reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    CONST           reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    VOLATILE        reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    ENUM            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    STRUCT          reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    UNION           reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    $end            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    L_BRACE         reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    R_BRACE         reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    CASE            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    DEFAULT         reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    SEMI            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    IF              reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    SWITCH          reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    GOTO            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    CONTINUE        reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    BREAK           reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    RETURN          reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    WHILE           reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    FOR             reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    INC_OP          reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    DEC_OP          reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    SIZEOF          reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    AMP             reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    STAR            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    PLUS            reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    MINUS           reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    TILDA           reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    EXCLAIM         reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    CONSTANT        reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    STRING_LITERAL  reduce using rule 81 (declaration -> declaration_specifiers SEMI .)
    L_PAREN         reduce using rule 81 (declaration -> declaration_specifiers SEMI .)


state 45

    (82) declaration -> declaration_specifiers init_declarator_list . SEMI
    (90) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 129
    COMMA           shift and go to state 130


state 46

    (224) fheader_type1 -> declaration_specifiers function_declaration .
    (141) direct_declarator -> function_declaration .

    L_BRACE         reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    TYPEDEF         reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    EXTERN          reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    STATIC          reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    AUTO            reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    REGISTER        reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    VOID            reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    CHAR            reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    SHORT           reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    INT             reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    LONG            reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    FLOAT           reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    DOUBLE          reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    SIGNED          reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    UNSIGNED        reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    TYPE_NAME       reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    CONST           reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    VOLATILE        reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    ENUM            reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    STRUCT          reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    UNION           reduce using rule 224 (fheader_type1 -> declaration_specifiers function_declaration .)
    EQUAL           reduce using rule 141 (direct_declarator -> function_declaration .)
    SEMI            reduce using rule 141 (direct_declarator -> function_declaration .)
    COMMA           reduce using rule 141 (direct_declarator -> function_declaration .)


state 47

    (89) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 89 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 89 (init_declarator_list -> init_declarator .)


state 48

    (148) function_declaration -> IDENTIFIER . L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> IDENTIFIER . L_PAREN identifier_list R_PAREN
    (150) function_declaration -> IDENTIFIER . L_PAREN R_PAREN
    (144) variable_declaration1 -> IDENTIFIER .
    (145) variable_declaration1 -> IDENTIFIER . L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> IDENTIFIER . L_SQUARE R_SQUARE

    L_PAREN         shift and go to state 62
    EQUAL           reduce using rule 144 (variable_declaration1 -> IDENTIFIER .)
    SEMI            reduce using rule 144 (variable_declaration1 -> IDENTIFIER .)
    COMMA           reduce using rule 144 (variable_declaration1 -> IDENTIFIER .)
    R_PAREN         reduce using rule 144 (variable_declaration1 -> IDENTIFIER .)
    COLON           reduce using rule 144 (variable_declaration1 -> IDENTIFIER .)
    L_SQUARE        shift and go to state 131


state 49

    (147) variable_declaration2 -> L_PAREN . declarator R_PAREN
    (138) declarator -> . pointer direct_declarator
    (139) declarator -> . direct_declarator
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN

    STAR            shift and go to state 55
    IDENTIFIER      shift and go to state 48
    L_PAREN         shift and go to state 49

    declarator                     shift and go to state 132
    pointer                        shift and go to state 53
    direct_declarator              shift and go to state 54
    variable_declaration           shift and go to state 56
    function_declaration           shift and go to state 128
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58

state 50

    (91) init_declarator -> uninitialized_declaration .

    SEMI            reduce using rule 91 (init_declarator -> uninitialized_declaration .)
    COMMA           reduce using rule 91 (init_declarator -> uninitialized_declaration .)


state 51

    (92) init_declarator -> initialized_declaration .

    SEMI            reduce using rule 92 (init_declarator -> initialized_declaration .)
    COMMA           reduce using rule 92 (init_declarator -> initialized_declaration .)


state 52

    (94) uninitialized_declaration -> declarator .
    (93) initialized_declaration -> declarator . EQUAL initializer

    SEMI            reduce using rule 94 (uninitialized_declaration -> declarator .)
    COMMA           reduce using rule 94 (uninitialized_declaration -> declarator .)
    EQUAL           shift and go to state 133


state 53

    (138) declarator -> pointer . direct_declarator
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN

    IDENTIFIER      shift and go to state 48
    L_PAREN         shift and go to state 49

    direct_declarator              shift and go to state 134
    variable_declaration           shift and go to state 56
    function_declaration           shift and go to state 128
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58

state 54

    (139) declarator -> direct_declarator .

    EQUAL           reduce using rule 139 (declarator -> direct_declarator .)
    SEMI            reduce using rule 139 (declarator -> direct_declarator .)
    COMMA           reduce using rule 139 (declarator -> direct_declarator .)
    R_PAREN         reduce using rule 139 (declarator -> direct_declarator .)
    COLON           reduce using rule 139 (declarator -> direct_declarator .)


state 55

    (151) pointer -> STAR .
    (152) pointer -> STAR . type_qualifier_list
    (153) pointer -> STAR . pointer
    (154) pointer -> STAR . type_qualifier_list pointer
    (155) type_qualifier_list -> . type_qualifier
    (156) type_qualifier_list -> . type_qualifier_list type_qualifier
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 151 (pointer -> STAR .)
    L_PAREN         reduce using rule 151 (pointer -> STAR .)
    L_SQUARE        reduce using rule 151 (pointer -> STAR .)
    COMMA           reduce using rule 151 (pointer -> STAR .)
    R_PAREN         reduce using rule 151 (pointer -> STAR .)
    STAR            shift and go to state 55
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33

    type_qualifier_list            shift and go to state 135
    pointer                        shift and go to state 136
    type_qualifier                 shift and go to state 137

state 56

    (140) direct_declarator -> variable_declaration .

    EQUAL           reduce using rule 140 (direct_declarator -> variable_declaration .)
    SEMI            reduce using rule 140 (direct_declarator -> variable_declaration .)
    COMMA           reduce using rule 140 (direct_declarator -> variable_declaration .)
    R_PAREN         reduce using rule 140 (direct_declarator -> variable_declaration .)
    COLON           reduce using rule 140 (direct_declarator -> variable_declaration .)


state 57

    (142) variable_declaration -> variable_declaration1 .

    EQUAL           reduce using rule 142 (variable_declaration -> variable_declaration1 .)
    SEMI            reduce using rule 142 (variable_declaration -> variable_declaration1 .)
    COMMA           reduce using rule 142 (variable_declaration -> variable_declaration1 .)
    R_PAREN         reduce using rule 142 (variable_declaration -> variable_declaration1 .)
    COLON           reduce using rule 142 (variable_declaration -> variable_declaration1 .)


state 58

    (143) variable_declaration -> variable_declaration2 .

    EQUAL           reduce using rule 143 (variable_declaration -> variable_declaration2 .)
    SEMI            reduce using rule 143 (variable_declaration -> variable_declaration2 .)
    COMMA           reduce using rule 143 (variable_declaration -> variable_declaration2 .)
    R_PAREN         reduce using rule 143 (variable_declaration -> variable_declaration2 .)
    COLON           reduce using rule 143 (variable_declaration -> variable_declaration2 .)


state 59

    (84) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMI            reduce using rule 84 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 84 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    STAR            reduce using rule 84 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    L_PAREN         reduce using rule 84 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    L_SQUARE        reduce using rule 84 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 84 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    R_PAREN         reduce using rule 84 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 60

    (86) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI            reduce using rule 86 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 86 (declaration_specifiers -> type_specifier declaration_specifiers .)
    STAR            reduce using rule 86 (declaration_specifiers -> type_specifier declaration_specifiers .)
    L_PAREN         reduce using rule 86 (declaration_specifiers -> type_specifier declaration_specifiers .)
    L_SQUARE        reduce using rule 86 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 86 (declaration_specifiers -> type_specifier declaration_specifiers .)
    R_PAREN         reduce using rule 86 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 61

    (88) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMI            reduce using rule 88 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 88 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    STAR            reduce using rule 88 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    L_PAREN         reduce using rule 88 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    L_SQUARE        reduce using rule 88 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 88 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    R_PAREN         reduce using rule 88 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 62

    (148) function_declaration -> IDENTIFIER L_PAREN . parameter_type_list R_PAREN
    (149) function_declaration -> IDENTIFIER L_PAREN . identifier_list R_PAREN
    (150) function_declaration -> IDENTIFIER L_PAREN . R_PAREN
    (157) parameter_type_list -> . parameter_list
    (158) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (164) identifier_list -> . IDENTIFIER
    (165) identifier_list -> . identifier_list COMMA IDENTIFIER
    (159) parameter_list -> . parameter_declaration
    (160) parameter_list -> . parameter_list COMMA parameter_declaration
    (161) parameter_declaration -> . declaration_specifiers declarator
    (162) parameter_declaration -> . declaration_specifiers abstract_declarator
    (163) parameter_declaration -> . declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    R_PAREN         shift and go to state 140
    IDENTIFIER      shift and go to state 138
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    parameter_type_list            shift and go to state 139
    identifier_list                shift and go to state 141
    parameter_list                 shift and go to state 142
    parameter_declaration          shift and go to state 143
    declaration_specifiers         shift and go to state 144
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 63

    (112) struct_or_union_specifier -> struct_or_union IDENTIFIER . L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    L_BRACE         shift and go to state 145
    TYPEDEF         reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TYPE_NAME       reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SEMI            reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STAR            reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    L_PAREN         reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    L_SQUARE        reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    R_PAREN         reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 114 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 64

    (113) struct_or_union_specifier -> struct_or_union L_BRACE . struct_declaration_list R_BRACE
    (117) struct_declaration_list -> . struct_declaration
    (118) struct_declaration_list -> . struct_declaration_list struct_declaration
    (119) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (120) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (121) specifier_qualifier_list -> . type_specifier
    (122) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (123) specifier_qualifier_list -> . type_qualifier
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration_list        shift and go to state 146
    struct_declaration             shift and go to state 147
    specifier_qualifier_list       shift and go to state 148
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31

state 65

    (129) enum_specifier -> ENUM L_BRACE . enumerator_list R_BRACE
    (132) enumerator_list -> . enumerator
    (133) enumerator_list -> . enumerator_list COMMA enumerator
    (134) enumerator -> . IDENTIFIER
    (135) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 153

    enumerator_list                shift and go to state 151
    enumerator                     shift and go to state 152

state 66

    (130) enum_specifier -> ENUM IDENTIFIER . L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> ENUM IDENTIFIER .

    L_BRACE         shift and go to state 154
    TYPEDEF         reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    TYPE_NAME       reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    SEMI            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    STAR            reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    L_PAREN         reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    L_SQUARE        reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    R_PAREN         reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 131 (enum_specifier -> ENUM IDENTIFIER .)


state 67

    (227) function_definition -> function_header declaration_list compound_statement .

    IDENTIFIER      reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    TYPEDEF         reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    EXTERN          reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    STATIC          reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    AUTO            reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    REGISTER        reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    VOID            reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    CHAR            reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    SHORT           reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    INT             reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    LONG            reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    FLOAT           reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    DOUBLE          reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    SIGNED          reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    UNSIGNED        reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    CONST           reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    VOLATILE        reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    ENUM            reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    STRUCT          reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    UNION           reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)
    $end            reduce using rule 227 (function_definition -> function_header declaration_list compound_statement .)


state 68

    (199) declaration_list -> declaration_list declaration .

    L_BRACE         reduce using rule 199 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 199 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 199 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 199 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 199 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 199 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 199 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 199 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 199 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 199 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 199 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 199 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 199 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 199 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 199 (declaration_list -> declaration_list declaration .)
    TYPE_NAME       reduce using rule 199 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 199 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 199 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 199 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 199 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 199 (declaration_list -> declaration_list declaration .)
    R_BRACE         reduce using rule 199 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 199 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 199 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 199 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 199 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 199 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 199 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 199 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 199 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 199 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 199 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 199 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 199 (declaration_list -> declaration_list declaration .)
    INC_OP          reduce using rule 199 (declaration_list -> declaration_list declaration .)
    DEC_OP          reduce using rule 199 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 199 (declaration_list -> declaration_list declaration .)
    AMP             reduce using rule 199 (declaration_list -> declaration_list declaration .)
    STAR            reduce using rule 199 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 199 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 199 (declaration_list -> declaration_list declaration .)
    TILDA           reduce using rule 199 (declaration_list -> declaration_list declaration .)
    EXCLAIM         reduce using rule 199 (declaration_list -> declaration_list declaration .)
    CONSTANT        reduce using rule 199 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 199 (declaration_list -> declaration_list declaration .)
    L_PAREN         reduce using rule 199 (declaration_list -> declaration_list declaration .)


state 69

    (194) compound_statement -> L_BRACE R_BRACE .

    IDENTIFIER      reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    TYPEDEF         reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    EXTERN          reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    STATIC          reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    AUTO            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    REGISTER        reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    VOID            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    CHAR            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    SHORT           reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    INT             reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    LONG            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    FLOAT           reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    DOUBLE          reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    SIGNED          reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    UNSIGNED        reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    TYPE_NAME       reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    CONST           reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    VOLATILE        reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    ENUM            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    STRUCT          reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    UNION           reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    $end            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    R_BRACE         reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    CASE            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    DEFAULT         reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    L_BRACE         reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    SEMI            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    IF              reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    SWITCH          reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    GOTO            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    CONTINUE        reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    BREAK           reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    RETURN          reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    WHILE           reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    FOR             reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    INC_OP          reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    DEC_OP          reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    SIZEOF          reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    AMP             reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    STAR            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    PLUS            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    MINUS           reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    TILDA           reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    EXCLAIM         reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    CONSTANT        reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    STRING_LITERAL  reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    L_PAREN         reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)
    ELSE            reduce using rule 194 (compound_statement -> L_BRACE R_BRACE .)


state 70

    (195) compound_statement -> L_BRACE statement_list . R_BRACE
    (201) statement_list -> statement_list . statement
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACE         shift and go to state 155
    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    statement                      shift and go to state 156
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    iteration_header               shift and go to state 87
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 71

    (196) compound_statement -> L_BRACE declaration_list . R_BRACE
    (197) compound_statement -> L_BRACE declaration_list . statement_list R_BRACE
    (199) declaration_list -> declaration_list . declaration
    (200) statement_list -> . statement
    (201) statement_list -> . statement_list statement
    (81) declaration -> . declaration_specifiers SEMI
    (82) declaration -> . declaration_specifiers init_declarator_list SEMI
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACE         shift and go to state 157
    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    statement_list                 shift and go to state 158
    declaration                    shift and go to state 68
    statement                      shift and go to state 72
    declaration_specifiers         shift and go to state 43
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    expression                     shift and go to state 83
    iteration_header               shift and go to state 87
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    assignment_expression          shift and go to state 92
    struct_or_union                shift and go to state 34
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 72

    (200) statement_list -> statement .

    R_BRACE         reduce using rule 200 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 200 (statement_list -> statement .)
    CASE            reduce using rule 200 (statement_list -> statement .)
    DEFAULT         reduce using rule 200 (statement_list -> statement .)
    L_BRACE         reduce using rule 200 (statement_list -> statement .)
    SEMI            reduce using rule 200 (statement_list -> statement .)
    IF              reduce using rule 200 (statement_list -> statement .)
    SWITCH          reduce using rule 200 (statement_list -> statement .)
    GOTO            reduce using rule 200 (statement_list -> statement .)
    CONTINUE        reduce using rule 200 (statement_list -> statement .)
    BREAK           reduce using rule 200 (statement_list -> statement .)
    RETURN          reduce using rule 200 (statement_list -> statement .)
    WHILE           reduce using rule 200 (statement_list -> statement .)
    FOR             reduce using rule 200 (statement_list -> statement .)
    INC_OP          reduce using rule 200 (statement_list -> statement .)
    DEC_OP          reduce using rule 200 (statement_list -> statement .)
    SIZEOF          reduce using rule 200 (statement_list -> statement .)
    AMP             reduce using rule 200 (statement_list -> statement .)
    STAR            reduce using rule 200 (statement_list -> statement .)
    PLUS            reduce using rule 200 (statement_list -> statement .)
    MINUS           reduce using rule 200 (statement_list -> statement .)
    TILDA           reduce using rule 200 (statement_list -> statement .)
    EXCLAIM         reduce using rule 200 (statement_list -> statement .)
    CONSTANT        reduce using rule 200 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 200 (statement_list -> statement .)
    L_PAREN         reduce using rule 200 (statement_list -> statement .)


state 73

    (185) statement -> labeled_statement .

    R_BRACE         reduce using rule 185 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 185 (statement -> labeled_statement .)
    CASE            reduce using rule 185 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 185 (statement -> labeled_statement .)
    L_BRACE         reduce using rule 185 (statement -> labeled_statement .)
    SEMI            reduce using rule 185 (statement -> labeled_statement .)
    IF              reduce using rule 185 (statement -> labeled_statement .)
    SWITCH          reduce using rule 185 (statement -> labeled_statement .)
    GOTO            reduce using rule 185 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 185 (statement -> labeled_statement .)
    BREAK           reduce using rule 185 (statement -> labeled_statement .)
    RETURN          reduce using rule 185 (statement -> labeled_statement .)
    WHILE           reduce using rule 185 (statement -> labeled_statement .)
    FOR             reduce using rule 185 (statement -> labeled_statement .)
    INC_OP          reduce using rule 185 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 185 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 185 (statement -> labeled_statement .)
    AMP             reduce using rule 185 (statement -> labeled_statement .)
    STAR            reduce using rule 185 (statement -> labeled_statement .)
    PLUS            reduce using rule 185 (statement -> labeled_statement .)
    MINUS           reduce using rule 185 (statement -> labeled_statement .)
    TILDA           reduce using rule 185 (statement -> labeled_statement .)
    EXCLAIM         reduce using rule 185 (statement -> labeled_statement .)
    CONSTANT        reduce using rule 185 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 185 (statement -> labeled_statement .)
    L_PAREN         reduce using rule 185 (statement -> labeled_statement .)
    ELSE            reduce using rule 185 (statement -> labeled_statement .)


state 74

    (186) statement -> compound_statement .

    R_BRACE         reduce using rule 186 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 186 (statement -> compound_statement .)
    CASE            reduce using rule 186 (statement -> compound_statement .)
    DEFAULT         reduce using rule 186 (statement -> compound_statement .)
    L_BRACE         reduce using rule 186 (statement -> compound_statement .)
    SEMI            reduce using rule 186 (statement -> compound_statement .)
    IF              reduce using rule 186 (statement -> compound_statement .)
    SWITCH          reduce using rule 186 (statement -> compound_statement .)
    GOTO            reduce using rule 186 (statement -> compound_statement .)
    CONTINUE        reduce using rule 186 (statement -> compound_statement .)
    BREAK           reduce using rule 186 (statement -> compound_statement .)
    RETURN          reduce using rule 186 (statement -> compound_statement .)
    WHILE           reduce using rule 186 (statement -> compound_statement .)
    FOR             reduce using rule 186 (statement -> compound_statement .)
    INC_OP          reduce using rule 186 (statement -> compound_statement .)
    DEC_OP          reduce using rule 186 (statement -> compound_statement .)
    SIZEOF          reduce using rule 186 (statement -> compound_statement .)
    AMP             reduce using rule 186 (statement -> compound_statement .)
    STAR            reduce using rule 186 (statement -> compound_statement .)
    PLUS            reduce using rule 186 (statement -> compound_statement .)
    MINUS           reduce using rule 186 (statement -> compound_statement .)
    TILDA           reduce using rule 186 (statement -> compound_statement .)
    EXCLAIM         reduce using rule 186 (statement -> compound_statement .)
    CONSTANT        reduce using rule 186 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 186 (statement -> compound_statement .)
    L_PAREN         reduce using rule 186 (statement -> compound_statement .)
    ELSE            reduce using rule 186 (statement -> compound_statement .)


state 75

    (187) statement -> expression_statement .

    R_BRACE         reduce using rule 187 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 187 (statement -> expression_statement .)
    CASE            reduce using rule 187 (statement -> expression_statement .)
    DEFAULT         reduce using rule 187 (statement -> expression_statement .)
    L_BRACE         reduce using rule 187 (statement -> expression_statement .)
    SEMI            reduce using rule 187 (statement -> expression_statement .)
    IF              reduce using rule 187 (statement -> expression_statement .)
    SWITCH          reduce using rule 187 (statement -> expression_statement .)
    GOTO            reduce using rule 187 (statement -> expression_statement .)
    CONTINUE        reduce using rule 187 (statement -> expression_statement .)
    BREAK           reduce using rule 187 (statement -> expression_statement .)
    RETURN          reduce using rule 187 (statement -> expression_statement .)
    WHILE           reduce using rule 187 (statement -> expression_statement .)
    FOR             reduce using rule 187 (statement -> expression_statement .)
    INC_OP          reduce using rule 187 (statement -> expression_statement .)
    DEC_OP          reduce using rule 187 (statement -> expression_statement .)
    SIZEOF          reduce using rule 187 (statement -> expression_statement .)
    AMP             reduce using rule 187 (statement -> expression_statement .)
    STAR            reduce using rule 187 (statement -> expression_statement .)
    PLUS            reduce using rule 187 (statement -> expression_statement .)
    MINUS           reduce using rule 187 (statement -> expression_statement .)
    TILDA           reduce using rule 187 (statement -> expression_statement .)
    EXCLAIM         reduce using rule 187 (statement -> expression_statement .)
    CONSTANT        reduce using rule 187 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 187 (statement -> expression_statement .)
    L_PAREN         reduce using rule 187 (statement -> expression_statement .)
    ELSE            reduce using rule 187 (statement -> expression_statement .)


state 76

    (188) statement -> selection_statement .

    R_BRACE         reduce using rule 188 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 188 (statement -> selection_statement .)
    CASE            reduce using rule 188 (statement -> selection_statement .)
    DEFAULT         reduce using rule 188 (statement -> selection_statement .)
    L_BRACE         reduce using rule 188 (statement -> selection_statement .)
    SEMI            reduce using rule 188 (statement -> selection_statement .)
    IF              reduce using rule 188 (statement -> selection_statement .)
    SWITCH          reduce using rule 188 (statement -> selection_statement .)
    GOTO            reduce using rule 188 (statement -> selection_statement .)
    CONTINUE        reduce using rule 188 (statement -> selection_statement .)
    BREAK           reduce using rule 188 (statement -> selection_statement .)
    RETURN          reduce using rule 188 (statement -> selection_statement .)
    WHILE           reduce using rule 188 (statement -> selection_statement .)
    FOR             reduce using rule 188 (statement -> selection_statement .)
    INC_OP          reduce using rule 188 (statement -> selection_statement .)
    DEC_OP          reduce using rule 188 (statement -> selection_statement .)
    SIZEOF          reduce using rule 188 (statement -> selection_statement .)
    AMP             reduce using rule 188 (statement -> selection_statement .)
    STAR            reduce using rule 188 (statement -> selection_statement .)
    PLUS            reduce using rule 188 (statement -> selection_statement .)
    MINUS           reduce using rule 188 (statement -> selection_statement .)
    TILDA           reduce using rule 188 (statement -> selection_statement .)
    EXCLAIM         reduce using rule 188 (statement -> selection_statement .)
    CONSTANT        reduce using rule 188 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 188 (statement -> selection_statement .)
    L_PAREN         reduce using rule 188 (statement -> selection_statement .)
    ELSE            reduce using rule 188 (statement -> selection_statement .)


state 77

    (189) statement -> iteration_statement .

    R_BRACE         reduce using rule 189 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 189 (statement -> iteration_statement .)
    CASE            reduce using rule 189 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 189 (statement -> iteration_statement .)
    L_BRACE         reduce using rule 189 (statement -> iteration_statement .)
    SEMI            reduce using rule 189 (statement -> iteration_statement .)
    IF              reduce using rule 189 (statement -> iteration_statement .)
    SWITCH          reduce using rule 189 (statement -> iteration_statement .)
    GOTO            reduce using rule 189 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 189 (statement -> iteration_statement .)
    BREAK           reduce using rule 189 (statement -> iteration_statement .)
    RETURN          reduce using rule 189 (statement -> iteration_statement .)
    WHILE           reduce using rule 189 (statement -> iteration_statement .)
    FOR             reduce using rule 189 (statement -> iteration_statement .)
    INC_OP          reduce using rule 189 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 189 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 189 (statement -> iteration_statement .)
    AMP             reduce using rule 189 (statement -> iteration_statement .)
    STAR            reduce using rule 189 (statement -> iteration_statement .)
    PLUS            reduce using rule 189 (statement -> iteration_statement .)
    MINUS           reduce using rule 189 (statement -> iteration_statement .)
    TILDA           reduce using rule 189 (statement -> iteration_statement .)
    EXCLAIM         reduce using rule 189 (statement -> iteration_statement .)
    CONSTANT        reduce using rule 189 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 189 (statement -> iteration_statement .)
    L_PAREN         reduce using rule 189 (statement -> iteration_statement .)
    ELSE            reduce using rule 189 (statement -> iteration_statement .)


state 78

    (190) statement -> jump_statement .

    R_BRACE         reduce using rule 190 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 190 (statement -> jump_statement .)
    CASE            reduce using rule 190 (statement -> jump_statement .)
    DEFAULT         reduce using rule 190 (statement -> jump_statement .)
    L_BRACE         reduce using rule 190 (statement -> jump_statement .)
    SEMI            reduce using rule 190 (statement -> jump_statement .)
    IF              reduce using rule 190 (statement -> jump_statement .)
    SWITCH          reduce using rule 190 (statement -> jump_statement .)
    GOTO            reduce using rule 190 (statement -> jump_statement .)
    CONTINUE        reduce using rule 190 (statement -> jump_statement .)
    BREAK           reduce using rule 190 (statement -> jump_statement .)
    RETURN          reduce using rule 190 (statement -> jump_statement .)
    WHILE           reduce using rule 190 (statement -> jump_statement .)
    FOR             reduce using rule 190 (statement -> jump_statement .)
    INC_OP          reduce using rule 190 (statement -> jump_statement .)
    DEC_OP          reduce using rule 190 (statement -> jump_statement .)
    SIZEOF          reduce using rule 190 (statement -> jump_statement .)
    AMP             reduce using rule 190 (statement -> jump_statement .)
    STAR            reduce using rule 190 (statement -> jump_statement .)
    PLUS            reduce using rule 190 (statement -> jump_statement .)
    MINUS           reduce using rule 190 (statement -> jump_statement .)
    TILDA           reduce using rule 190 (statement -> jump_statement .)
    EXCLAIM         reduce using rule 190 (statement -> jump_statement .)
    CONSTANT        reduce using rule 190 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 190 (statement -> jump_statement .)
    L_PAREN         reduce using rule 190 (statement -> jump_statement .)
    ELSE            reduce using rule 190 (statement -> jump_statement .)


state 79

    (202) expression_statement -> SEMI .

    R_BRACE         reduce using rule 202 (expression_statement -> SEMI .)
    IDENTIFIER      reduce using rule 202 (expression_statement -> SEMI .)
    CASE            reduce using rule 202 (expression_statement -> SEMI .)
    DEFAULT         reduce using rule 202 (expression_statement -> SEMI .)
    L_BRACE         reduce using rule 202 (expression_statement -> SEMI .)
    SEMI            reduce using rule 202 (expression_statement -> SEMI .)
    IF              reduce using rule 202 (expression_statement -> SEMI .)
    SWITCH          reduce using rule 202 (expression_statement -> SEMI .)
    GOTO            reduce using rule 202 (expression_statement -> SEMI .)
    CONTINUE        reduce using rule 202 (expression_statement -> SEMI .)
    BREAK           reduce using rule 202 (expression_statement -> SEMI .)
    RETURN          reduce using rule 202 (expression_statement -> SEMI .)
    WHILE           reduce using rule 202 (expression_statement -> SEMI .)
    FOR             reduce using rule 202 (expression_statement -> SEMI .)
    INC_OP          reduce using rule 202 (expression_statement -> SEMI .)
    DEC_OP          reduce using rule 202 (expression_statement -> SEMI .)
    SIZEOF          reduce using rule 202 (expression_statement -> SEMI .)
    AMP             reduce using rule 202 (expression_statement -> SEMI .)
    STAR            reduce using rule 202 (expression_statement -> SEMI .)
    PLUS            reduce using rule 202 (expression_statement -> SEMI .)
    MINUS           reduce using rule 202 (expression_statement -> SEMI .)
    TILDA           reduce using rule 202 (expression_statement -> SEMI .)
    EXCLAIM         reduce using rule 202 (expression_statement -> SEMI .)
    CONSTANT        reduce using rule 202 (expression_statement -> SEMI .)
    STRING_LITERAL  reduce using rule 202 (expression_statement -> SEMI .)
    L_PAREN         reduce using rule 202 (expression_statement -> SEMI .)
    ELSE            reduce using rule 202 (expression_statement -> SEMI .)
    R_PAREN         reduce using rule 202 (expression_statement -> SEMI .)


state 80

    (191) labeled_statement -> IDENTIFIER . COLON statement
    (7) function_call -> IDENTIFIER . L_PAREN R_PAREN
    (8) function_call -> IDENTIFIER . L_PAREN argument_expression_list R_PAREN
    (6) variable_use -> IDENTIFIER .

    COLON           shift and go to state 159
    L_PAREN         shift and go to state 160
    L_SQUARE        reduce using rule 6 (variable_use -> IDENTIFIER .)
    DOT             reduce using rule 6 (variable_use -> IDENTIFIER .)
    PTR_OP          reduce using rule 6 (variable_use -> IDENTIFIER .)
    INC_OP          reduce using rule 6 (variable_use -> IDENTIFIER .)
    DEC_OP          reduce using rule 6 (variable_use -> IDENTIFIER .)
    EQUAL           reduce using rule 6 (variable_use -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 6 (variable_use -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 6 (variable_use -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 6 (variable_use -> IDENTIFIER .)
    STAR            reduce using rule 6 (variable_use -> IDENTIFIER .)
    SLASH           reduce using rule 6 (variable_use -> IDENTIFIER .)
    PERCENT         reduce using rule 6 (variable_use -> IDENTIFIER .)
    PLUS            reduce using rule 6 (variable_use -> IDENTIFIER .)
    MINUS           reduce using rule 6 (variable_use -> IDENTIFIER .)
    LEFT_OP         reduce using rule 6 (variable_use -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 6 (variable_use -> IDENTIFIER .)
    LESS            reduce using rule 6 (variable_use -> IDENTIFIER .)
    GREATER         reduce using rule 6 (variable_use -> IDENTIFIER .)
    LE_OP           reduce using rule 6 (variable_use -> IDENTIFIER .)
    GE_OP           reduce using rule 6 (variable_use -> IDENTIFIER .)
    AMP             reduce using rule 6 (variable_use -> IDENTIFIER .)
    CARET           reduce using rule 6 (variable_use -> IDENTIFIER .)
    PIPE            reduce using rule 6 (variable_use -> IDENTIFIER .)
    AND_OP          reduce using rule 6 (variable_use -> IDENTIFIER .)
    QUEST           reduce using rule 6 (variable_use -> IDENTIFIER .)
    OR_OP           reduce using rule 6 (variable_use -> IDENTIFIER .)
    SEMI            reduce using rule 6 (variable_use -> IDENTIFIER .)
    COMMA           reduce using rule 6 (variable_use -> IDENTIFIER .)
    EQ_OP           reduce using rule 6 (variable_use -> IDENTIFIER .)
    NE_OP           reduce using rule 6 (variable_use -> IDENTIFIER .)


state 81

    (192) labeled_statement -> CASE . constant_expression COLON statement
    (80) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    constant_expression            shift and go to state 161
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 99
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 110
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 82

    (193) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 166


state 83

    (203) expression_statement -> expression . SEMI
    (79) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 167
    COMMA           shift and go to state 168


state 84

    (204) selection_statement -> IF . L_PAREN expression R_PAREN statement
    (205) selection_statement -> IF . L_PAREN expression R_PAREN statement ELSE statement

    L_PAREN         shift and go to state 169


state 85

    (5) const_or_parenthesis -> L_PAREN . expression R_PAREN
    (32) cast_expression -> L_PAREN . type_name R_PAREN cast_expression
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (166) type_name -> . specifier_qualifier_list
    (167) type_name -> . specifier_qualifier_list abstract_declarator
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (120) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (121) specifier_qualifier_list -> . type_specifier
    (122) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (123) specifier_qualifier_list -> . type_qualifier
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression                     shift and go to state 170
    type_name                      shift and go to state 171
    cast_expression                shift and go to state 109
    assignment_expression          shift and go to state 92
    specifier_qualifier_list       shift and go to state 172
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    struct_or_union                shift and go to state 34
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 86

    (206) selection_statement -> SWITCH . L_PAREN expression R_PAREN statement

    L_PAREN         shift and go to state 173


state 87

    (207) iteration_statement -> iteration_header . iteration_body
    (211) iteration_body -> . statement
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    iteration_header               shift and go to state 87
    iteration_body                 shift and go to state 174
    statement                      shift and go to state 175
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 88

    (212) jump_statement -> GOTO . IDENTIFIER SEMI

    IDENTIFIER      shift and go to state 176


state 89

    (213) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 177


state 90

    (214) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 178


state 91

    (215) jump_statement -> RETURN . SEMI
    (216) jump_statement -> RETURN . expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    SEMI            shift and go to state 179
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression                     shift and go to state 180
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 92

    (78) expression -> assignment_expression .

    SEMI            reduce using rule 78 (expression -> assignment_expression .)
    COMMA           reduce using rule 78 (expression -> assignment_expression .)
    R_PAREN         reduce using rule 78 (expression -> assignment_expression .)
    COLON           reduce using rule 78 (expression -> assignment_expression .)
    R_SQUARE        reduce using rule 78 (expression -> assignment_expression .)


state 93

    (208) iteration_header -> WHILE . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 181


state 94

    (209) iteration_header -> FOR . L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> FOR . L_PAREN expression_statement expression_statement expression R_PAREN

    L_PAREN         shift and go to state 182


state 95

    (64) assignment_expression -> conditional_expression .

    SEMI            reduce using rule 64 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 64 (assignment_expression -> conditional_expression .)
    R_PAREN         reduce using rule 64 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 64 (assignment_expression -> conditional_expression .)
    R_SQUARE        reduce using rule 64 (assignment_expression -> conditional_expression .)
    R_BRACE         reduce using rule 64 (assignment_expression -> conditional_expression .)


state 96

    (65) assignment_expression -> assignment_lhs . assignment_operator assignment_expression
    (67) assignment_operator -> . EQUAL
    (68) assignment_operator -> . MUL_ASSIGN
    (69) assignment_operator -> . DIV_ASSIGN
    (70) assignment_operator -> . MOD_ASSIGN
    (71) assignment_operator -> . ADD_ASSIGN
    (72) assignment_operator -> . SUB_ASSIGN
    (73) assignment_operator -> . LEFT_ASSIGN
    (74) assignment_operator -> . RIGHT_ASSIGN
    (75) assignment_operator -> . AND_ASSIGN
    (76) assignment_operator -> . XOR_ASSIGN
    (77) assignment_operator -> . OR_ASSIGN

    EQUAL           shift and go to state 184
    MUL_ASSIGN      shift and go to state 185
    DIV_ASSIGN      shift and go to state 186
    MOD_ASSIGN      shift and go to state 187
    ADD_ASSIGN      shift and go to state 188
    SUB_ASSIGN      shift and go to state 189
    LEFT_ASSIGN     shift and go to state 190
    RIGHT_ASSIGN    shift and go to state 191
    AND_ASSIGN      shift and go to state 192
    XOR_ASSIGN      shift and go to state 193
    OR_ASSIGN       shift and go to state 194

    assignment_operator            shift and go to state 183

state 97

    (62) conditional_expression -> logical_or_expression .
    (63) conditional_expression -> logical_or_expression . QUEST expression COLON conditional_expression
    (61) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    SEMI            reduce using rule 62 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 62 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 62 (conditional_expression -> logical_or_expression .)
    R_PAREN         reduce using rule 62 (conditional_expression -> logical_or_expression .)
    R_SQUARE        reduce using rule 62 (conditional_expression -> logical_or_expression .)
    R_BRACE         reduce using rule 62 (conditional_expression -> logical_or_expression .)
    QUEST           shift and go to state 195
    OR_OP           shift and go to state 196


state 98

    (66) assignment_lhs -> unary_expression .
    (31) cast_expression -> unary_expression .

    EQUAL           reduce using rule 66 (assignment_lhs -> unary_expression .)
    MUL_ASSIGN      reduce using rule 66 (assignment_lhs -> unary_expression .)
    DIV_ASSIGN      reduce using rule 66 (assignment_lhs -> unary_expression .)
    MOD_ASSIGN      reduce using rule 66 (assignment_lhs -> unary_expression .)
    ADD_ASSIGN      reduce using rule 66 (assignment_lhs -> unary_expression .)
    SUB_ASSIGN      reduce using rule 66 (assignment_lhs -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 66 (assignment_lhs -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 66 (assignment_lhs -> unary_expression .)
    AND_ASSIGN      reduce using rule 66 (assignment_lhs -> unary_expression .)
    XOR_ASSIGN      reduce using rule 66 (assignment_lhs -> unary_expression .)
    OR_ASSIGN       reduce using rule 66 (assignment_lhs -> unary_expression .)
    STAR            reduce using rule 31 (cast_expression -> unary_expression .)
    SLASH           reduce using rule 31 (cast_expression -> unary_expression .)
    PERCENT         reduce using rule 31 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 31 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 31 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 31 (cast_expression -> unary_expression .)
    LESS            reduce using rule 31 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 31 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    AMP             reduce using rule 31 (cast_expression -> unary_expression .)
    CARET           reduce using rule 31 (cast_expression -> unary_expression .)
    PIPE            reduce using rule 31 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 31 (cast_expression -> unary_expression .)
    QUEST           reduce using rule 31 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 31 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 31 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    R_PAREN         reduce using rule 31 (cast_expression -> unary_expression .)
    COLON           reduce using rule 31 (cast_expression -> unary_expression .)
    R_SQUARE        reduce using rule 31 (cast_expression -> unary_expression .)
    R_BRACE         reduce using rule 31 (cast_expression -> unary_expression .)


state 99

    (60) logical_or_expression -> logical_and_expression .
    (59) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    QUEST           reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    R_PAREN         reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    R_SQUARE        reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    R_BRACE         reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 197


state 100

    (18) unary_expression -> postfix_expression .
    (10) postfix_expression -> postfix_expression . L_SQUARE expression R_SQUARE
    (11) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (12) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (13) postfix_expression -> postfix_expression . INC_OP
    (14) postfix_expression -> postfix_expression . DEC_OP

    EQUAL           reduce using rule 18 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 18 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 18 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 18 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 18 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 18 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 18 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 18 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 18 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 18 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 18 (unary_expression -> postfix_expression .)
    STAR            reduce using rule 18 (unary_expression -> postfix_expression .)
    SLASH           reduce using rule 18 (unary_expression -> postfix_expression .)
    PERCENT         reduce using rule 18 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 18 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 18 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 18 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 18 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 18 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 18 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 18 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 18 (unary_expression -> postfix_expression .)
    AMP             reduce using rule 18 (unary_expression -> postfix_expression .)
    CARET           reduce using rule 18 (unary_expression -> postfix_expression .)
    PIPE            reduce using rule 18 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 18 (unary_expression -> postfix_expression .)
    QUEST           reduce using rule 18 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 18 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 18 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 18 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 18 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 18 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 18 (unary_expression -> postfix_expression .)
    R_PAREN         reduce using rule 18 (unary_expression -> postfix_expression .)
    R_SQUARE        reduce using rule 18 (unary_expression -> postfix_expression .)
    R_BRACE         reduce using rule 18 (unary_expression -> postfix_expression .)
    L_SQUARE        shift and go to state 198
    DOT             shift and go to state 199
    PTR_OP          shift and go to state 200
    INC_OP          shift and go to state 201
    DEC_OP          shift and go to state 202


state 101

    (19) unary_expression -> INC_OP . unary_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 204

    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 102

    (20) unary_expression -> DEC_OP . unary_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 204

    unary_expression               shift and go to state 205
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 103

    (21) unary_expression -> unary_op_before_cast_exp .

    EQUAL           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    MUL_ASSIGN      reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    DIV_ASSIGN      reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    MOD_ASSIGN      reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    ADD_ASSIGN      reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    SUB_ASSIGN      reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    LEFT_ASSIGN     reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    RIGHT_ASSIGN    reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    AND_ASSIGN      reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    XOR_ASSIGN      reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    OR_ASSIGN       reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    STAR            reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    SLASH           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    PERCENT         reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    PLUS            reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    MINUS           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    LEFT_OP         reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    RIGHT_OP        reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    LESS            reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    GREATER         reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    LE_OP           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    GE_OP           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    AMP             reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    CARET           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    PIPE            reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    AND_OP          reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    QUEST           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    OR_OP           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    SEMI            reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    COMMA           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    EQ_OP           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    NE_OP           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    COLON           reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    R_PAREN         reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    R_SQUARE        reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)
    R_BRACE         reduce using rule 21 (unary_expression -> unary_op_before_cast_exp .)


state 104

    (22) unary_expression -> SIZEOF . unary_expression
    (23) unary_expression -> SIZEOF . L_PAREN type_name R_PAREN
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 207
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    unary_expression               shift and go to state 206
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 105

    (58) logical_and_expression -> inclusive_or_expression .
    (57) inclusive_or_expression -> inclusive_or_expression . PIPE exclusive_or_expression

    AND_OP          reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    QUEST           reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    R_PAREN         reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    R_SQUARE        reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    R_BRACE         reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    PIPE            shift and go to state 208


state 106

    (9) postfix_expression -> primary_expression .

    L_SQUARE        reduce using rule 9 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 9 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 9 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 9 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 9 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 9 (postfix_expression -> primary_expression .)
    STAR            reduce using rule 9 (postfix_expression -> primary_expression .)
    SLASH           reduce using rule 9 (postfix_expression -> primary_expression .)
    PERCENT         reduce using rule 9 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 9 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 9 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 9 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 9 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 9 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 9 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    AMP             reduce using rule 9 (postfix_expression -> primary_expression .)
    CARET           reduce using rule 9 (postfix_expression -> primary_expression .)
    PIPE            reduce using rule 9 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    QUEST           reduce using rule 9 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 9 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 9 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 9 (postfix_expression -> primary_expression .)
    R_PAREN         reduce using rule 9 (postfix_expression -> primary_expression .)
    R_SQUARE        reduce using rule 9 (postfix_expression -> primary_expression .)
    R_BRACE         reduce using rule 9 (postfix_expression -> primary_expression .)


state 107

    (15) postfix_expression -> function_call .

    L_SQUARE        reduce using rule 15 (postfix_expression -> function_call .)
    DOT             reduce using rule 15 (postfix_expression -> function_call .)
    PTR_OP          reduce using rule 15 (postfix_expression -> function_call .)
    INC_OP          reduce using rule 15 (postfix_expression -> function_call .)
    DEC_OP          reduce using rule 15 (postfix_expression -> function_call .)
    EQUAL           reduce using rule 15 (postfix_expression -> function_call .)
    MUL_ASSIGN      reduce using rule 15 (postfix_expression -> function_call .)
    DIV_ASSIGN      reduce using rule 15 (postfix_expression -> function_call .)
    MOD_ASSIGN      reduce using rule 15 (postfix_expression -> function_call .)
    ADD_ASSIGN      reduce using rule 15 (postfix_expression -> function_call .)
    SUB_ASSIGN      reduce using rule 15 (postfix_expression -> function_call .)
    LEFT_ASSIGN     reduce using rule 15 (postfix_expression -> function_call .)
    RIGHT_ASSIGN    reduce using rule 15 (postfix_expression -> function_call .)
    AND_ASSIGN      reduce using rule 15 (postfix_expression -> function_call .)
    XOR_ASSIGN      reduce using rule 15 (postfix_expression -> function_call .)
    OR_ASSIGN       reduce using rule 15 (postfix_expression -> function_call .)
    STAR            reduce using rule 15 (postfix_expression -> function_call .)
    SLASH           reduce using rule 15 (postfix_expression -> function_call .)
    PERCENT         reduce using rule 15 (postfix_expression -> function_call .)
    PLUS            reduce using rule 15 (postfix_expression -> function_call .)
    MINUS           reduce using rule 15 (postfix_expression -> function_call .)
    LEFT_OP         reduce using rule 15 (postfix_expression -> function_call .)
    RIGHT_OP        reduce using rule 15 (postfix_expression -> function_call .)
    LESS            reduce using rule 15 (postfix_expression -> function_call .)
    GREATER         reduce using rule 15 (postfix_expression -> function_call .)
    LE_OP           reduce using rule 15 (postfix_expression -> function_call .)
    GE_OP           reduce using rule 15 (postfix_expression -> function_call .)
    AMP             reduce using rule 15 (postfix_expression -> function_call .)
    CARET           reduce using rule 15 (postfix_expression -> function_call .)
    PIPE            reduce using rule 15 (postfix_expression -> function_call .)
    AND_OP          reduce using rule 15 (postfix_expression -> function_call .)
    QUEST           reduce using rule 15 (postfix_expression -> function_call .)
    OR_OP           reduce using rule 15 (postfix_expression -> function_call .)
    SEMI            reduce using rule 15 (postfix_expression -> function_call .)
    COMMA           reduce using rule 15 (postfix_expression -> function_call .)
    EQ_OP           reduce using rule 15 (postfix_expression -> function_call .)
    NE_OP           reduce using rule 15 (postfix_expression -> function_call .)
    COLON           reduce using rule 15 (postfix_expression -> function_call .)
    R_PAREN         reduce using rule 15 (postfix_expression -> function_call .)
    R_SQUARE        reduce using rule 15 (postfix_expression -> function_call .)
    R_BRACE         reduce using rule 15 (postfix_expression -> function_call .)


state 108

    (24) unary_op_before_cast_exp -> unary_operator . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 209
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 109

    (33) multiplicative_expression -> cast_expression .

    STAR            reduce using rule 33 (multiplicative_expression -> cast_expression .)
    SLASH           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    PERCENT         reduce using rule 33 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 33 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 33 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 33 (multiplicative_expression -> cast_expression .)
    LESS            reduce using rule 33 (multiplicative_expression -> cast_expression .)
    GREATER         reduce using rule 33 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    AMP             reduce using rule 33 (multiplicative_expression -> cast_expression .)
    CARET           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    PIPE            reduce using rule 33 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 33 (multiplicative_expression -> cast_expression .)
    QUEST           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 33 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    R_PAREN         reduce using rule 33 (multiplicative_expression -> cast_expression .)
    R_SQUARE        reduce using rule 33 (multiplicative_expression -> cast_expression .)
    R_BRACE         reduce using rule 33 (multiplicative_expression -> cast_expression .)


state 110

    (56) inclusive_or_expression -> exclusive_or_expression .
    (55) exclusive_or_expression -> exclusive_or_expression . CARET and_expression

    PIPE            reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    QUEST           reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    R_PAREN         reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    R_SQUARE        reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    R_BRACE         reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    CARET           shift and go to state 210


state 111

    (1) primary_expression -> variable_use .

    L_SQUARE        reduce using rule 1 (primary_expression -> variable_use .)
    DOT             reduce using rule 1 (primary_expression -> variable_use .)
    PTR_OP          reduce using rule 1 (primary_expression -> variable_use .)
    INC_OP          reduce using rule 1 (primary_expression -> variable_use .)
    DEC_OP          reduce using rule 1 (primary_expression -> variable_use .)
    EQUAL           reduce using rule 1 (primary_expression -> variable_use .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    DIV_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    MOD_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    LEFT_ASSIGN     reduce using rule 1 (primary_expression -> variable_use .)
    RIGHT_ASSIGN    reduce using rule 1 (primary_expression -> variable_use .)
    AND_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    XOR_ASSIGN      reduce using rule 1 (primary_expression -> variable_use .)
    OR_ASSIGN       reduce using rule 1 (primary_expression -> variable_use .)
    STAR            reduce using rule 1 (primary_expression -> variable_use .)
    SLASH           reduce using rule 1 (primary_expression -> variable_use .)
    PERCENT         reduce using rule 1 (primary_expression -> variable_use .)
    PLUS            reduce using rule 1 (primary_expression -> variable_use .)
    MINUS           reduce using rule 1 (primary_expression -> variable_use .)
    LEFT_OP         reduce using rule 1 (primary_expression -> variable_use .)
    RIGHT_OP        reduce using rule 1 (primary_expression -> variable_use .)
    LESS            reduce using rule 1 (primary_expression -> variable_use .)
    GREATER         reduce using rule 1 (primary_expression -> variable_use .)
    LE_OP           reduce using rule 1 (primary_expression -> variable_use .)
    GE_OP           reduce using rule 1 (primary_expression -> variable_use .)
    AMP             reduce using rule 1 (primary_expression -> variable_use .)
    CARET           reduce using rule 1 (primary_expression -> variable_use .)
    PIPE            reduce using rule 1 (primary_expression -> variable_use .)
    AND_OP          reduce using rule 1 (primary_expression -> variable_use .)
    QUEST           reduce using rule 1 (primary_expression -> variable_use .)
    OR_OP           reduce using rule 1 (primary_expression -> variable_use .)
    SEMI            reduce using rule 1 (primary_expression -> variable_use .)
    COMMA           reduce using rule 1 (primary_expression -> variable_use .)
    EQ_OP           reduce using rule 1 (primary_expression -> variable_use .)
    NE_OP           reduce using rule 1 (primary_expression -> variable_use .)
    COLON           reduce using rule 1 (primary_expression -> variable_use .)
    R_PAREN         reduce using rule 1 (primary_expression -> variable_use .)
    R_SQUARE        reduce using rule 1 (primary_expression -> variable_use .)
    R_BRACE         reduce using rule 1 (primary_expression -> variable_use .)


state 112

    (2) primary_expression -> const_or_parenthesis .

    L_SQUARE        reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    DOT             reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    PTR_OP          reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    INC_OP          reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    DEC_OP          reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    EQUAL           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    MUL_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    DIV_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    MOD_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    SUB_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    LEFT_ASSIGN     reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    RIGHT_ASSIGN    reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    AND_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    XOR_ASSIGN      reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    OR_ASSIGN       reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    STAR            reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    SLASH           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    PERCENT         reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    PLUS            reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    MINUS           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    LEFT_OP         reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    RIGHT_OP        reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    LESS            reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    GREATER         reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    LE_OP           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    GE_OP           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    AMP             reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    CARET           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    PIPE            reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    AND_OP          reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    QUEST           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    OR_OP           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    SEMI            reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    COMMA           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    EQ_OP           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    NE_OP           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    COLON           reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    R_PAREN         reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    R_SQUARE        reduce using rule 2 (primary_expression -> const_or_parenthesis .)
    R_BRACE         reduce using rule 2 (primary_expression -> const_or_parenthesis .)


state 113

    (25) unary_operator -> AMP .

    L_PAREN         reduce using rule 25 (unary_operator -> AMP .)
    INC_OP          reduce using rule 25 (unary_operator -> AMP .)
    DEC_OP          reduce using rule 25 (unary_operator -> AMP .)
    SIZEOF          reduce using rule 25 (unary_operator -> AMP .)
    IDENTIFIER      reduce using rule 25 (unary_operator -> AMP .)
    AMP             reduce using rule 25 (unary_operator -> AMP .)
    STAR            reduce using rule 25 (unary_operator -> AMP .)
    PLUS            reduce using rule 25 (unary_operator -> AMP .)
    MINUS           reduce using rule 25 (unary_operator -> AMP .)
    TILDA           reduce using rule 25 (unary_operator -> AMP .)
    EXCLAIM         reduce using rule 25 (unary_operator -> AMP .)
    CONSTANT        reduce using rule 25 (unary_operator -> AMP .)
    STRING_LITERAL  reduce using rule 25 (unary_operator -> AMP .)


state 114

    (26) unary_operator -> STAR .

    L_PAREN         reduce using rule 26 (unary_operator -> STAR .)
    INC_OP          reduce using rule 26 (unary_operator -> STAR .)
    DEC_OP          reduce using rule 26 (unary_operator -> STAR .)
    SIZEOF          reduce using rule 26 (unary_operator -> STAR .)
    IDENTIFIER      reduce using rule 26 (unary_operator -> STAR .)
    AMP             reduce using rule 26 (unary_operator -> STAR .)
    STAR            reduce using rule 26 (unary_operator -> STAR .)
    PLUS            reduce using rule 26 (unary_operator -> STAR .)
    MINUS           reduce using rule 26 (unary_operator -> STAR .)
    TILDA           reduce using rule 26 (unary_operator -> STAR .)
    EXCLAIM         reduce using rule 26 (unary_operator -> STAR .)
    CONSTANT        reduce using rule 26 (unary_operator -> STAR .)
    STRING_LITERAL  reduce using rule 26 (unary_operator -> STAR .)


state 115

    (27) unary_operator -> PLUS .

    L_PAREN         reduce using rule 27 (unary_operator -> PLUS .)
    INC_OP          reduce using rule 27 (unary_operator -> PLUS .)
    DEC_OP          reduce using rule 27 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 27 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 27 (unary_operator -> PLUS .)
    AMP             reduce using rule 27 (unary_operator -> PLUS .)
    STAR            reduce using rule 27 (unary_operator -> PLUS .)
    PLUS            reduce using rule 27 (unary_operator -> PLUS .)
    MINUS           reduce using rule 27 (unary_operator -> PLUS .)
    TILDA           reduce using rule 27 (unary_operator -> PLUS .)
    EXCLAIM         reduce using rule 27 (unary_operator -> PLUS .)
    CONSTANT        reduce using rule 27 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 27 (unary_operator -> PLUS .)


state 116

    (28) unary_operator -> MINUS .

    L_PAREN         reduce using rule 28 (unary_operator -> MINUS .)
    INC_OP          reduce using rule 28 (unary_operator -> MINUS .)
    DEC_OP          reduce using rule 28 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 28 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 28 (unary_operator -> MINUS .)
    AMP             reduce using rule 28 (unary_operator -> MINUS .)
    STAR            reduce using rule 28 (unary_operator -> MINUS .)
    PLUS            reduce using rule 28 (unary_operator -> MINUS .)
    MINUS           reduce using rule 28 (unary_operator -> MINUS .)
    TILDA           reduce using rule 28 (unary_operator -> MINUS .)
    EXCLAIM         reduce using rule 28 (unary_operator -> MINUS .)
    CONSTANT        reduce using rule 28 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 28 (unary_operator -> MINUS .)


state 117

    (29) unary_operator -> TILDA .

    L_PAREN         reduce using rule 29 (unary_operator -> TILDA .)
    INC_OP          reduce using rule 29 (unary_operator -> TILDA .)
    DEC_OP          reduce using rule 29 (unary_operator -> TILDA .)
    SIZEOF          reduce using rule 29 (unary_operator -> TILDA .)
    IDENTIFIER      reduce using rule 29 (unary_operator -> TILDA .)
    AMP             reduce using rule 29 (unary_operator -> TILDA .)
    STAR            reduce using rule 29 (unary_operator -> TILDA .)
    PLUS            reduce using rule 29 (unary_operator -> TILDA .)
    MINUS           reduce using rule 29 (unary_operator -> TILDA .)
    TILDA           reduce using rule 29 (unary_operator -> TILDA .)
    EXCLAIM         reduce using rule 29 (unary_operator -> TILDA .)
    CONSTANT        reduce using rule 29 (unary_operator -> TILDA .)
    STRING_LITERAL  reduce using rule 29 (unary_operator -> TILDA .)


state 118

    (30) unary_operator -> EXCLAIM .

    L_PAREN         reduce using rule 30 (unary_operator -> EXCLAIM .)
    INC_OP          reduce using rule 30 (unary_operator -> EXCLAIM .)
    DEC_OP          reduce using rule 30 (unary_operator -> EXCLAIM .)
    SIZEOF          reduce using rule 30 (unary_operator -> EXCLAIM .)
    IDENTIFIER      reduce using rule 30 (unary_operator -> EXCLAIM .)
    AMP             reduce using rule 30 (unary_operator -> EXCLAIM .)
    STAR            reduce using rule 30 (unary_operator -> EXCLAIM .)
    PLUS            reduce using rule 30 (unary_operator -> EXCLAIM .)
    MINUS           reduce using rule 30 (unary_operator -> EXCLAIM .)
    TILDA           reduce using rule 30 (unary_operator -> EXCLAIM .)
    EXCLAIM         reduce using rule 30 (unary_operator -> EXCLAIM .)
    CONSTANT        reduce using rule 30 (unary_operator -> EXCLAIM .)
    STRING_LITERAL  reduce using rule 30 (unary_operator -> EXCLAIM .)


state 119

    (54) exclusive_or_expression -> and_expression .
    (53) and_expression -> and_expression . AMP equality_expression

    CARET           reduce using rule 54 (exclusive_or_expression -> and_expression .)
    PIPE            reduce using rule 54 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 54 (exclusive_or_expression -> and_expression .)
    QUEST           reduce using rule 54 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 54 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 54 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 54 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 54 (exclusive_or_expression -> and_expression .)
    R_PAREN         reduce using rule 54 (exclusive_or_expression -> and_expression .)
    R_SQUARE        reduce using rule 54 (exclusive_or_expression -> and_expression .)
    R_BRACE         reduce using rule 54 (exclusive_or_expression -> and_expression .)
    AMP             shift and go to state 211


state 120

    (3) const_or_parenthesis -> CONSTANT .

    L_SQUARE        reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    DOT             reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    PTR_OP          reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    INC_OP          reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    DEC_OP          reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    EQUAL           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    MUL_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    DIV_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    MOD_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    ADD_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    SUB_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    LEFT_ASSIGN     reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    AND_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    XOR_ASSIGN      reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    OR_ASSIGN       reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    STAR            reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    SLASH           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    PERCENT         reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    PLUS            reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    MINUS           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    LEFT_OP         reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    RIGHT_OP        reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    LESS            reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    GREATER         reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    LE_OP           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    GE_OP           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    AMP             reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    CARET           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    PIPE            reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    AND_OP          reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    QUEST           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    OR_OP           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    SEMI            reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    COMMA           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    EQ_OP           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    NE_OP           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    COLON           reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    R_PAREN         reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    R_SQUARE        reduce using rule 3 (const_or_parenthesis -> CONSTANT .)
    R_BRACE         reduce using rule 3 (const_or_parenthesis -> CONSTANT .)


state 121

    (4) const_or_parenthesis -> STRING_LITERAL .

    L_SQUARE        reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    DOT             reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    PTR_OP          reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    INC_OP          reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    DEC_OP          reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    EQUAL           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    LEFT_ASSIGN     reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    RIGHT_ASSIGN    reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    STAR            reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    SLASH           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    PERCENT         reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    PLUS            reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    MINUS           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    LEFT_OP         reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    RIGHT_OP        reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    LESS            reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    GREATER         reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    LE_OP           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    GE_OP           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    AMP             reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    CARET           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    PIPE            reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    AND_OP          reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    QUEST           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    OR_OP           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    SEMI            reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    COMMA           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    EQ_OP           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    NE_OP           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    COLON           reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    R_PAREN         reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    R_SQUARE        reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)
    R_BRACE         reduce using rule 4 (const_or_parenthesis -> STRING_LITERAL .)


state 122

    (52) and_expression -> equality_expression .
    (51) equality_exp_lhs -> equality_expression .

    AMP             reduce using rule 52 (and_expression -> equality_expression .)
    CARET           reduce using rule 52 (and_expression -> equality_expression .)
    PIPE            reduce using rule 52 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 52 (and_expression -> equality_expression .)
    QUEST           reduce using rule 52 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 52 (and_expression -> equality_expression .)
    SEMI            reduce using rule 52 (and_expression -> equality_expression .)
    COMMA           reduce using rule 52 (and_expression -> equality_expression .)
    COLON           reduce using rule 52 (and_expression -> equality_expression .)
    R_PAREN         reduce using rule 52 (and_expression -> equality_expression .)
    R_SQUARE        reduce using rule 52 (and_expression -> equality_expression .)
    R_BRACE         reduce using rule 52 (and_expression -> equality_expression .)
    EQ_OP           reduce using rule 51 (equality_exp_lhs -> equality_expression .)
    NE_OP           reduce using rule 51 (equality_exp_lhs -> equality_expression .)


state 123

    (48) equality_expression -> relational_expression .
    (44) relational_expression -> relational_expression . LESS shift_expression
    (45) relational_expression -> relational_expression . GREATER shift_expression
    (46) relational_expression -> relational_expression . LE_OP shift_expression
    (47) relational_expression -> relational_expression . GE_OP shift_expression

    AMP             reduce using rule 48 (equality_expression -> relational_expression .)
    CARET           reduce using rule 48 (equality_expression -> relational_expression .)
    PIPE            reduce using rule 48 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 48 (equality_expression -> relational_expression .)
    QUEST           reduce using rule 48 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 48 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 48 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 48 (equality_expression -> relational_expression .)
    EQ_OP           reduce using rule 48 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 48 (equality_expression -> relational_expression .)
    COLON           reduce using rule 48 (equality_expression -> relational_expression .)
    R_PAREN         reduce using rule 48 (equality_expression -> relational_expression .)
    R_SQUARE        reduce using rule 48 (equality_expression -> relational_expression .)
    R_BRACE         reduce using rule 48 (equality_expression -> relational_expression .)
    LESS            shift and go to state 212
    GREATER         shift and go to state 213
    LE_OP           shift and go to state 214
    GE_OP           shift and go to state 215


state 124

    (49) equality_expression -> equality_exp_lhs . EQ_OP relational_expression
    (50) equality_expression -> equality_exp_lhs . NE_OP relational_expression

    EQ_OP           shift and go to state 216
    NE_OP           shift and go to state 217


state 125

    (43) relational_expression -> shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 43 (relational_expression -> shift_expression .)
    GREATER         reduce using rule 43 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    AMP             reduce using rule 43 (relational_expression -> shift_expression .)
    CARET           reduce using rule 43 (relational_expression -> shift_expression .)
    PIPE            reduce using rule 43 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 43 (relational_expression -> shift_expression .)
    QUEST           reduce using rule 43 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 43 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 43 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    COLON           reduce using rule 43 (relational_expression -> shift_expression .)
    R_PAREN         reduce using rule 43 (relational_expression -> shift_expression .)
    R_SQUARE        reduce using rule 43 (relational_expression -> shift_expression .)
    R_BRACE         reduce using rule 43 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 218
    RIGHT_OP        shift and go to state 219


state 126

    (40) shift_expression -> additive_expression .
    (38) additive_expression -> additive_expression . PLUS multiplicative_expression
    (39) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 40 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 40 (shift_expression -> additive_expression .)
    LESS            reduce using rule 40 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 40 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    AMP             reduce using rule 40 (shift_expression -> additive_expression .)
    CARET           reduce using rule 40 (shift_expression -> additive_expression .)
    PIPE            reduce using rule 40 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 40 (shift_expression -> additive_expression .)
    QUEST           reduce using rule 40 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 40 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 40 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    COLON           reduce using rule 40 (shift_expression -> additive_expression .)
    R_PAREN         reduce using rule 40 (shift_expression -> additive_expression .)
    R_SQUARE        reduce using rule 40 (shift_expression -> additive_expression .)
    R_BRACE         reduce using rule 40 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 220
    MINUS           shift and go to state 221


state 127

    (37) additive_expression -> multiplicative_expression .
    (34) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (35) multiplicative_expression -> multiplicative_expression . SLASH cast_expression
    (36) multiplicative_expression -> multiplicative_expression . PERCENT cast_expression

    PLUS            reduce using rule 37 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 37 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 37 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 37 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 37 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    AMP             reduce using rule 37 (additive_expression -> multiplicative_expression .)
    CARET           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    PIPE            reduce using rule 37 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 37 (additive_expression -> multiplicative_expression .)
    QUEST           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 37 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    R_PAREN         reduce using rule 37 (additive_expression -> multiplicative_expression .)
    R_SQUARE        reduce using rule 37 (additive_expression -> multiplicative_expression .)
    R_BRACE         reduce using rule 37 (additive_expression -> multiplicative_expression .)
    STAR            shift and go to state 222
    SLASH           shift and go to state 223
    PERCENT         shift and go to state 224


state 128

    (141) direct_declarator -> function_declaration .

    EQUAL           reduce using rule 141 (direct_declarator -> function_declaration .)
    SEMI            reduce using rule 141 (direct_declarator -> function_declaration .)
    COMMA           reduce using rule 141 (direct_declarator -> function_declaration .)
    R_PAREN         reduce using rule 141 (direct_declarator -> function_declaration .)
    COLON           reduce using rule 141 (direct_declarator -> function_declaration .)


state 129

    (82) declaration -> declaration_specifiers init_declarator_list SEMI .

    IDENTIFIER      reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEDEF         reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    EXTERN          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STATIC          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AUTO            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    REGISTER        reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOID            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHAR            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SHORT           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LONG            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DOUBLE          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIGNED          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNSIGNED        reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPE_NAME       reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONST           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOLATILE        reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ENUM            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRUCT          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNION           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    L_BRACE         reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    R_BRACE         reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CASE            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEFAULT         reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SWITCH          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    GOTO            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONTINUE        reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INC_OP          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEC_OP          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIZEOF          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AMP             reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STAR            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TILDA           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    EXCLAIM         reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONSTANT        reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRING_LITERAL  reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    L_PAREN         reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 130

    (90) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (91) init_declarator -> . uninitialized_declaration
    (92) init_declarator -> . initialized_declaration
    (94) uninitialized_declaration -> . declarator
    (93) initialized_declaration -> . declarator EQUAL initializer
    (138) declarator -> . pointer direct_declarator
    (139) declarator -> . direct_declarator
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN

    STAR            shift and go to state 55
    IDENTIFIER      shift and go to state 48
    L_PAREN         shift and go to state 49

    init_declarator                shift and go to state 225
    uninitialized_declaration      shift and go to state 50
    initialized_declaration        shift and go to state 51
    declarator                     shift and go to state 52
    pointer                        shift and go to state 53
    direct_declarator              shift and go to state 54
    variable_declaration           shift and go to state 56
    function_declaration           shift and go to state 128
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58

state 131

    (145) variable_declaration1 -> IDENTIFIER L_SQUARE . constant_expression R_SQUARE
    (146) variable_declaration1 -> IDENTIFIER L_SQUARE . R_SQUARE
    (80) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    R_SQUARE        shift and go to state 227
    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    constant_expression            shift and go to state 226
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 99
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 110
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 132

    (147) variable_declaration2 -> L_PAREN declarator . R_PAREN

    R_PAREN         shift and go to state 228


state 133

    (93) initialized_declaration -> declarator EQUAL . initializer
    (180) initializer -> . assignment_expression
    (181) initializer -> . L_BRACE initializer_list R_BRACE
    (182) initializer -> . L_BRACE initializer_list COMMA R_BRACE
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACE         shift and go to state 231
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    initializer                    shift and go to state 229
    assignment_expression          shift and go to state 230
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 134

    (138) declarator -> pointer direct_declarator .

    EQUAL           reduce using rule 138 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 138 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 138 (declarator -> pointer direct_declarator .)
    R_PAREN         reduce using rule 138 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 138 (declarator -> pointer direct_declarator .)


state 135

    (152) pointer -> STAR type_qualifier_list .
    (154) pointer -> STAR type_qualifier_list . pointer
    (156) type_qualifier_list -> type_qualifier_list . type_qualifier
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 152 (pointer -> STAR type_qualifier_list .)
    L_PAREN         reduce using rule 152 (pointer -> STAR type_qualifier_list .)
    L_SQUARE        reduce using rule 152 (pointer -> STAR type_qualifier_list .)
    COMMA           reduce using rule 152 (pointer -> STAR type_qualifier_list .)
    R_PAREN         reduce using rule 152 (pointer -> STAR type_qualifier_list .)
    STAR            shift and go to state 55
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33

    pointer                        shift and go to state 232
    type_qualifier                 shift and go to state 233

state 136

    (153) pointer -> STAR pointer .

    IDENTIFIER      reduce using rule 153 (pointer -> STAR pointer .)
    L_PAREN         reduce using rule 153 (pointer -> STAR pointer .)
    L_SQUARE        reduce using rule 153 (pointer -> STAR pointer .)
    COMMA           reduce using rule 153 (pointer -> STAR pointer .)
    R_PAREN         reduce using rule 153 (pointer -> STAR pointer .)


state 137

    (155) type_qualifier_list -> type_qualifier .

    STAR            reduce using rule 155 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 155 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 155 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 155 (type_qualifier_list -> type_qualifier .)
    L_PAREN         reduce using rule 155 (type_qualifier_list -> type_qualifier .)
    L_SQUARE        reduce using rule 155 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 155 (type_qualifier_list -> type_qualifier .)
    R_PAREN         reduce using rule 155 (type_qualifier_list -> type_qualifier .)


state 138

    (164) identifier_list -> IDENTIFIER .

    R_PAREN         reduce using rule 164 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 164 (identifier_list -> IDENTIFIER .)


state 139

    (148) function_declaration -> IDENTIFIER L_PAREN parameter_type_list . R_PAREN

    R_PAREN         shift and go to state 234


state 140

    (150) function_declaration -> IDENTIFIER L_PAREN R_PAREN .

    L_BRACE         reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    TYPEDEF         reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    EXTERN          reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    STATIC          reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    AUTO            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    REGISTER        reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    VOID            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    CHAR            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    SHORT           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    INT             reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    LONG            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    FLOAT           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    DOUBLE          reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    SIGNED          reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    UNSIGNED        reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    TYPE_NAME       reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    CONST           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    VOLATILE        reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    ENUM            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    STRUCT          reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    UNION           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    EQUAL           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    SEMI            reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    COMMA           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)
    COLON           reduce using rule 150 (function_declaration -> IDENTIFIER L_PAREN R_PAREN .)


state 141

    (149) function_declaration -> IDENTIFIER L_PAREN identifier_list . R_PAREN
    (165) identifier_list -> identifier_list . COMMA IDENTIFIER

    R_PAREN         shift and go to state 235
    COMMA           shift and go to state 236


state 142

    (157) parameter_type_list -> parameter_list .
    (158) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (160) parameter_list -> parameter_list . COMMA parameter_declaration

    R_PAREN         reduce using rule 157 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 237


state 143

    (159) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 159 (parameter_list -> parameter_declaration .)
    R_PAREN         reduce using rule 159 (parameter_list -> parameter_declaration .)


state 144

    (161) parameter_declaration -> declaration_specifiers . declarator
    (162) parameter_declaration -> declaration_specifiers . abstract_declarator
    (163) parameter_declaration -> declaration_specifiers .
    (138) declarator -> . pointer direct_declarator
    (139) declarator -> . direct_declarator
    (168) abstract_declarator -> . pointer
    (169) abstract_declarator -> . direct_abstract_declarator
    (170) abstract_declarator -> . pointer direct_abstract_declarator
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (171) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (172) direct_abstract_declarator -> . L_PAREN R_PAREN
    (173) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (174) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (175) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN

    COMMA           reduce using rule 163 (parameter_declaration -> declaration_specifiers .)
    R_PAREN         reduce using rule 163 (parameter_declaration -> declaration_specifiers .)
    STAR            shift and go to state 55
    L_SQUARE        shift and go to state 242
    L_PAREN         shift and go to state 243
    IDENTIFIER      shift and go to state 48

    declarator                     shift and go to state 238
    abstract_declarator            shift and go to state 239
    pointer                        shift and go to state 240
    direct_declarator              shift and go to state 54
    direct_abstract_declarator     shift and go to state 241
    variable_declaration           shift and go to state 56
    function_declaration           shift and go to state 128
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58

state 145

    (112) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE . struct_declaration_list R_BRACE
    (117) struct_declaration_list -> . struct_declaration
    (118) struct_declaration_list -> . struct_declaration_list struct_declaration
    (119) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (120) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (121) specifier_qualifier_list -> . type_specifier
    (122) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (123) specifier_qualifier_list -> . type_qualifier
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration_list        shift and go to state 244
    struct_declaration             shift and go to state 147
    specifier_qualifier_list       shift and go to state 148
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31

state 146

    (113) struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list . R_BRACE
    (118) struct_declaration_list -> struct_declaration_list . struct_declaration
    (119) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (120) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (121) specifier_qualifier_list -> . type_specifier
    (122) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (123) specifier_qualifier_list -> . type_qualifier
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    R_BRACE         shift and go to state 245
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration             shift and go to state 246
    specifier_qualifier_list       shift and go to state 148
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31

state 147

    (117) struct_declaration_list -> struct_declaration .

    R_BRACE         reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    TYPE_NAME       reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 117 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 117 (struct_declaration_list -> struct_declaration .)


state 148

    (119) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI
    (124) struct_declarator_list -> . struct_declarator
    (125) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (126) struct_declarator -> . declarator
    (127) struct_declarator -> . COLON constant_expression
    (128) struct_declarator -> . declarator COLON constant_expression
    (138) declarator -> . pointer direct_declarator
    (139) declarator -> . direct_declarator
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN

    COLON           shift and go to state 250
    STAR            shift and go to state 55
    IDENTIFIER      shift and go to state 48
    L_PAREN         shift and go to state 49

    struct_declarator_list         shift and go to state 247
    struct_declarator              shift and go to state 248
    declarator                     shift and go to state 249
    pointer                        shift and go to state 53
    direct_declarator              shift and go to state 54
    variable_declaration           shift and go to state 56
    function_declaration           shift and go to state 128
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58

state 149

    (120) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (121) specifier_qualifier_list -> type_specifier .
    (120) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (121) specifier_qualifier_list -> . type_specifier
    (122) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (123) specifier_qualifier_list -> . type_qualifier
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    COLON           reduce using rule 121 (specifier_qualifier_list -> type_specifier .)
    STAR            reduce using rule 121 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 121 (specifier_qualifier_list -> type_specifier .)
    L_PAREN         reduce using rule 121 (specifier_qualifier_list -> type_specifier .)
    L_SQUARE        reduce using rule 121 (specifier_qualifier_list -> type_specifier .)
    R_PAREN         reduce using rule 121 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_specifier                 shift and go to state 149
    specifier_qualifier_list       shift and go to state 251
    type_qualifier                 shift and go to state 150
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 150

    (122) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (123) specifier_qualifier_list -> type_qualifier .
    (120) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (121) specifier_qualifier_list -> . type_specifier
    (122) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (123) specifier_qualifier_list -> . type_qualifier
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    COLON           reduce using rule 123 (specifier_qualifier_list -> type_qualifier .)
    STAR            reduce using rule 123 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 123 (specifier_qualifier_list -> type_qualifier .)
    L_PAREN         reduce using rule 123 (specifier_qualifier_list -> type_qualifier .)
    L_SQUARE        reduce using rule 123 (specifier_qualifier_list -> type_qualifier .)
    R_PAREN         reduce using rule 123 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_qualifier                 shift and go to state 150
    specifier_qualifier_list       shift and go to state 252
    type_specifier                 shift and go to state 149
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 151

    (129) enum_specifier -> ENUM L_BRACE enumerator_list . R_BRACE
    (133) enumerator_list -> enumerator_list . COMMA enumerator

    R_BRACE         shift and go to state 253
    COMMA           shift and go to state 254


state 152

    (132) enumerator_list -> enumerator .

    R_BRACE         reduce using rule 132 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 132 (enumerator_list -> enumerator .)


state 153

    (134) enumerator -> IDENTIFIER .
    (135) enumerator -> IDENTIFIER . EQUAL constant_expression

    R_BRACE         reduce using rule 134 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 134 (enumerator -> IDENTIFIER .)
    EQUAL           shift and go to state 255


state 154

    (130) enum_specifier -> ENUM IDENTIFIER L_BRACE . enumerator_list R_BRACE
    (132) enumerator_list -> . enumerator
    (133) enumerator_list -> . enumerator_list COMMA enumerator
    (134) enumerator -> . IDENTIFIER
    (135) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 153

    enumerator_list                shift and go to state 256
    enumerator                     shift and go to state 152

state 155

    (195) compound_statement -> L_BRACE statement_list R_BRACE .

    IDENTIFIER      reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    TYPEDEF         reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    EXTERN          reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    STATIC          reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    AUTO            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    REGISTER        reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    VOID            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CHAR            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SHORT           reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    INT             reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    LONG            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    FLOAT           reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    DOUBLE          reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SIGNED          reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    UNSIGNED        reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    TYPE_NAME       reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CONST           reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    VOLATILE        reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    ENUM            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    STRUCT          reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    UNION           reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    $end            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    R_BRACE         reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CASE            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    DEFAULT         reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    L_BRACE         reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SEMI            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    IF              reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SWITCH          reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    GOTO            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CONTINUE        reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    BREAK           reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    RETURN          reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    WHILE           reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    FOR             reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    INC_OP          reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    DEC_OP          reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SIZEOF          reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    AMP             reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    STAR            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    PLUS            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    MINUS           reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    TILDA           reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    EXCLAIM         reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CONSTANT        reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    STRING_LITERAL  reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    L_PAREN         reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)
    ELSE            reduce using rule 195 (compound_statement -> L_BRACE statement_list R_BRACE .)


state 156

    (201) statement_list -> statement_list statement .

    R_BRACE         reduce using rule 201 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 201 (statement_list -> statement_list statement .)
    CASE            reduce using rule 201 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 201 (statement_list -> statement_list statement .)
    L_BRACE         reduce using rule 201 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 201 (statement_list -> statement_list statement .)
    IF              reduce using rule 201 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 201 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 201 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 201 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 201 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 201 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 201 (statement_list -> statement_list statement .)
    FOR             reduce using rule 201 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 201 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 201 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 201 (statement_list -> statement_list statement .)
    AMP             reduce using rule 201 (statement_list -> statement_list statement .)
    STAR            reduce using rule 201 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 201 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 201 (statement_list -> statement_list statement .)
    TILDA           reduce using rule 201 (statement_list -> statement_list statement .)
    EXCLAIM         reduce using rule 201 (statement_list -> statement_list statement .)
    CONSTANT        reduce using rule 201 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 201 (statement_list -> statement_list statement .)
    L_PAREN         reduce using rule 201 (statement_list -> statement_list statement .)


state 157

    (196) compound_statement -> L_BRACE declaration_list R_BRACE .

    IDENTIFIER      reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    TYPEDEF         reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    EXTERN          reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    STATIC          reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    AUTO            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    REGISTER        reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    VOID            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    CHAR            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    SHORT           reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    INT             reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    LONG            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    FLOAT           reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    DOUBLE          reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    SIGNED          reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    UNSIGNED        reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    TYPE_NAME       reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    CONST           reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    VOLATILE        reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    ENUM            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    STRUCT          reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    UNION           reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    $end            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    R_BRACE         reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    CASE            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    DEFAULT         reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    L_BRACE         reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    SEMI            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    IF              reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    SWITCH          reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    GOTO            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    CONTINUE        reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    BREAK           reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    RETURN          reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    WHILE           reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    FOR             reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    INC_OP          reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    DEC_OP          reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    SIZEOF          reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    AMP             reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    STAR            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    PLUS            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    MINUS           reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    TILDA           reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    EXCLAIM         reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    CONSTANT        reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    STRING_LITERAL  reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    L_PAREN         reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    ELSE            reduce using rule 196 (compound_statement -> L_BRACE declaration_list R_BRACE .)


state 158

    (197) compound_statement -> L_BRACE declaration_list statement_list . R_BRACE
    (201) statement_list -> statement_list . statement
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACE         shift and go to state 257
    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    statement                      shift and go to state 156
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    iteration_header               shift and go to state 87
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 159

    (191) labeled_statement -> IDENTIFIER COLON . statement
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    statement                      shift and go to state 258
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    iteration_header               shift and go to state 87
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 160

    (7) function_call -> IDENTIFIER L_PAREN . R_PAREN
    (8) function_call -> IDENTIFIER L_PAREN . argument_expression_list R_PAREN
    (16) argument_expression_list -> . assignment_expression
    (17) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_PAREN         shift and go to state 259
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    argument_expression_list       shift and go to state 260
    assignment_expression          shift and go to state 261
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 161

    (192) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 262


state 162

    (80) constant_expression -> conditional_expression .

    COLON           reduce using rule 80 (constant_expression -> conditional_expression .)
    R_SQUARE        reduce using rule 80 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 80 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 80 (constant_expression -> conditional_expression .)
    R_BRACE         reduce using rule 80 (constant_expression -> conditional_expression .)


state 163

    (31) cast_expression -> unary_expression .

    STAR            reduce using rule 31 (cast_expression -> unary_expression .)
    SLASH           reduce using rule 31 (cast_expression -> unary_expression .)
    PERCENT         reduce using rule 31 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 31 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 31 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 31 (cast_expression -> unary_expression .)
    LESS            reduce using rule 31 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 31 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    AMP             reduce using rule 31 (cast_expression -> unary_expression .)
    CARET           reduce using rule 31 (cast_expression -> unary_expression .)
    PIPE            reduce using rule 31 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 31 (cast_expression -> unary_expression .)
    QUEST           reduce using rule 31 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    COLON           reduce using rule 31 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 31 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 31 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 31 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 31 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 31 (cast_expression -> unary_expression .)
    R_PAREN         reduce using rule 31 (cast_expression -> unary_expression .)
    R_SQUARE        reduce using rule 31 (cast_expression -> unary_expression .)
    R_BRACE         reduce using rule 31 (cast_expression -> unary_expression .)


state 164

    (32) cast_expression -> L_PAREN . type_name R_PAREN cast_expression
    (5) const_or_parenthesis -> L_PAREN . expression R_PAREN
    (166) type_name -> . specifier_qualifier_list
    (167) type_name -> . specifier_qualifier_list abstract_declarator
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (120) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (121) specifier_qualifier_list -> . type_specifier
    (122) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (123) specifier_qualifier_list -> . type_qualifier
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    type_name                      shift and go to state 171
    cast_expression                shift and go to state 109
    expression                     shift and go to state 170
    specifier_qualifier_list       shift and go to state 172
    assignment_expression          shift and go to state 92
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    struct_or_union                shift and go to state 34
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 165

    (7) function_call -> IDENTIFIER . L_PAREN R_PAREN
    (8) function_call -> IDENTIFIER . L_PAREN argument_expression_list R_PAREN
    (6) variable_use -> IDENTIFIER .

    L_PAREN         shift and go to state 160
    L_SQUARE        reduce using rule 6 (variable_use -> IDENTIFIER .)
    DOT             reduce using rule 6 (variable_use -> IDENTIFIER .)
    PTR_OP          reduce using rule 6 (variable_use -> IDENTIFIER .)
    INC_OP          reduce using rule 6 (variable_use -> IDENTIFIER .)
    DEC_OP          reduce using rule 6 (variable_use -> IDENTIFIER .)
    STAR            reduce using rule 6 (variable_use -> IDENTIFIER .)
    SLASH           reduce using rule 6 (variable_use -> IDENTIFIER .)
    PERCENT         reduce using rule 6 (variable_use -> IDENTIFIER .)
    PLUS            reduce using rule 6 (variable_use -> IDENTIFIER .)
    MINUS           reduce using rule 6 (variable_use -> IDENTIFIER .)
    LEFT_OP         reduce using rule 6 (variable_use -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 6 (variable_use -> IDENTIFIER .)
    LESS            reduce using rule 6 (variable_use -> IDENTIFIER .)
    GREATER         reduce using rule 6 (variable_use -> IDENTIFIER .)
    LE_OP           reduce using rule 6 (variable_use -> IDENTIFIER .)
    GE_OP           reduce using rule 6 (variable_use -> IDENTIFIER .)
    AMP             reduce using rule 6 (variable_use -> IDENTIFIER .)
    CARET           reduce using rule 6 (variable_use -> IDENTIFIER .)
    PIPE            reduce using rule 6 (variable_use -> IDENTIFIER .)
    AND_OP          reduce using rule 6 (variable_use -> IDENTIFIER .)
    QUEST           reduce using rule 6 (variable_use -> IDENTIFIER .)
    OR_OP           reduce using rule 6 (variable_use -> IDENTIFIER .)
    COLON           reduce using rule 6 (variable_use -> IDENTIFIER .)
    EQ_OP           reduce using rule 6 (variable_use -> IDENTIFIER .)
    NE_OP           reduce using rule 6 (variable_use -> IDENTIFIER .)
    EQUAL           reduce using rule 6 (variable_use -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 6 (variable_use -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 6 (variable_use -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 6 (variable_use -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 6 (variable_use -> IDENTIFIER .)
    R_PAREN         reduce using rule 6 (variable_use -> IDENTIFIER .)
    COMMA           reduce using rule 6 (variable_use -> IDENTIFIER .)
    SEMI            reduce using rule 6 (variable_use -> IDENTIFIER .)
    R_SQUARE        reduce using rule 6 (variable_use -> IDENTIFIER .)
    R_BRACE         reduce using rule 6 (variable_use -> IDENTIFIER .)


state 166

    (193) labeled_statement -> DEFAULT COLON . statement
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    statement                      shift and go to state 263
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    iteration_header               shift and go to state 87
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 167

    (203) expression_statement -> expression SEMI .

    R_BRACE         reduce using rule 203 (expression_statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 203 (expression_statement -> expression SEMI .)
    CASE            reduce using rule 203 (expression_statement -> expression SEMI .)
    DEFAULT         reduce using rule 203 (expression_statement -> expression SEMI .)
    L_BRACE         reduce using rule 203 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 203 (expression_statement -> expression SEMI .)
    IF              reduce using rule 203 (expression_statement -> expression SEMI .)
    SWITCH          reduce using rule 203 (expression_statement -> expression SEMI .)
    GOTO            reduce using rule 203 (expression_statement -> expression SEMI .)
    CONTINUE        reduce using rule 203 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 203 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 203 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 203 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 203 (expression_statement -> expression SEMI .)
    INC_OP          reduce using rule 203 (expression_statement -> expression SEMI .)
    DEC_OP          reduce using rule 203 (expression_statement -> expression SEMI .)
    SIZEOF          reduce using rule 203 (expression_statement -> expression SEMI .)
    AMP             reduce using rule 203 (expression_statement -> expression SEMI .)
    STAR            reduce using rule 203 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 203 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 203 (expression_statement -> expression SEMI .)
    TILDA           reduce using rule 203 (expression_statement -> expression SEMI .)
    EXCLAIM         reduce using rule 203 (expression_statement -> expression SEMI .)
    CONSTANT        reduce using rule 203 (expression_statement -> expression SEMI .)
    STRING_LITERAL  reduce using rule 203 (expression_statement -> expression SEMI .)
    L_PAREN         reduce using rule 203 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 203 (expression_statement -> expression SEMI .)
    R_PAREN         reduce using rule 203 (expression_statement -> expression SEMI .)


state 168

    (79) expression -> expression COMMA . assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    assignment_expression          shift and go to state 264
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 169

    (204) selection_statement -> IF L_PAREN . expression R_PAREN statement
    (205) selection_statement -> IF L_PAREN . expression R_PAREN statement ELSE statement
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression                     shift and go to state 265
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 170

    (5) const_or_parenthesis -> L_PAREN expression . R_PAREN
    (79) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 266
    COMMA           shift and go to state 168


state 171

    (32) cast_expression -> L_PAREN type_name . R_PAREN cast_expression

    R_PAREN         shift and go to state 267


state 172

    (166) type_name -> specifier_qualifier_list .
    (167) type_name -> specifier_qualifier_list . abstract_declarator
    (168) abstract_declarator -> . pointer
    (169) abstract_declarator -> . direct_abstract_declarator
    (170) abstract_declarator -> . pointer direct_abstract_declarator
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (171) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (172) direct_abstract_declarator -> . L_PAREN R_PAREN
    (173) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (174) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (175) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN

    R_PAREN         reduce using rule 166 (type_name -> specifier_qualifier_list .)
    STAR            shift and go to state 55
    L_SQUARE        shift and go to state 242
    L_PAREN         shift and go to state 270

    abstract_declarator            shift and go to state 268
    pointer                        shift and go to state 269
    direct_abstract_declarator     shift and go to state 241

state 173

    (206) selection_statement -> SWITCH L_PAREN . expression R_PAREN statement
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression                     shift and go to state 271
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 174

    (207) iteration_statement -> iteration_header iteration_body .

    R_BRACE         reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    IDENTIFIER      reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    CASE            reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    DEFAULT         reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    L_BRACE         reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    SEMI            reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    IF              reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    SWITCH          reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    GOTO            reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    CONTINUE        reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    BREAK           reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    RETURN          reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    WHILE           reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    FOR             reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    INC_OP          reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    DEC_OP          reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    SIZEOF          reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    AMP             reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    STAR            reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    PLUS            reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    MINUS           reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    TILDA           reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    EXCLAIM         reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    CONSTANT        reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    STRING_LITERAL  reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    L_PAREN         reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)
    ELSE            reduce using rule 207 (iteration_statement -> iteration_header iteration_body .)


state 175

    (211) iteration_body -> statement .

    R_BRACE         reduce using rule 211 (iteration_body -> statement .)
    IDENTIFIER      reduce using rule 211 (iteration_body -> statement .)
    CASE            reduce using rule 211 (iteration_body -> statement .)
    DEFAULT         reduce using rule 211 (iteration_body -> statement .)
    L_BRACE         reduce using rule 211 (iteration_body -> statement .)
    SEMI            reduce using rule 211 (iteration_body -> statement .)
    IF              reduce using rule 211 (iteration_body -> statement .)
    SWITCH          reduce using rule 211 (iteration_body -> statement .)
    GOTO            reduce using rule 211 (iteration_body -> statement .)
    CONTINUE        reduce using rule 211 (iteration_body -> statement .)
    BREAK           reduce using rule 211 (iteration_body -> statement .)
    RETURN          reduce using rule 211 (iteration_body -> statement .)
    WHILE           reduce using rule 211 (iteration_body -> statement .)
    FOR             reduce using rule 211 (iteration_body -> statement .)
    INC_OP          reduce using rule 211 (iteration_body -> statement .)
    DEC_OP          reduce using rule 211 (iteration_body -> statement .)
    SIZEOF          reduce using rule 211 (iteration_body -> statement .)
    AMP             reduce using rule 211 (iteration_body -> statement .)
    STAR            reduce using rule 211 (iteration_body -> statement .)
    PLUS            reduce using rule 211 (iteration_body -> statement .)
    MINUS           reduce using rule 211 (iteration_body -> statement .)
    TILDA           reduce using rule 211 (iteration_body -> statement .)
    EXCLAIM         reduce using rule 211 (iteration_body -> statement .)
    CONSTANT        reduce using rule 211 (iteration_body -> statement .)
    STRING_LITERAL  reduce using rule 211 (iteration_body -> statement .)
    L_PAREN         reduce using rule 211 (iteration_body -> statement .)
    ELSE            reduce using rule 211 (iteration_body -> statement .)


state 176

    (212) jump_statement -> GOTO IDENTIFIER . SEMI

    SEMI            shift and go to state 272


state 177

    (213) jump_statement -> CONTINUE SEMI .

    R_BRACE         reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    IDENTIFIER      reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    L_BRACE         reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    INC_OP          reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    DEC_OP          reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    AMP             reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    STAR            reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    TILDA           reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    EXCLAIM         reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    CONSTANT        reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    L_PAREN         reduce using rule 213 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 213 (jump_statement -> CONTINUE SEMI .)


state 178

    (214) jump_statement -> BREAK SEMI .

    R_BRACE         reduce using rule 214 (jump_statement -> BREAK SEMI .)
    IDENTIFIER      reduce using rule 214 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 214 (jump_statement -> BREAK SEMI .)
    L_BRACE         reduce using rule 214 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 214 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 214 (jump_statement -> BREAK SEMI .)
    INC_OP          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    DEC_OP          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    AMP             reduce using rule 214 (jump_statement -> BREAK SEMI .)
    STAR            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    TILDA           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    EXCLAIM         reduce using rule 214 (jump_statement -> BREAK SEMI .)
    CONSTANT        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 214 (jump_statement -> BREAK SEMI .)
    L_PAREN         reduce using rule 214 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 214 (jump_statement -> BREAK SEMI .)


state 179

    (215) jump_statement -> RETURN SEMI .

    R_BRACE         reduce using rule 215 (jump_statement -> RETURN SEMI .)
    IDENTIFIER      reduce using rule 215 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 215 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 215 (jump_statement -> RETURN SEMI .)
    L_BRACE         reduce using rule 215 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 215 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 215 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 215 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 215 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 215 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 215 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 215 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 215 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 215 (jump_statement -> RETURN SEMI .)
    INC_OP          reduce using rule 215 (jump_statement -> RETURN SEMI .)
    DEC_OP          reduce using rule 215 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 215 (jump_statement -> RETURN SEMI .)
    AMP             reduce using rule 215 (jump_statement -> RETURN SEMI .)
    STAR            reduce using rule 215 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 215 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 215 (jump_statement -> RETURN SEMI .)
    TILDA           reduce using rule 215 (jump_statement -> RETURN SEMI .)
    EXCLAIM         reduce using rule 215 (jump_statement -> RETURN SEMI .)
    CONSTANT        reduce using rule 215 (jump_statement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 215 (jump_statement -> RETURN SEMI .)
    L_PAREN         reduce using rule 215 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 215 (jump_statement -> RETURN SEMI .)


state 180

    (216) jump_statement -> RETURN expression . SEMI
    (79) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 273
    COMMA           shift and go to state 168


state 181

    (208) iteration_header -> WHILE L_PAREN . expression R_PAREN
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression                     shift and go to state 274
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 182

    (209) iteration_header -> FOR L_PAREN . expression_statement expression_statement R_PAREN
    (210) iteration_header -> FOR L_PAREN . expression_statement expression_statement expression R_PAREN
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    SEMI            shift and go to state 79
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression_statement           shift and go to state 275
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 183

    (65) assignment_expression -> assignment_lhs assignment_operator . assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    assignment_lhs                 shift and go to state 96
    assignment_expression          shift and go to state 276
    conditional_expression         shift and go to state 95
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 184

    (67) assignment_operator -> EQUAL .

    INC_OP          reduce using rule 67 (assignment_operator -> EQUAL .)
    DEC_OP          reduce using rule 67 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 67 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 67 (assignment_operator -> EQUAL .)
    AMP             reduce using rule 67 (assignment_operator -> EQUAL .)
    STAR            reduce using rule 67 (assignment_operator -> EQUAL .)
    PLUS            reduce using rule 67 (assignment_operator -> EQUAL .)
    MINUS           reduce using rule 67 (assignment_operator -> EQUAL .)
    TILDA           reduce using rule 67 (assignment_operator -> EQUAL .)
    EXCLAIM         reduce using rule 67 (assignment_operator -> EQUAL .)
    CONSTANT        reduce using rule 67 (assignment_operator -> EQUAL .)
    STRING_LITERAL  reduce using rule 67 (assignment_operator -> EQUAL .)
    L_PAREN         reduce using rule 67 (assignment_operator -> EQUAL .)


state 185

    (68) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    AMP             reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    STAR            reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    PLUS            reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    MINUS           reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    TILDA           reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    EXCLAIM         reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    CONSTANT        reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)
    L_PAREN         reduce using rule 68 (assignment_operator -> MUL_ASSIGN .)


state 186

    (69) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    AMP             reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    STAR            reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    PLUS            reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    MINUS           reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    TILDA           reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    EXCLAIM         reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    CONSTANT        reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)
    L_PAREN         reduce using rule 69 (assignment_operator -> DIV_ASSIGN .)


state 187

    (70) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    AMP             reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    STAR            reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    TILDA           reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    EXCLAIM         reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    CONSTANT        reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)
    L_PAREN         reduce using rule 70 (assignment_operator -> MOD_ASSIGN .)


state 188

    (71) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    AMP             reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    STAR            reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    TILDA           reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    EXCLAIM         reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    CONSTANT        reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)
    L_PAREN         reduce using rule 71 (assignment_operator -> ADD_ASSIGN .)


state 189

    (72) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    AMP             reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    STAR            reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    TILDA           reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    EXCLAIM         reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    CONSTANT        reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)
    L_PAREN         reduce using rule 72 (assignment_operator -> SUB_ASSIGN .)


state 190

    (73) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    AMP             reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    STAR            reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    PLUS            reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    MINUS           reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    TILDA           reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    EXCLAIM         reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    CONSTANT        reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)
    L_PAREN         reduce using rule 73 (assignment_operator -> LEFT_ASSIGN .)


state 191

    (74) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    AMP             reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    STAR            reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    PLUS            reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    MINUS           reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    TILDA           reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    EXCLAIM         reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    CONSTANT        reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    STRING_LITERAL  reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)
    L_PAREN         reduce using rule 74 (assignment_operator -> RIGHT_ASSIGN .)


state 192

    (75) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    AMP             reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    STAR            reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    TILDA           reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    EXCLAIM         reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    CONSTANT        reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 75 (assignment_operator -> AND_ASSIGN .)
    L_PAREN         reduce using rule 75 (assignment_operator -> AND_ASSIGN .)


state 193

    (76) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    AMP             reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    STAR            reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    TILDA           reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    EXCLAIM         reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    CONSTANT        reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)
    L_PAREN         reduce using rule 76 (assignment_operator -> XOR_ASSIGN .)


state 194

    (77) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    AMP             reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    STAR            reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    TILDA           reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    EXCLAIM         reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    CONSTANT        reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 77 (assignment_operator -> OR_ASSIGN .)
    L_PAREN         reduce using rule 77 (assignment_operator -> OR_ASSIGN .)


state 195

    (63) conditional_expression -> logical_or_expression QUEST . expression COLON conditional_expression
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    logical_or_expression          shift and go to state 97
    expression                     shift and go to state 277
    conditional_expression         shift and go to state 95
    assignment_expression          shift and go to state 92
    assignment_lhs                 shift and go to state 96
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 196

    (61) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    logical_and_expression         shift and go to state 278
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 110
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 197

    (59) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    inclusive_or_expression        shift and go to state 279
    exclusive_or_expression        shift and go to state 110
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 198

    (10) postfix_expression -> postfix_expression L_SQUARE . expression R_SQUARE
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    postfix_expression             shift and go to state 100
    expression                     shift and go to state 280
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 199

    (11) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 281


state 200

    (12) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 282


state 201

    (13) postfix_expression -> postfix_expression INC_OP .

    L_SQUARE        reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    DOT             reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    EQUAL           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    STAR            reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    SLASH           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    PERCENT         reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    PLUS            reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    MINUS           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    LESS            reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    GREATER         reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    AMP             reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    CARET           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    PIPE            reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    QUEST           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    SEMI            reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    COMMA           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    COLON           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    R_PAREN         reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    R_SQUARE        reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    R_BRACE         reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)


state 202

    (14) postfix_expression -> postfix_expression DEC_OP .

    L_SQUARE        reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    DOT             reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    EQUAL           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    STAR            reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    SLASH           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    PERCENT         reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    PLUS            reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    MINUS           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    LESS            reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    GREATER         reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    AMP             reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    CARET           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    PIPE            reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    QUEST           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    SEMI            reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    COMMA           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    COLON           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    R_PAREN         reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    R_SQUARE        reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    R_BRACE         reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)


state 203

    (19) unary_expression -> INC_OP unary_expression .

    EQUAL           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    STAR            reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    SLASH           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    PERCENT         reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    PLUS            reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    MINUS           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    LESS            reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    GREATER         reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    AMP             reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    CARET           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    PIPE            reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    QUEST           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    SEMI            reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    COMMA           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    COLON           reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    R_PAREN         reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    R_SQUARE        reduce using rule 19 (unary_expression -> INC_OP unary_expression .)
    R_BRACE         reduce using rule 19 (unary_expression -> INC_OP unary_expression .)


state 204

    (5) const_or_parenthesis -> L_PAREN . expression R_PAREN
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression                     shift and go to state 170
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 205

    (20) unary_expression -> DEC_OP unary_expression .

    EQUAL           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    STAR            reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    SLASH           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    PERCENT         reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    PLUS            reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    MINUS           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    LESS            reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    GREATER         reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    AMP             reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    CARET           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    PIPE            reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    QUEST           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    SEMI            reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    COMMA           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    COLON           reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    R_PAREN         reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    R_SQUARE        reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)
    R_BRACE         reduce using rule 20 (unary_expression -> DEC_OP unary_expression .)


state 206

    (22) unary_expression -> SIZEOF unary_expression .

    EQUAL           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    STAR            reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    SLASH           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    PERCENT         reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    LESS            reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    GREATER         reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    AMP             reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    CARET           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    PIPE            reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    QUEST           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    R_PAREN         reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    R_SQUARE        reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)
    R_BRACE         reduce using rule 22 (unary_expression -> SIZEOF unary_expression .)


state 207

    (23) unary_expression -> SIZEOF L_PAREN . type_name R_PAREN
    (5) const_or_parenthesis -> L_PAREN . expression R_PAREN
    (166) type_name -> . specifier_qualifier_list
    (167) type_name -> . specifier_qualifier_list abstract_declarator
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (120) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (121) specifier_qualifier_list -> . type_specifier
    (122) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (123) specifier_qualifier_list -> . type_qualifier
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    type_name                      shift and go to state 283
    expression                     shift and go to state 170
    specifier_qualifier_list       shift and go to state 172
    assignment_expression          shift and go to state 92
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    struct_or_union                shift and go to state 34
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 208

    (57) inclusive_or_expression -> inclusive_or_expression PIPE . exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    exclusive_or_expression        shift and go to state 284
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 209

    (24) unary_op_before_cast_exp -> unary_operator cast_expression .

    EQUAL           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    STAR            reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    SLASH           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    PERCENT         reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    PLUS            reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    MINUS           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    LESS            reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    GREATER         reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    LE_OP           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    GE_OP           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    AMP             reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    CARET           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    PIPE            reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    AND_OP          reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    QUEST           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    OR_OP           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    SEMI            reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    COMMA           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    NE_OP           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    COLON           reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    R_PAREN         reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    R_SQUARE        reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)
    R_BRACE         reduce using rule 24 (unary_op_before_cast_exp -> unary_operator cast_expression .)


state 210

    (55) exclusive_or_expression -> exclusive_or_expression CARET . and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    and_expression                 shift and go to state 285
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 211

    (53) and_expression -> and_expression AMP . equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    equality_expression            shift and go to state 286
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 212

    (44) relational_expression -> relational_expression LESS . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    shift_expression               shift and go to state 287
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 213

    (45) relational_expression -> relational_expression GREATER . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    shift_expression               shift and go to state 288
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 214

    (46) relational_expression -> relational_expression LE_OP . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    shift_expression               shift and go to state 289
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 215

    (47) relational_expression -> relational_expression GE_OP . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    shift_expression               shift and go to state 290
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 216

    (49) equality_expression -> equality_exp_lhs EQ_OP . relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    relational_expression          shift and go to state 291
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 217

    (50) equality_expression -> equality_exp_lhs NE_OP . relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    relational_expression          shift and go to state 292
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 218

    (41) shift_expression -> shift_expression LEFT_OP . additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    additive_expression            shift and go to state 293
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 219

    (42) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    additive_expression            shift and go to state 294
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 220

    (38) additive_expression -> additive_expression PLUS . multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    multiplicative_expression      shift and go to state 295
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 221

    (39) additive_expression -> additive_expression MINUS . multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    multiplicative_expression      shift and go to state 296
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 222

    (34) multiplicative_expression -> multiplicative_expression STAR . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    cast_expression                shift and go to state 297
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 223

    (35) multiplicative_expression -> multiplicative_expression SLASH . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    cast_expression                shift and go to state 298
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 224

    (36) multiplicative_expression -> multiplicative_expression PERCENT . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    cast_expression                shift and go to state 299
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 225

    (90) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 90 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 90 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 226

    (145) variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression . R_SQUARE

    R_SQUARE        shift and go to state 300


state 227

    (146) variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .

    EQUAL           reduce using rule 146 (variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .)
    SEMI            reduce using rule 146 (variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .)
    COMMA           reduce using rule 146 (variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .)
    R_PAREN         reduce using rule 146 (variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .)
    COLON           reduce using rule 146 (variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE .)


state 228

    (147) variable_declaration2 -> L_PAREN declarator R_PAREN .

    EQUAL           reduce using rule 147 (variable_declaration2 -> L_PAREN declarator R_PAREN .)
    SEMI            reduce using rule 147 (variable_declaration2 -> L_PAREN declarator R_PAREN .)
    COMMA           reduce using rule 147 (variable_declaration2 -> L_PAREN declarator R_PAREN .)
    R_PAREN         reduce using rule 147 (variable_declaration2 -> L_PAREN declarator R_PAREN .)
    COLON           reduce using rule 147 (variable_declaration2 -> L_PAREN declarator R_PAREN .)


state 229

    (93) initialized_declaration -> declarator EQUAL initializer .

    SEMI            reduce using rule 93 (initialized_declaration -> declarator EQUAL initializer .)
    COMMA           reduce using rule 93 (initialized_declaration -> declarator EQUAL initializer .)


state 230

    (180) initializer -> assignment_expression .

    SEMI            reduce using rule 180 (initializer -> assignment_expression .)
    COMMA           reduce using rule 180 (initializer -> assignment_expression .)
    R_BRACE         reduce using rule 180 (initializer -> assignment_expression .)


state 231

    (181) initializer -> L_BRACE . initializer_list R_BRACE
    (182) initializer -> L_BRACE . initializer_list COMMA R_BRACE
    (183) initializer_list -> . initializer
    (184) initializer_list -> . initializer_list COMMA initializer
    (180) initializer -> . assignment_expression
    (181) initializer -> . L_BRACE initializer_list R_BRACE
    (182) initializer -> . L_BRACE initializer_list COMMA R_BRACE
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACE         shift and go to state 231
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    initializer_list               shift and go to state 301
    initializer                    shift and go to state 302
    assignment_expression          shift and go to state 230
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 232

    (154) pointer -> STAR type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 154 (pointer -> STAR type_qualifier_list pointer .)
    L_PAREN         reduce using rule 154 (pointer -> STAR type_qualifier_list pointer .)
    L_SQUARE        reduce using rule 154 (pointer -> STAR type_qualifier_list pointer .)
    COMMA           reduce using rule 154 (pointer -> STAR type_qualifier_list pointer .)
    R_PAREN         reduce using rule 154 (pointer -> STAR type_qualifier_list pointer .)


state 233

    (156) type_qualifier_list -> type_qualifier_list type_qualifier .

    STAR            reduce using rule 156 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 156 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 156 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 156 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    L_PAREN         reduce using rule 156 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    L_SQUARE        reduce using rule 156 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 156 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    R_PAREN         reduce using rule 156 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 234

    (148) function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .

    L_BRACE         reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    TYPEDEF         reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    EXTERN          reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    STATIC          reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    AUTO            reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    REGISTER        reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    VOID            reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    CHAR            reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    SHORT           reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    INT             reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    LONG            reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    FLOAT           reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    DOUBLE          reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    SIGNED          reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    UNSIGNED        reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    TYPE_NAME       reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    CONST           reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    VOLATILE        reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    ENUM            reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    STRUCT          reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    UNION           reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    EQUAL           reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    SEMI            reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    COMMA           reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    R_PAREN         reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)
    COLON           reduce using rule 148 (function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN .)


state 235

    (149) function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .

    L_BRACE         reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    TYPEDEF         reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    EXTERN          reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    STATIC          reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    AUTO            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    REGISTER        reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    VOID            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    CHAR            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    SHORT           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    INT             reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    LONG            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    FLOAT           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    DOUBLE          reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    SIGNED          reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    UNSIGNED        reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    TYPE_NAME       reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    CONST           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    VOLATILE        reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    ENUM            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    STRUCT          reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    UNION           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    EQUAL           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    SEMI            reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    COMMA           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    R_PAREN         reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)
    COLON           reduce using rule 149 (function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN .)


state 236

    (165) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 303


state 237

    (158) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (160) parameter_list -> parameter_list COMMA . parameter_declaration
    (161) parameter_declaration -> . declaration_specifiers declarator
    (162) parameter_declaration -> . declaration_specifiers abstract_declarator
    (163) parameter_declaration -> . declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 304
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    parameter_declaration          shift and go to state 305
    declaration_specifiers         shift and go to state 144
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 238

    (161) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 161 (parameter_declaration -> declaration_specifiers declarator .)
    R_PAREN         reduce using rule 161 (parameter_declaration -> declaration_specifiers declarator .)


state 239

    (162) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 162 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    R_PAREN         reduce using rule 162 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 240

    (138) declarator -> pointer . direct_declarator
    (168) abstract_declarator -> pointer .
    (170) abstract_declarator -> pointer . direct_abstract_declarator
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (171) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (172) direct_abstract_declarator -> . L_PAREN R_PAREN
    (173) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (174) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (175) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN

    COMMA           reduce using rule 168 (abstract_declarator -> pointer .)
    R_PAREN         reduce using rule 168 (abstract_declarator -> pointer .)
    L_SQUARE        shift and go to state 242
    L_PAREN         shift and go to state 243
    IDENTIFIER      shift and go to state 48

    direct_declarator              shift and go to state 134
    direct_abstract_declarator     shift and go to state 306
    variable_declaration           shift and go to state 56
    function_declaration           shift and go to state 128
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58

state 241

    (169) abstract_declarator -> direct_abstract_declarator .
    (176) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN R_PAREN
    (177) direct_abstract_declarator -> direct_abstract_declarator . L_SQUARE R_SQUARE
    (178) direct_abstract_declarator -> direct_abstract_declarator . L_SQUARE constant_expression R_SQUARE
    (179) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN parameter_type_list R_PAREN

    COMMA           reduce using rule 169 (abstract_declarator -> direct_abstract_declarator .)
    R_PAREN         reduce using rule 169 (abstract_declarator -> direct_abstract_declarator .)
    L_PAREN         shift and go to state 307
    L_SQUARE        shift and go to state 308


state 242

    (171) direct_abstract_declarator -> L_SQUARE . R_SQUARE
    (173) direct_abstract_declarator -> L_SQUARE . constant_expression R_SQUARE
    (80) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    R_SQUARE        shift and go to state 309
    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    constant_expression            shift and go to state 310
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 99
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 110
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 243

    (172) direct_abstract_declarator -> L_PAREN . R_PAREN
    (174) direct_abstract_declarator -> L_PAREN . abstract_declarator R_PAREN
    (175) direct_abstract_declarator -> L_PAREN . parameter_type_list R_PAREN
    (147) variable_declaration2 -> L_PAREN . declarator R_PAREN
    (168) abstract_declarator -> . pointer
    (169) abstract_declarator -> . direct_abstract_declarator
    (170) abstract_declarator -> . pointer direct_abstract_declarator
    (157) parameter_type_list -> . parameter_list
    (158) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (138) declarator -> . pointer direct_declarator
    (139) declarator -> . direct_declarator
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (171) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (172) direct_abstract_declarator -> . L_PAREN R_PAREN
    (173) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (174) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (175) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (159) parameter_list -> . parameter_declaration
    (160) parameter_list -> . parameter_list COMMA parameter_declaration
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (161) parameter_declaration -> . declaration_specifiers declarator
    (162) parameter_declaration -> . declaration_specifiers abstract_declarator
    (163) parameter_declaration -> . declaration_specifiers
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    R_PAREN         shift and go to state 311
    STAR            shift and go to state 55
    L_SQUARE        shift and go to state 242
    L_PAREN         shift and go to state 243
    IDENTIFIER      shift and go to state 48
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    abstract_declarator            shift and go to state 312
    parameter_type_list            shift and go to state 313
    declarator                     shift and go to state 132
    pointer                        shift and go to state 314
    direct_abstract_declarator     shift and go to state 241
    parameter_list                 shift and go to state 142
    direct_declarator              shift and go to state 54
    parameter_declaration          shift and go to state 143
    variable_declaration           shift and go to state 56
    function_declaration           shift and go to state 128
    declaration_specifiers         shift and go to state 144
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 244

    (112) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list . R_BRACE
    (118) struct_declaration_list -> struct_declaration_list . struct_declaration
    (119) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (120) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (121) specifier_qualifier_list -> . type_specifier
    (122) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (123) specifier_qualifier_list -> . type_qualifier
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    R_BRACE         shift and go to state 315
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration             shift and go to state 246
    specifier_qualifier_list       shift and go to state 148
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31

state 245

    (113) struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .

    TYPEDEF         reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    EXTERN          reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    STATIC          reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    AUTO            reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    REGISTER        reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    VOID            reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    CHAR            reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    SHORT           reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    INT             reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    LONG            reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    FLOAT           reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    DOUBLE          reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    SIGNED          reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    UNSIGNED        reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    TYPE_NAME       reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    CONST           reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    VOLATILE        reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    ENUM            reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    STRUCT          reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    UNION           reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    SEMI            reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    IDENTIFIER      reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    STAR            reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    L_PAREN         reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    L_SQUARE        reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    COMMA           reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    R_PAREN         reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    COLON           reduce using rule 113 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)


state 246

    (118) struct_declaration_list -> struct_declaration_list struct_declaration .

    R_BRACE         reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPE_NAME       reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 118 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 247

    (119) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI
    (125) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            shift and go to state 316
    COMMA           shift and go to state 317


state 248

    (124) struct_declarator_list -> struct_declarator .

    SEMI            reduce using rule 124 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 124 (struct_declarator_list -> struct_declarator .)


state 249

    (126) struct_declarator -> declarator .
    (128) struct_declarator -> declarator . COLON constant_expression

    SEMI            reduce using rule 126 (struct_declarator -> declarator .)
    COMMA           reduce using rule 126 (struct_declarator -> declarator .)
    COLON           shift and go to state 318


state 250

    (127) struct_declarator -> COLON . constant_expression
    (80) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    constant_expression            shift and go to state 319
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 99
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 110
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 251

    (120) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    COLON           reduce using rule 120 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    STAR            reduce using rule 120 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 120 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    L_PAREN         reduce using rule 120 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    L_SQUARE        reduce using rule 120 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    R_PAREN         reduce using rule 120 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 252

    (122) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    COLON           reduce using rule 122 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    STAR            reduce using rule 122 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 122 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    L_PAREN         reduce using rule 122 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    L_SQUARE        reduce using rule 122 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    R_PAREN         reduce using rule 122 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 253

    (129) enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .

    TYPEDEF         reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    EXTERN          reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    STATIC          reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    AUTO            reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    REGISTER        reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    VOID            reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    CHAR            reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    SHORT           reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    INT             reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    LONG            reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    FLOAT           reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    DOUBLE          reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    SIGNED          reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    UNSIGNED        reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    TYPE_NAME       reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    CONST           reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    VOLATILE        reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    ENUM            reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    STRUCT          reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    UNION           reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    SEMI            reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    IDENTIFIER      reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    STAR            reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    L_PAREN         reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    L_SQUARE        reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    COMMA           reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    R_PAREN         reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    COLON           reduce using rule 129 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)


state 254

    (133) enumerator_list -> enumerator_list COMMA . enumerator
    (134) enumerator -> . IDENTIFIER
    (135) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 153

    enumerator                     shift and go to state 320

state 255

    (135) enumerator -> IDENTIFIER EQUAL . constant_expression
    (80) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    constant_expression            shift and go to state 321
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 99
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 110
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 256

    (130) enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list . R_BRACE
    (133) enumerator_list -> enumerator_list . COMMA enumerator

    R_BRACE         shift and go to state 322
    COMMA           shift and go to state 254


state 257

    (197) compound_statement -> L_BRACE declaration_list statement_list R_BRACE .

    IDENTIFIER      reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    TYPEDEF         reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    EXTERN          reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    STATIC          reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    AUTO            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    REGISTER        reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    VOID            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    CHAR            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    SHORT           reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    INT             reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    LONG            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    FLOAT           reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    DOUBLE          reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    SIGNED          reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    UNSIGNED        reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    TYPE_NAME       reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    CONST           reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    VOLATILE        reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    ENUM            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    STRUCT          reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    UNION           reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    $end            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    R_BRACE         reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    CASE            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    DEFAULT         reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    L_BRACE         reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    SEMI            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    IF              reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    SWITCH          reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    GOTO            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    CONTINUE        reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    BREAK           reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    RETURN          reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    WHILE           reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    FOR             reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    INC_OP          reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    DEC_OP          reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    SIZEOF          reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    AMP             reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    STAR            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    PLUS            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    MINUS           reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    TILDA           reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    EXCLAIM         reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    CONSTANT        reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    STRING_LITERAL  reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    L_PAREN         reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    ELSE            reduce using rule 197 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)


state 258

    (191) labeled_statement -> IDENTIFIER COLON statement .

    R_BRACE         reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    L_BRACE         reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMI            reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    INC_OP          reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    DEC_OP          reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    AMP             reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    STAR            reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    TILDA           reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    EXCLAIM         reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    CONSTANT        reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_LITERAL  reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    L_PAREN         reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 191 (labeled_statement -> IDENTIFIER COLON statement .)


state 259

    (7) function_call -> IDENTIFIER L_PAREN R_PAREN .

    L_SQUARE        reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    DOT             reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    PTR_OP          reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    INC_OP          reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    DEC_OP          reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    EQUAL           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    MUL_ASSIGN      reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    DIV_ASSIGN      reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    MOD_ASSIGN      reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    ADD_ASSIGN      reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    SUB_ASSIGN      reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    LEFT_ASSIGN     reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    RIGHT_ASSIGN    reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    AND_ASSIGN      reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    XOR_ASSIGN      reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    OR_ASSIGN       reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    STAR            reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    SLASH           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    PERCENT         reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    PLUS            reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    MINUS           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    LEFT_OP         reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    RIGHT_OP        reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    LESS            reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    GREATER         reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    LE_OP           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    GE_OP           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    AMP             reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    CARET           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    PIPE            reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    AND_OP          reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    QUEST           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    OR_OP           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    SEMI            reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    COMMA           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    EQ_OP           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    NE_OP           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    COLON           reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    R_SQUARE        reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)
    R_BRACE         reduce using rule 7 (function_call -> IDENTIFIER L_PAREN R_PAREN .)


state 260

    (8) function_call -> IDENTIFIER L_PAREN argument_expression_list . R_PAREN
    (17) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    R_PAREN         shift and go to state 323
    COMMA           shift and go to state 324


state 261

    (16) argument_expression_list -> assignment_expression .

    R_PAREN         reduce using rule 16 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 16 (argument_expression_list -> assignment_expression .)


state 262

    (192) labeled_statement -> CASE constant_expression COLON . statement
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    statement                      shift and go to state 325
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    iteration_header               shift and go to state 87
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 263

    (193) labeled_statement -> DEFAULT COLON statement .

    R_BRACE         reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    L_BRACE         reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    INC_OP          reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    DEC_OP          reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    AMP             reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    STAR            reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    TILDA           reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    EXCLAIM         reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    CONSTANT        reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    L_PAREN         reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 193 (labeled_statement -> DEFAULT COLON statement .)


state 264

    (79) expression -> expression COMMA assignment_expression .

    SEMI            reduce using rule 79 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 79 (expression -> expression COMMA assignment_expression .)
    R_PAREN         reduce using rule 79 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 79 (expression -> expression COMMA assignment_expression .)
    R_SQUARE        reduce using rule 79 (expression -> expression COMMA assignment_expression .)


state 265

    (204) selection_statement -> IF L_PAREN expression . R_PAREN statement
    (205) selection_statement -> IF L_PAREN expression . R_PAREN statement ELSE statement
    (79) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 326
    COMMA           shift and go to state 168


state 266

    (5) const_or_parenthesis -> L_PAREN expression R_PAREN .

    L_SQUARE        reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    DOT             reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    PTR_OP          reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    INC_OP          reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    DEC_OP          reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    EQUAL           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    MUL_ASSIGN      reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    DIV_ASSIGN      reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    MOD_ASSIGN      reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    ADD_ASSIGN      reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    SUB_ASSIGN      reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    LEFT_ASSIGN     reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    RIGHT_ASSIGN    reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    AND_ASSIGN      reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    XOR_ASSIGN      reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    OR_ASSIGN       reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    STAR            reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    SLASH           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    PERCENT         reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    PLUS            reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    MINUS           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    LEFT_OP         reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    RIGHT_OP        reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    LESS            reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    GREATER         reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    LE_OP           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    GE_OP           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    AMP             reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    CARET           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    PIPE            reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    AND_OP          reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    QUEST           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    OR_OP           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    SEMI            reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    COMMA           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    EQ_OP           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    NE_OP           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    COLON           reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    R_PAREN         reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    R_SQUARE        reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)
    R_BRACE         reduce using rule 5 (const_or_parenthesis -> L_PAREN expression R_PAREN .)


state 267

    (32) cast_expression -> L_PAREN type_name R_PAREN . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    cast_expression                shift and go to state 327
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 268

    (167) type_name -> specifier_qualifier_list abstract_declarator .

    R_PAREN         reduce using rule 167 (type_name -> specifier_qualifier_list abstract_declarator .)


state 269

    (168) abstract_declarator -> pointer .
    (170) abstract_declarator -> pointer . direct_abstract_declarator
    (171) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (172) direct_abstract_declarator -> . L_PAREN R_PAREN
    (173) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (174) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (175) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN

    R_PAREN         reduce using rule 168 (abstract_declarator -> pointer .)
    L_SQUARE        shift and go to state 242
    L_PAREN         shift and go to state 270

    direct_abstract_declarator     shift and go to state 306

state 270

    (172) direct_abstract_declarator -> L_PAREN . R_PAREN
    (174) direct_abstract_declarator -> L_PAREN . abstract_declarator R_PAREN
    (175) direct_abstract_declarator -> L_PAREN . parameter_type_list R_PAREN
    (168) abstract_declarator -> . pointer
    (169) abstract_declarator -> . direct_abstract_declarator
    (170) abstract_declarator -> . pointer direct_abstract_declarator
    (157) parameter_type_list -> . parameter_list
    (158) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (171) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (172) direct_abstract_declarator -> . L_PAREN R_PAREN
    (173) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (174) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (175) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (159) parameter_list -> . parameter_declaration
    (160) parameter_list -> . parameter_list COMMA parameter_declaration
    (161) parameter_declaration -> . declaration_specifiers declarator
    (162) parameter_declaration -> . declaration_specifiers abstract_declarator
    (163) parameter_declaration -> . declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    R_PAREN         shift and go to state 311
    STAR            shift and go to state 55
    L_SQUARE        shift and go to state 242
    L_PAREN         shift and go to state 270
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    abstract_declarator            shift and go to state 312
    parameter_type_list            shift and go to state 313
    pointer                        shift and go to state 269
    direct_abstract_declarator     shift and go to state 241
    parameter_list                 shift and go to state 142
    parameter_declaration          shift and go to state 143
    declaration_specifiers         shift and go to state 144
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 271

    (206) selection_statement -> SWITCH L_PAREN expression . R_PAREN statement
    (79) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 328
    COMMA           shift and go to state 168


state 272

    (212) jump_statement -> GOTO IDENTIFIER SEMI .

    R_BRACE         reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CASE            reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEFAULT         reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    L_BRACE         reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SEMI            reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IF              reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SWITCH          reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    GOTO            reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CONTINUE        reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BREAK           reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    RETURN          reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    WHILE           reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FOR             reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INC_OP          reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEC_OP          reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SIZEOF          reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    AMP             reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STAR            reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    PLUS            reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    MINUS           reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    TILDA           reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    EXCLAIM         reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CONSTANT        reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STRING_LITERAL  reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    L_PAREN         reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ELSE            reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI .)


state 273

    (216) jump_statement -> RETURN expression SEMI .

    R_BRACE         reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    IDENTIFIER      reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    L_BRACE         reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    INC_OP          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    DEC_OP          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    AMP             reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    STAR            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    TILDA           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    EXCLAIM         reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    CONSTANT        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    L_PAREN         reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)


state 274

    (208) iteration_header -> WHILE L_PAREN expression . R_PAREN
    (79) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 329
    COMMA           shift and go to state 168


state 275

    (209) iteration_header -> FOR L_PAREN expression_statement . expression_statement R_PAREN
    (210) iteration_header -> FOR L_PAREN expression_statement . expression_statement expression R_PAREN
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    SEMI            shift and go to state 79
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression_statement           shift and go to state 330
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 276

    (65) assignment_expression -> assignment_lhs assignment_operator assignment_expression .

    SEMI            reduce using rule 65 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)
    COMMA           reduce using rule 65 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)
    R_PAREN         reduce using rule 65 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)
    COLON           reduce using rule 65 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)
    R_SQUARE        reduce using rule 65 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)
    R_BRACE         reduce using rule 65 (assignment_expression -> assignment_lhs assignment_operator assignment_expression .)


state 277

    (63) conditional_expression -> logical_or_expression QUEST expression . COLON conditional_expression
    (79) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 331
    COMMA           shift and go to state 168


state 278

    (61) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (59) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    QUEST           reduce using rule 61 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 61 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    SEMI            reduce using rule 61 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COMMA           reduce using rule 61 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COLON           reduce using rule 61 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    R_PAREN         reduce using rule 61 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    R_SQUARE        reduce using rule 61 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    R_BRACE         reduce using rule 61 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 197


state 279

    (59) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (57) inclusive_or_expression -> inclusive_or_expression . PIPE exclusive_or_expression

    AND_OP          reduce using rule 59 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    QUEST           reduce using rule 59 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 59 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    SEMI            reduce using rule 59 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COMMA           reduce using rule 59 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COLON           reduce using rule 59 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    R_PAREN         reduce using rule 59 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    R_SQUARE        reduce using rule 59 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    R_BRACE         reduce using rule 59 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    PIPE            shift and go to state 208


state 280

    (10) postfix_expression -> postfix_expression L_SQUARE expression . R_SQUARE
    (79) expression -> expression . COMMA assignment_expression

    R_SQUARE        shift and go to state 332
    COMMA           shift and go to state 168


state 281

    (11) postfix_expression -> postfix_expression DOT IDENTIFIER .

    L_SQUARE        reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PTR_OP          reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INC_OP          reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DEC_OP          reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUAL           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    STAR            reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SLASH           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PERCENT         reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_OP         reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_OP        reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS            reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER         reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LE_OP           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GE_OP           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AMP             reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CARET           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PIPE            reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_OP          reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUEST           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_OP           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMI            reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ_OP           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NE_OP           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_PAREN         reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_SQUARE        reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_BRACE         reduce using rule 11 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 282

    (12) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    L_SQUARE        reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DOT             reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQUAL           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    STAR            reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SLASH           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PERCENT         reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PLUS            reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MINUS           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LESS            reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GREATER         reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AMP             reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    CARET           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PIPE            reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    QUEST           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SEMI            reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COMMA           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COLON           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    R_PAREN         reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    R_SQUARE        reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    R_BRACE         reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 283

    (23) unary_expression -> SIZEOF L_PAREN type_name . R_PAREN

    R_PAREN         shift and go to state 333


state 284

    (57) inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .
    (55) exclusive_or_expression -> exclusive_or_expression . CARET and_expression

    PIPE            reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    AND_OP          reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    QUEST           reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    OR_OP           reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    SEMI            reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    COMMA           reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    COLON           reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    R_PAREN         reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    R_SQUARE        reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    R_BRACE         reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    CARET           shift and go to state 210


state 285

    (55) exclusive_or_expression -> exclusive_or_expression CARET and_expression .
    (53) and_expression -> and_expression . AMP equality_expression

    CARET           reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    PIPE            reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    AND_OP          reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    QUEST           reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    OR_OP           reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    SEMI            reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    COMMA           reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    COLON           reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    R_PAREN         reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    R_SQUARE        reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    R_BRACE         reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    AMP             shift and go to state 211


state 286

    (53) and_expression -> and_expression AMP equality_expression .
    (51) equality_exp_lhs -> equality_expression .

    AMP             reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    CARET           reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    PIPE            reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    AND_OP          reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    QUEST           reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    OR_OP           reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    SEMI            reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    COMMA           reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    COLON           reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    R_PAREN         reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    R_SQUARE        reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    R_BRACE         reduce using rule 53 (and_expression -> and_expression AMP equality_expression .)
    EQ_OP           reduce using rule 51 (equality_exp_lhs -> equality_expression .)
    NE_OP           reduce using rule 51 (equality_exp_lhs -> equality_expression .)


state 287

    (44) relational_expression -> relational_expression LESS shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER         reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    LE_OP           reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    GE_OP           reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    AMP             reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    CARET           reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    PIPE            reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    AND_OP          reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    QUEST           reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    OR_OP           reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    SEMI            reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    EQ_OP           reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    NE_OP           reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    COLON           reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    R_PAREN         reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    R_SQUARE        reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    R_BRACE         reduce using rule 44 (relational_expression -> relational_expression LESS shift_expression .)
    LEFT_OP         shift and go to state 218
    RIGHT_OP        shift and go to state 219


state 288

    (45) relational_expression -> relational_expression GREATER shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER         reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    LE_OP           reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    GE_OP           reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    AMP             reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    CARET           reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    PIPE            reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    AND_OP          reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    QUEST           reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    OR_OP           reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    SEMI            reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    EQ_OP           reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    NE_OP           reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    COLON           reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    R_PAREN         reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    R_SQUARE        reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    R_BRACE         reduce using rule 45 (relational_expression -> relational_expression GREATER shift_expression .)
    LEFT_OP         shift and go to state 218
    RIGHT_OP        shift and go to state 219


state 289

    (46) relational_expression -> relational_expression LE_OP shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    GREATER         reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    AMP             reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    CARET           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    PIPE            reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    QUEST           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    SEMI            reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    COMMA           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    COLON           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    R_PAREN         reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    R_SQUARE        reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    R_BRACE         reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 218
    RIGHT_OP        shift and go to state 219


state 290

    (47) relational_expression -> relational_expression GE_OP shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    GREATER         reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    AMP             reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    CARET           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    PIPE            reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    QUEST           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    SEMI            reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    COMMA           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    COLON           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    R_PAREN         reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    R_SQUARE        reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    R_BRACE         reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 218
    RIGHT_OP        shift and go to state 219


state 291

    (49) equality_expression -> equality_exp_lhs EQ_OP relational_expression .
    (44) relational_expression -> relational_expression . LESS shift_expression
    (45) relational_expression -> relational_expression . GREATER shift_expression
    (46) relational_expression -> relational_expression . LE_OP shift_expression
    (47) relational_expression -> relational_expression . GE_OP shift_expression

    AMP             reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    CARET           reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    PIPE            reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    AND_OP          reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    QUEST           reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    OR_OP           reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    SEMI            reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    COMMA           reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    EQ_OP           reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    NE_OP           reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    COLON           reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    R_PAREN         reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    R_SQUARE        reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    R_BRACE         reduce using rule 49 (equality_expression -> equality_exp_lhs EQ_OP relational_expression .)
    LESS            shift and go to state 212
    GREATER         shift and go to state 213
    LE_OP           shift and go to state 214
    GE_OP           shift and go to state 215


state 292

    (50) equality_expression -> equality_exp_lhs NE_OP relational_expression .
    (44) relational_expression -> relational_expression . LESS shift_expression
    (45) relational_expression -> relational_expression . GREATER shift_expression
    (46) relational_expression -> relational_expression . LE_OP shift_expression
    (47) relational_expression -> relational_expression . GE_OP shift_expression

    AMP             reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    CARET           reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    PIPE            reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    AND_OP          reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    QUEST           reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    OR_OP           reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    SEMI            reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    COMMA           reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    EQ_OP           reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    NE_OP           reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    COLON           reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    R_PAREN         reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    R_SQUARE        reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    R_BRACE         reduce using rule 50 (equality_expression -> equality_exp_lhs NE_OP relational_expression .)
    LESS            shift and go to state 212
    GREATER         shift and go to state 213
    LE_OP           shift and go to state 214
    GE_OP           shift and go to state 215


state 293

    (41) shift_expression -> shift_expression LEFT_OP additive_expression .
    (38) additive_expression -> additive_expression . PLUS multiplicative_expression
    (39) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LESS            reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GREATER         reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AMP             reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    CARET           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PIPE            reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    QUEST           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SEMI            reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COMMA           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COLON           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    R_PAREN         reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    R_SQUARE        reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    R_BRACE         reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PLUS            shift and go to state 220
    MINUS           shift and go to state 221


state 294

    (42) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (38) additive_expression -> additive_expression . PLUS multiplicative_expression
    (39) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LESS            reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GREATER         reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AMP             reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    CARET           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PIPE            reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    QUEST           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SEMI            reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COMMA           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COLON           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    R_PAREN         reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    R_SQUARE        reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    R_BRACE         reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PLUS            shift and go to state 220
    MINUS           shift and go to state 221


state 295

    (38) additive_expression -> additive_expression PLUS multiplicative_expression .
    (34) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (35) multiplicative_expression -> multiplicative_expression . SLASH cast_expression
    (36) multiplicative_expression -> multiplicative_expression . PERCENT cast_expression

    PLUS            reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_OP         reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE_OP           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE_OP           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AMP             reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CARET           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    PIPE            reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_OP          reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QUEST           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OP           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_OP           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE_OP           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    R_PAREN         reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    R_SQUARE        reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    R_BRACE         reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STAR            shift and go to state 222
    SLASH           shift and go to state 223
    PERCENT         shift and go to state 224


state 296

    (39) additive_expression -> additive_expression MINUS multiplicative_expression .
    (34) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (35) multiplicative_expression -> multiplicative_expression . SLASH cast_expression
    (36) multiplicative_expression -> multiplicative_expression . PERCENT cast_expression

    PLUS            reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_OP         reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE_OP           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE_OP           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AMP             reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CARET           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    PIPE            reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_OP          reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QUEST           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OP           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_OP           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE_OP           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    R_PAREN         reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    R_SQUARE        reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    R_BRACE         reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STAR            shift and go to state 222
    SLASH           shift and go to state 223
    PERCENT         shift and go to state 224


state 297

    (34) multiplicative_expression -> multiplicative_expression STAR cast_expression .

    STAR            reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    SLASH           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    PERCENT         reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    PLUS            reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    MINUS           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LEFT_OP         reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    RIGHT_OP        reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LESS            reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    GREATER         reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    GE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    AMP             reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    CARET           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    PIPE            reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    AND_OP          reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    QUEST           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    OR_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    SEMI            reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    COMMA           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    EQ_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    NE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    COLON           reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    R_PAREN         reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    R_SQUARE        reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    R_BRACE         reduce using rule 34 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)


state 298

    (35) multiplicative_expression -> multiplicative_expression SLASH cast_expression .

    STAR            reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    SLASH           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    PERCENT         reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    PLUS            reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    MINUS           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    LEFT_OP         reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    RIGHT_OP        reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    LESS            reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    GREATER         reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    LE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    GE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    AMP             reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    CARET           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    PIPE            reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    AND_OP          reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    QUEST           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    OR_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    SEMI            reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    COMMA           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    EQ_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    NE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    COLON           reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    R_PAREN         reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    R_SQUARE        reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)
    R_BRACE         reduce using rule 35 (multiplicative_expression -> multiplicative_expression SLASH cast_expression .)


state 299

    (36) multiplicative_expression -> multiplicative_expression PERCENT cast_expression .

    STAR            reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    SLASH           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    PERCENT         reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    PLUS            reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    MINUS           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    LEFT_OP         reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    RIGHT_OP        reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    LESS            reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    GREATER         reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    LE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    GE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    AMP             reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    CARET           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    PIPE            reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    AND_OP          reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    QUEST           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    OR_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    SEMI            reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    COMMA           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    EQ_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    NE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    COLON           reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    R_PAREN         reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    R_SQUARE        reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)
    R_BRACE         reduce using rule 36 (multiplicative_expression -> multiplicative_expression PERCENT cast_expression .)


state 300

    (145) variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .

    EQUAL           reduce using rule 145 (variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .)
    SEMI            reduce using rule 145 (variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .)
    COMMA           reduce using rule 145 (variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .)
    R_PAREN         reduce using rule 145 (variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .)
    COLON           reduce using rule 145 (variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE .)


state 301

    (181) initializer -> L_BRACE initializer_list . R_BRACE
    (182) initializer -> L_BRACE initializer_list . COMMA R_BRACE
    (184) initializer_list -> initializer_list . COMMA initializer

    R_BRACE         shift and go to state 334
    COMMA           shift and go to state 335


state 302

    (183) initializer_list -> initializer .

    R_BRACE         reduce using rule 183 (initializer_list -> initializer .)
    COMMA           reduce using rule 183 (initializer_list -> initializer .)


state 303

    (165) identifier_list -> identifier_list COMMA IDENTIFIER .

    R_PAREN         reduce using rule 165 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 165 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 304

    (158) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    R_PAREN         reduce using rule 158 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 305

    (160) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 160 (parameter_list -> parameter_list COMMA parameter_declaration .)
    R_PAREN         reduce using rule 160 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 306

    (170) abstract_declarator -> pointer direct_abstract_declarator .
    (176) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN R_PAREN
    (177) direct_abstract_declarator -> direct_abstract_declarator . L_SQUARE R_SQUARE
    (178) direct_abstract_declarator -> direct_abstract_declarator . L_SQUARE constant_expression R_SQUARE
    (179) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN parameter_type_list R_PAREN

    COMMA           reduce using rule 170 (abstract_declarator -> pointer direct_abstract_declarator .)
    R_PAREN         reduce using rule 170 (abstract_declarator -> pointer direct_abstract_declarator .)
    L_PAREN         shift and go to state 307
    L_SQUARE        shift and go to state 308


state 307

    (176) direct_abstract_declarator -> direct_abstract_declarator L_PAREN . R_PAREN
    (179) direct_abstract_declarator -> direct_abstract_declarator L_PAREN . parameter_type_list R_PAREN
    (157) parameter_type_list -> . parameter_list
    (158) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (159) parameter_list -> . parameter_declaration
    (160) parameter_list -> . parameter_list COMMA parameter_declaration
    (161) parameter_declaration -> . declaration_specifiers declarator
    (162) parameter_declaration -> . declaration_specifiers abstract_declarator
    (163) parameter_declaration -> . declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (88) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) storage_class_specifier -> . TYPEDEF
    (96) storage_class_specifier -> . EXTERN
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . AUTO
    (99) storage_class_specifier -> . REGISTER
    (100) type_specifier -> . VOID
    (101) type_specifier -> . CHAR
    (102) type_specifier -> . SHORT
    (103) type_specifier -> . INT
    (104) type_specifier -> . LONG
    (105) type_specifier -> . FLOAT
    (106) type_specifier -> . DOUBLE
    (107) type_specifier -> . SIGNED
    (108) type_specifier -> . UNSIGNED
    (109) type_specifier -> . TYPE_NAME
    (110) type_specifier -> . struct_or_union_specifier
    (111) type_specifier -> . enum_specifier
    (136) type_qualifier -> . CONST
    (137) type_qualifier -> . VOLATILE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (113) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (114) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (129) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (130) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (131) enum_specifier -> . ENUM IDENTIFIER
    (115) struct_or_union -> . STRUCT
    (116) struct_or_union -> . UNION

    R_PAREN         shift and go to state 336
    TYPEDEF         shift and go to state 15
    EXTERN          shift and go to state 16
    STATIC          shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    TYPE_NAME       shift and go to state 29
    CONST           shift and go to state 32
    VOLATILE        shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    parameter_type_list            shift and go to state 337
    parameter_list                 shift and go to state 142
    parameter_declaration          shift and go to state 143
    declaration_specifiers         shift and go to state 144
    storage_class_specifier        shift and go to state 11
    type_specifier                 shift and go to state 12
    type_qualifier                 shift and go to state 13
    struct_or_union_specifier      shift and go to state 30
    enum_specifier                 shift and go to state 31
    struct_or_union                shift and go to state 34

state 308

    (177) direct_abstract_declarator -> direct_abstract_declarator L_SQUARE . R_SQUARE
    (178) direct_abstract_declarator -> direct_abstract_declarator L_SQUARE . constant_expression R_SQUARE
    (80) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    R_SQUARE        shift and go to state 338
    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    constant_expression            shift and go to state 339
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 99
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 110
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 309

    (171) direct_abstract_declarator -> L_SQUARE R_SQUARE .

    L_PAREN         reduce using rule 171 (direct_abstract_declarator -> L_SQUARE R_SQUARE .)
    L_SQUARE        reduce using rule 171 (direct_abstract_declarator -> L_SQUARE R_SQUARE .)
    COMMA           reduce using rule 171 (direct_abstract_declarator -> L_SQUARE R_SQUARE .)
    R_PAREN         reduce using rule 171 (direct_abstract_declarator -> L_SQUARE R_SQUARE .)


state 310

    (173) direct_abstract_declarator -> L_SQUARE constant_expression . R_SQUARE

    R_SQUARE        shift and go to state 340


state 311

    (172) direct_abstract_declarator -> L_PAREN R_PAREN .

    L_PAREN         reduce using rule 172 (direct_abstract_declarator -> L_PAREN R_PAREN .)
    L_SQUARE        reduce using rule 172 (direct_abstract_declarator -> L_PAREN R_PAREN .)
    COMMA           reduce using rule 172 (direct_abstract_declarator -> L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 172 (direct_abstract_declarator -> L_PAREN R_PAREN .)


state 312

    (174) direct_abstract_declarator -> L_PAREN abstract_declarator . R_PAREN

    R_PAREN         shift and go to state 341


state 313

    (175) direct_abstract_declarator -> L_PAREN parameter_type_list . R_PAREN

    R_PAREN         shift and go to state 342


state 314

    (168) abstract_declarator -> pointer .
    (170) abstract_declarator -> pointer . direct_abstract_declarator
    (138) declarator -> pointer . direct_declarator
    (171) direct_abstract_declarator -> . L_SQUARE R_SQUARE
    (172) direct_abstract_declarator -> . L_PAREN R_PAREN
    (173) direct_abstract_declarator -> . L_SQUARE constant_expression R_SQUARE
    (174) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (175) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (177) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE R_SQUARE
    (178) direct_abstract_declarator -> . direct_abstract_declarator L_SQUARE constant_expression R_SQUARE
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN

    R_PAREN         reduce using rule 168 (abstract_declarator -> pointer .)
    L_SQUARE        shift and go to state 242
    L_PAREN         shift and go to state 243
    IDENTIFIER      shift and go to state 48

    direct_abstract_declarator     shift and go to state 306
    direct_declarator              shift and go to state 134
    variable_declaration           shift and go to state 56
    function_declaration           shift and go to state 128
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58

state 315

    (112) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .

    TYPEDEF         reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    EXTERN          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    STATIC          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    AUTO            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    REGISTER        reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    VOID            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    CHAR            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    SHORT           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    INT             reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    LONG            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    FLOAT           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    DOUBLE          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    SIGNED          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    UNSIGNED        reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    TYPE_NAME       reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    CONST           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    VOLATILE        reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    ENUM            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    STRUCT          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    UNION           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    SEMI            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    IDENTIFIER      reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    STAR            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    L_PAREN         reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    L_SQUARE        reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    COMMA           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    R_PAREN         reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    COLON           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)


state 316

    (119) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .

    R_BRACE         reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOID            reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CHAR            reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SHORT           reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    INT             reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    LONG            reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    FLOAT           reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    DOUBLE          reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SIGNED          reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNSIGNED        reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    TYPE_NAME       reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CONST           reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOLATILE        reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    ENUM            reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STRUCT          reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNION           reduce using rule 119 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)


state 317

    (125) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (126) struct_declarator -> . declarator
    (127) struct_declarator -> . COLON constant_expression
    (128) struct_declarator -> . declarator COLON constant_expression
    (138) declarator -> . pointer direct_declarator
    (139) declarator -> . direct_declarator
    (151) pointer -> . STAR
    (152) pointer -> . STAR type_qualifier_list
    (153) pointer -> . STAR pointer
    (154) pointer -> . STAR type_qualifier_list pointer
    (140) direct_declarator -> . variable_declaration
    (141) direct_declarator -> . function_declaration
    (142) variable_declaration -> . variable_declaration1
    (143) variable_declaration -> . variable_declaration2
    (148) function_declaration -> . IDENTIFIER L_PAREN parameter_type_list R_PAREN
    (149) function_declaration -> . IDENTIFIER L_PAREN identifier_list R_PAREN
    (150) function_declaration -> . IDENTIFIER L_PAREN R_PAREN
    (144) variable_declaration1 -> . IDENTIFIER
    (145) variable_declaration1 -> . IDENTIFIER L_SQUARE constant_expression R_SQUARE
    (146) variable_declaration1 -> . IDENTIFIER L_SQUARE R_SQUARE
    (147) variable_declaration2 -> . L_PAREN declarator R_PAREN

    COLON           shift and go to state 250
    STAR            shift and go to state 55
    IDENTIFIER      shift and go to state 48
    L_PAREN         shift and go to state 49

    struct_declarator              shift and go to state 343
    declarator                     shift and go to state 249
    pointer                        shift and go to state 53
    direct_declarator              shift and go to state 54
    variable_declaration           shift and go to state 56
    function_declaration           shift and go to state 128
    variable_declaration1          shift and go to state 57
    variable_declaration2          shift and go to state 58

state 318

    (128) struct_declarator -> declarator COLON . constant_expression
    (80) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    constant_expression            shift and go to state 344
    conditional_expression         shift and go to state 162
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 99
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 110
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 319

    (127) struct_declarator -> COLON constant_expression .

    SEMI            reduce using rule 127 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 127 (struct_declarator -> COLON constant_expression .)


state 320

    (133) enumerator_list -> enumerator_list COMMA enumerator .

    R_BRACE         reduce using rule 133 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 133 (enumerator_list -> enumerator_list COMMA enumerator .)


state 321

    (135) enumerator -> IDENTIFIER EQUAL constant_expression .

    R_BRACE         reduce using rule 135 (enumerator -> IDENTIFIER EQUAL constant_expression .)
    COMMA           reduce using rule 135 (enumerator -> IDENTIFIER EQUAL constant_expression .)


state 322

    (130) enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .

    TYPEDEF         reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    EXTERN          reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    STATIC          reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    AUTO            reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    REGISTER        reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    VOID            reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    CHAR            reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    SHORT           reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    INT             reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    LONG            reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    FLOAT           reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    DOUBLE          reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    SIGNED          reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    UNSIGNED        reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    TYPE_NAME       reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    CONST           reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    VOLATILE        reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    ENUM            reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    STRUCT          reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    UNION           reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    SEMI            reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    IDENTIFIER      reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    STAR            reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    L_PAREN         reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    L_SQUARE        reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    COMMA           reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    R_PAREN         reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    COLON           reduce using rule 130 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)


state 323

    (8) function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .

    L_SQUARE        reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    DOT             reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    PTR_OP          reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    INC_OP          reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    DEC_OP          reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    EQUAL           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    MUL_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    DIV_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    MOD_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    ADD_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    SUB_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    LEFT_ASSIGN     reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    RIGHT_ASSIGN    reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    AND_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    XOR_ASSIGN      reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    OR_ASSIGN       reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    STAR            reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    SLASH           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    PERCENT         reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    PLUS            reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    MINUS           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    LEFT_OP         reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    RIGHT_OP        reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    LESS            reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    GREATER         reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    LE_OP           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    GE_OP           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    AMP             reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    CARET           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    PIPE            reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    AND_OP          reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    QUEST           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    OR_OP           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    SEMI            reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    COMMA           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    EQ_OP           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    NE_OP           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    COLON           reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    R_PAREN         reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    R_SQUARE        reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)
    R_BRACE         reduce using rule 8 (function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN .)


state 324

    (17) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    assignment_expression          shift and go to state 345
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 325

    (192) labeled_statement -> CASE constant_expression COLON statement .

    R_BRACE         reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    L_BRACE         reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    INC_OP          reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC_OP          reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    AMP             reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    STAR            reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    TILDA           reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    EXCLAIM         reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    CONSTANT        reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    L_PAREN         reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 192 (labeled_statement -> CASE constant_expression COLON statement .)


state 326

    (204) selection_statement -> IF L_PAREN expression R_PAREN . statement
    (205) selection_statement -> IF L_PAREN expression R_PAREN . statement ELSE statement
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression                     shift and go to state 83
    statement                      shift and go to state 346
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    iteration_header               shift and go to state 87
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 327

    (32) cast_expression -> L_PAREN type_name R_PAREN cast_expression .

    STAR            reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    SLASH           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    PERCENT         reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    PLUS            reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    MINUS           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LEFT_OP         reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    RIGHT_OP        reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LESS            reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    GREATER         reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LE_OP           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    GE_OP           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    AMP             reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    CARET           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    PIPE            reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    AND_OP          reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    QUEST           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    OR_OP           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    SEMI            reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    COMMA           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    EQ_OP           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    NE_OP           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    COLON           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    R_PAREN         reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    EQUAL           reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    MUL_ASSIGN      reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    DIV_ASSIGN      reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    MOD_ASSIGN      reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    ADD_ASSIGN      reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    SUB_ASSIGN      reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LEFT_ASSIGN     reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    RIGHT_ASSIGN    reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    AND_ASSIGN      reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    XOR_ASSIGN      reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    OR_ASSIGN       reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    R_SQUARE        reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    R_BRACE         reduce using rule 32 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)


state 328

    (206) selection_statement -> SWITCH L_PAREN expression R_PAREN . statement
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression                     shift and go to state 83
    statement                      shift and go to state 347
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    iteration_header               shift and go to state 87
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 329

    (208) iteration_header -> WHILE L_PAREN expression R_PAREN .

    IDENTIFIER      reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    CASE            reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    DEFAULT         reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    L_BRACE         reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    SEMI            reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    IF              reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    SWITCH          reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    GOTO            reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    CONTINUE        reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    BREAK           reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    RETURN          reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    WHILE           reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    FOR             reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    INC_OP          reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    DEC_OP          reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    SIZEOF          reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    AMP             reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    STAR            reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    PLUS            reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    MINUS           reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    TILDA           reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    EXCLAIM         reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    CONSTANT        reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    STRING_LITERAL  reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)
    L_PAREN         reduce using rule 208 (iteration_header -> WHILE L_PAREN expression R_PAREN .)


state 330

    (209) iteration_header -> FOR L_PAREN expression_statement expression_statement . R_PAREN
    (210) iteration_header -> FOR L_PAREN expression_statement expression_statement . expression R_PAREN
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_PAREN         shift and go to state 348
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression                     shift and go to state 349
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 331

    (63) conditional_expression -> logical_or_expression QUEST expression COLON . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 164
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    logical_or_expression          shift and go to state 97
    conditional_expression         shift and go to state 350
    logical_and_expression         shift and go to state 99
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 110
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127
    cast_expression                shift and go to state 109
    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112

state 332

    (10) postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .

    L_SQUARE        reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    DOT             reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    PTR_OP          reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    INC_OP          reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    DEC_OP          reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    EQUAL           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    MUL_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    DIV_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    MOD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    ADD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    SUB_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    LEFT_ASSIGN     reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    RIGHT_ASSIGN    reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    AND_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    XOR_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    OR_ASSIGN       reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    STAR            reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    SLASH           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    PERCENT         reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    PLUS            reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    MINUS           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    LEFT_OP         reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    RIGHT_OP        reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    LESS            reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    GREATER         reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    LE_OP           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    GE_OP           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    AMP             reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    CARET           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    PIPE            reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    AND_OP          reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    QUEST           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    OR_OP           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    SEMI            reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    COMMA           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    EQ_OP           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    NE_OP           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    COLON           reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    R_PAREN         reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    R_SQUARE        reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)
    R_BRACE         reduce using rule 10 (postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE .)


state 333

    (23) unary_expression -> SIZEOF L_PAREN type_name R_PAREN .

    EQUAL           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MUL_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    DIV_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MOD_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    ADD_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SUB_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LEFT_ASSIGN     reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    RIGHT_ASSIGN    reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    AND_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    XOR_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    OR_ASSIGN       reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    STAR            reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SLASH           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    PERCENT         reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    PLUS            reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MINUS           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LEFT_OP         reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    RIGHT_OP        reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LESS            reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    GREATER         reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LE_OP           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    GE_OP           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    AMP             reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    CARET           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    PIPE            reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    AND_OP          reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    QUEST           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    OR_OP           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SEMI            reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    COMMA           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    EQ_OP           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    NE_OP           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    COLON           reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_PAREN         reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_SQUARE        reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_BRACE         reduce using rule 23 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)


state 334

    (181) initializer -> L_BRACE initializer_list R_BRACE .

    SEMI            reduce using rule 181 (initializer -> L_BRACE initializer_list R_BRACE .)
    COMMA           reduce using rule 181 (initializer -> L_BRACE initializer_list R_BRACE .)
    R_BRACE         reduce using rule 181 (initializer -> L_BRACE initializer_list R_BRACE .)


state 335

    (182) initializer -> L_BRACE initializer_list COMMA . R_BRACE
    (184) initializer_list -> initializer_list COMMA . initializer
    (180) initializer -> . assignment_expression
    (181) initializer -> . L_BRACE initializer_list R_BRACE
    (182) initializer -> . L_BRACE initializer_list COMMA R_BRACE
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACE         shift and go to state 351
    L_BRACE         shift and go to state 231
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    IDENTIFIER      shift and go to state 165
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    initializer                    shift and go to state 352
    assignment_expression          shift and go to state 230
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 336

    (176) direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .

    L_PAREN         reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)
    L_SQUARE        reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)
    COMMA           reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)


state 337

    (179) direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list . R_PAREN

    R_PAREN         shift and go to state 353


state 338

    (177) direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE .

    L_PAREN         reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE .)
    L_SQUARE        reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE .)
    COMMA           reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE .)
    R_PAREN         reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE .)


state 339

    (178) direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression . R_SQUARE

    R_SQUARE        shift and go to state 354


state 340

    (173) direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE .

    L_PAREN         reduce using rule 173 (direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE .)
    L_SQUARE        reduce using rule 173 (direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE .)
    COMMA           reduce using rule 173 (direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE .)
    R_PAREN         reduce using rule 173 (direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE .)


state 341

    (174) direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .

    L_PAREN         reduce using rule 174 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)
    L_SQUARE        reduce using rule 174 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)
    COMMA           reduce using rule 174 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)
    R_PAREN         reduce using rule 174 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)


state 342

    (175) direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .

    L_PAREN         reduce using rule 175 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)
    L_SQUARE        reduce using rule 175 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)
    COMMA           reduce using rule 175 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)
    R_PAREN         reduce using rule 175 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)


state 343

    (125) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMI            reduce using rule 125 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 125 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 344

    (128) struct_declarator -> declarator COLON constant_expression .

    SEMI            reduce using rule 128 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 128 (struct_declarator -> declarator COLON constant_expression .)


state 345

    (17) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    R_PAREN         reduce using rule 17 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 17 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 346

    (204) selection_statement -> IF L_PAREN expression R_PAREN statement .
    (205) selection_statement -> IF L_PAREN expression R_PAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    R_BRACE         reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CASE            reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DEFAULT         reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    L_BRACE         reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SEMI            reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    IF              reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SWITCH          reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    GOTO            reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CONTINUE        reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    BREAK           reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    RETURN          reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    WHILE           reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    FOR             reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    INC_OP          reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DEC_OP          reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SIZEOF          reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    AMP             reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    STAR            reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    PLUS            reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    MINUS           reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    TILDA           reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    EXCLAIM         reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CONSTANT        reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    STRING_LITERAL  reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    L_PAREN         reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    ELSE            shift and go to state 355

  ! ELSE            [ reduce using rule 204 (selection_statement -> IF L_PAREN expression R_PAREN statement .) ]


state 347

    (206) selection_statement -> SWITCH L_PAREN expression R_PAREN statement .

    R_BRACE         reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    CASE            reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    DEFAULT         reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    L_BRACE         reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    SEMI            reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    IF              reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    SWITCH          reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    GOTO            reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    CONTINUE        reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    BREAK           reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    RETURN          reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    WHILE           reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    FOR             reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    INC_OP          reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    DEC_OP          reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    SIZEOF          reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    AMP             reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    STAR            reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    PLUS            reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    MINUS           reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    TILDA           reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    EXCLAIM         reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    CONSTANT        reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    STRING_LITERAL  reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    L_PAREN         reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    ELSE            reduce using rule 206 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)


state 348

    (209) iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .

    IDENTIFIER      reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    CASE            reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    DEFAULT         reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    L_BRACE         reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    SEMI            reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    IF              reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    SWITCH          reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    GOTO            reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    CONTINUE        reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    BREAK           reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    RETURN          reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    WHILE           reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    FOR             reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    INC_OP          reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    DEC_OP          reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    SIZEOF          reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    AMP             reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    STAR            reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    PLUS            reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    MINUS           reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    TILDA           reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    EXCLAIM         reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    CONSTANT        reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    STRING_LITERAL  reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)
    L_PAREN         reduce using rule 209 (iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN .)


state 349

    (210) iteration_header -> FOR L_PAREN expression_statement expression_statement expression . R_PAREN
    (79) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 356
    COMMA           shift and go to state 168


state 350

    (63) conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .

    SEMI            reduce using rule 63 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)
    COMMA           reduce using rule 63 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)
    COLON           reduce using rule 63 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)
    R_PAREN         reduce using rule 63 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)
    R_SQUARE        reduce using rule 63 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)
    R_BRACE         reduce using rule 63 (conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression .)


state 351

    (182) initializer -> L_BRACE initializer_list COMMA R_BRACE .

    SEMI            reduce using rule 182 (initializer -> L_BRACE initializer_list COMMA R_BRACE .)
    COMMA           reduce using rule 182 (initializer -> L_BRACE initializer_list COMMA R_BRACE .)
    R_BRACE         reduce using rule 182 (initializer -> L_BRACE initializer_list COMMA R_BRACE .)


state 352

    (184) initializer_list -> initializer_list COMMA initializer .

    R_BRACE         reduce using rule 184 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 184 (initializer_list -> initializer_list COMMA initializer .)


state 353

    (179) direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .

    L_PAREN         reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)
    L_SQUARE        reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)
    COMMA           reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)
    R_PAREN         reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)


state 354

    (178) direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE .

    L_PAREN         reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE .)
    L_SQUARE        reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE .)
    COMMA           reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE .)
    R_PAREN         reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE .)


state 355

    (205) selection_statement -> IF L_PAREN expression R_PAREN statement ELSE . statement
    (185) statement -> . labeled_statement
    (186) statement -> . compound_statement
    (187) statement -> . expression_statement
    (188) statement -> . selection_statement
    (189) statement -> . iteration_statement
    (190) statement -> . jump_statement
    (191) labeled_statement -> . IDENTIFIER COLON statement
    (192) labeled_statement -> . CASE constant_expression COLON statement
    (193) labeled_statement -> . DEFAULT COLON statement
    (194) compound_statement -> . L_BRACE R_BRACE
    (195) compound_statement -> . L_BRACE statement_list R_BRACE
    (196) compound_statement -> . L_BRACE declaration_list R_BRACE
    (197) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (202) expression_statement -> . SEMI
    (203) expression_statement -> . expression SEMI
    (204) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (206) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (207) iteration_statement -> . iteration_header iteration_body
    (212) jump_statement -> . GOTO IDENTIFIER SEMI
    (213) jump_statement -> . CONTINUE SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . RETURN SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (208) iteration_header -> . WHILE L_PAREN expression R_PAREN
    (209) iteration_header -> . FOR L_PAREN expression_statement expression_statement R_PAREN
    (210) iteration_header -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . assignment_lhs assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUEST expression COLON conditional_expression
    (66) assignment_lhs -> . unary_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_OP unary_expression
    (20) unary_expression -> . DEC_OP unary_expression
    (21) unary_expression -> . unary_op_before_cast_exp
    (22) unary_expression -> . SIZEOF unary_expression
    (23) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression L_SQUARE expression R_SQUARE
    (11) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (15) postfix_expression -> . function_call
    (24) unary_op_before_cast_exp -> . unary_operator cast_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (1) primary_expression -> . variable_use
    (2) primary_expression -> . const_or_parenthesis
    (7) function_call -> . IDENTIFIER L_PAREN R_PAREN
    (8) function_call -> . IDENTIFIER L_PAREN argument_expression_list R_PAREN
    (25) unary_operator -> . AMP
    (26) unary_operator -> . STAR
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAIM
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (6) variable_use -> . IDENTIFIER
    (3) const_or_parenthesis -> . CONSTANT
    (4) const_or_parenthesis -> . STRING_LITERAL
    (5) const_or_parenthesis -> . L_PAREN expression R_PAREN
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AMP equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_exp_lhs EQ_OP relational_expression
    (50) equality_expression -> . equality_exp_lhs NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression LESS shift_expression
    (45) relational_expression -> . relational_expression GREATER shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (51) equality_exp_lhs -> . equality_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (35) multiplicative_expression -> . multiplicative_expression SLASH cast_expression
    (36) multiplicative_expression -> . multiplicative_expression PERCENT cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    IDENTIFIER      shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    L_BRACE         shift and go to state 41
    SEMI            shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    WHILE           shift and go to state 93
    FOR             shift and go to state 94
    INC_OP          shift and go to state 101
    DEC_OP          shift and go to state 102
    SIZEOF          shift and go to state 104
    AMP             shift and go to state 113
    STAR            shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TILDA           shift and go to state 117
    EXCLAIM         shift and go to state 118
    CONSTANT        shift and go to state 120
    STRING_LITERAL  shift and go to state 121
    L_PAREN         shift and go to state 85

    expression                     shift and go to state 83
    statement                      shift and go to state 357
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    iteration_header               shift and go to state 87
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 95
    assignment_lhs                 shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    logical_and_expression         shift and go to state 99
    postfix_expression             shift and go to state 100
    unary_op_before_cast_exp       shift and go to state 103
    inclusive_or_expression        shift and go to state 105
    primary_expression             shift and go to state 106
    function_call                  shift and go to state 107
    unary_operator                 shift and go to state 108
    cast_expression                shift and go to state 109
    exclusive_or_expression        shift and go to state 110
    variable_use                   shift and go to state 111
    const_or_parenthesis           shift and go to state 112
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    equality_exp_lhs               shift and go to state 124
    shift_expression               shift and go to state 125
    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 127

state 356

    (210) iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .

    IDENTIFIER      reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    CASE            reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    DEFAULT         reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    L_BRACE         reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    SEMI            reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    IF              reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    SWITCH          reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    GOTO            reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    CONTINUE        reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    BREAK           reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    RETURN          reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    WHILE           reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    FOR             reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    INC_OP          reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    DEC_OP          reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    SIZEOF          reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    AMP             reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    STAR            reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    PLUS            reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    MINUS           reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    TILDA           reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    EXCLAIM         reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    CONSTANT        reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    STRING_LITERAL  reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)
    L_PAREN         reduce using rule 210 (iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN .)


state 357

    (205) selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .

    R_BRACE         reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CASE            reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DEFAULT         reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    L_BRACE         reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SEMI            reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    IF              reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SWITCH          reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    GOTO            reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CONTINUE        reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    BREAK           reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    RETURN          reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    WHILE           reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    FOR             reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    INC_OP          reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DEC_OP          reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SIZEOF          reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    AMP             reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    STAR            reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    PLUS            reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    MINUS           reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    TILDA           reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    EXCLAIM         reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CONSTANT        reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    L_PAREN         reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    ELSE            reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 346 resolved as shift
