STATE before_parse
    CREATE recursion_found 0
    CREATE line_number 1
    CREATE mapping {}
    CREATE line_no {}
    CREATE curr_func ""
    CREATE curr_line []
END_STATE

STATE function_call
    GLOBAL_SET curr_func NAME
    GLOBAL_SET curr_line LINE
    IF NAME IN line_no
        SET curr_line line_no[NAME]
        APPEND curr_line LINE
        DICT_APPEND line_no NAME curr_line
    END_IF
    IF NAME NOTIN line_no
        DICT_APPEND line_no NAME [LINE]
    END_IF
    
END_STATE


STATE function_end
    DICT_APPEND mapping NAME curr_func 
    
    USE_GLOBAL recursion_found
    IF EXP.count(NAME) GREATER_THAN 1
        SET recursion_found 1
    END_IF
END_STATE

STATE after_parse
    CREATE recur_used 0
    FOR i IN mapping
    CREATE func []
        FOR j IN mapping
            IF mapping[i] EQUALTO j
                APPEND func j
                APPEND func mapping[j]
                IF mapping[j] IN mapping
                    APPEND func mapping[mapping[j]]
                END_IF
            END_IF
        END_FOR
    IF i IN func
        SET recursion_used 1
        FOR k IN line_no[i]
            PRINT k
            VIOLATION indirect_recursion_used
    END_IF
    END_FOR
END_STATE