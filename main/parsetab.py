
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "EQUAL ID NUMBER OPER TYPE for relop while\n    program : outermost_unit program \n           | empty\n    \n    outermost_unit : var_declares \n    | proto_or_defn\n     proto_or_defn : common_prefix suffix  common_prefix : TYPE ID '(' param_list ')'  suffix : prototype \n        | func_defn  prototype : ';'  func_defn : '{' statements_block '}'  param_list : has_args \n        | empty  has_args : TYPE ID ',' has_args \n                    | TYPE ID statements_block : statement statements_block\n        | statement statement : var_declares \n        | operation\n        | assignment\n        | func_call\n        | loop_stmtloop_stmt : loop_header loop_body  loop_header : while '(' cond ')'\n                   | for '(' cond ')' loop_body : '{' statements_block '}'  cond : rval relop rval \n             | assignment cond ';' operation1  var_declares : TYPE ID ';'  assignment : ID EQUAL rval ';'  operation : ID EQUAL rval OPER rval ';' \n    operation1 : ID EQUAL rval OPER rval\n     rval : ID\n            | NUMBER empty : func_call : call_with_args \n    | call_without_args  call_with_args : ID EQUAL ID '(' arg_list ')' ';'  call_without_args : ID '(' arg_list ')' ';'  arg_list : has_call_args \n    | empty  has_call_args : has_call_args ',' rval\n    | rval\n    "
    
_lr_action_items = {'$end':([0,1,2,3,4,5,8,10,11,12,13,15,35,],[-34,0,-34,-2,-3,-4,-1,-5,-7,-8,-9,-28,-10,]),'TYPE':([0,2,4,5,10,11,12,13,14,15,16,18,19,20,21,22,23,26,27,35,40,41,60,63,66,75,81,84,],[6,6,-3,-4,-5,-7,-8,-9,24,-28,31,24,-17,-18,-19,-20,-21,-35,-36,-10,-22,24,31,-29,-25,-38,-30,-37,]),'ID':([6,14,15,18,19,20,21,22,23,24,26,27,31,38,39,40,41,42,43,57,61,62,63,65,66,68,70,75,78,81,84,85,87,],[9,25,-28,25,-17,-18,-19,-20,-21,37,-35,-36,44,46,49,-22,25,58,58,58,49,49,-29,49,-25,49,49,-38,83,-30,-37,49,49,]),';':([7,9,37,45,46,47,48,49,64,69,74,77,79,80,82,88,],[13,15,15,-6,-32,63,-33,-32,75,78,81,-26,63,84,-27,-31,]),'{':([7,28,45,67,71,],[14,41,-6,-23,-24,]),'(':([9,25,29,30,46,],[16,39,42,43,61,]),'while':([14,15,18,19,20,21,22,23,26,27,40,41,63,66,75,81,84,],[29,-28,29,-17,-18,-19,-20,-21,-35,-36,-22,29,-29,-25,-38,-30,-37,]),'for':([14,15,18,19,20,21,22,23,26,27,40,41,63,66,75,81,84,],[30,-28,30,-17,-18,-19,-20,-21,-35,-36,-22,30,-29,-25,-38,-30,-37,]),'}':([15,17,18,19,20,21,22,23,26,27,36,40,54,63,66,75,81,84,],[-28,35,-16,-17,-18,-19,-20,-21,-35,-36,-15,-22,66,-29,-25,-38,-30,-37,]),')':([16,32,33,34,39,44,48,49,50,51,52,53,55,59,61,72,73,76,77,82,88,],[-34,45,-11,-12,-34,-14,-33,-32,64,-39,-40,-42,67,71,-34,-13,80,-41,-26,-27,-31,]),'EQUAL':([25,58,83,],[38,70,85,]),'NUMBER':([38,39,42,43,57,61,62,63,65,68,70,85,87,],[48,48,48,48,48,48,48,-29,48,48,48,48,48,]),',':([44,48,49,51,53,76,],[60,-33,-32,65,-42,-41,]),'OPER':([46,47,48,49,86,],[-32,62,-33,-32,87,]),'relop':([48,56,58,],[-33,68,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,8,]),'outermost_unit':([0,2,],[2,2,]),'empty':([0,2,16,39,61,],[3,3,34,52,52,]),'var_declares':([0,2,14,18,41,],[4,4,19,19,19,]),'proto_or_defn':([0,2,],[5,5,]),'common_prefix':([0,2,],[7,7,]),'suffix':([7,],[10,]),'prototype':([7,],[11,]),'func_defn':([7,],[12,]),'statements_block':([14,18,41,],[17,36,54,]),'statement':([14,18,41,],[18,18,18,]),'operation':([14,18,41,],[20,20,20,]),'assignment':([14,18,41,42,43,57,],[21,21,21,57,57,57,]),'func_call':([14,18,41,],[22,22,22,]),'loop_stmt':([14,18,41,],[23,23,23,]),'call_with_args':([14,18,41,],[26,26,26,]),'call_without_args':([14,18,41,],[27,27,27,]),'loop_header':([14,18,41,],[28,28,28,]),'param_list':([16,],[32,]),'has_args':([16,60,],[33,72,]),'loop_body':([28,],[40,]),'rval':([38,39,42,43,57,61,62,65,68,70,85,87,],[47,53,56,56,56,53,74,76,77,79,86,88,]),'arg_list':([39,61,],[50,73,]),'has_call_args':([39,61,],[51,51,]),'cond':([42,43,57,],[55,59,69,]),'operation1':([78,],[82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> outermost_unit program','program',2,'p_program','C_Parser_new.py',72),
  ('program -> empty','program',1,'p_program','C_Parser_new.py',73),
  ('outermost_unit -> var_declares','outermost_unit',1,'p_outermost_unit','C_Parser_new.py',81),
  ('outermost_unit -> proto_or_defn','outermost_unit',1,'p_outermost_unit','C_Parser_new.py',82),
  ('proto_or_defn -> common_prefix suffix','proto_or_defn',2,'p_proto_or_defn','C_Parser_new.py',87),
  ('common_prefix -> TYPE ID ( param_list )','common_prefix',5,'p_common_prefix','C_Parser_new.py',95),
  ('suffix -> prototype','suffix',1,'p_suffix','C_Parser_new.py',107),
  ('suffix -> func_defn','suffix',1,'p_suffix','C_Parser_new.py',108),
  ('prototype -> ;','prototype',1,'p_prototype','C_Parser_new.py',112),
  ('func_defn -> { statements_block }','func_defn',3,'p_func_defn','C_Parser_new.py',120),
  ('param_list -> has_args','param_list',1,'p_param_list','C_Parser_new.py',129),
  ('param_list -> empty','param_list',1,'p_param_list','C_Parser_new.py',130),
  ('has_args -> TYPE ID , has_args','has_args',4,'p_has_args','C_Parser_new.py',135),
  ('has_args -> TYPE ID','has_args',2,'p_has_args','C_Parser_new.py',136),
  ('statements_block -> statement statements_block','statements_block',2,'p_statements_block','C_Parser_new.py',140),
  ('statements_block -> statement','statements_block',1,'p_statements_block','C_Parser_new.py',141),
  ('statement -> var_declares','statement',1,'p_statement','C_Parser_new.py',146),
  ('statement -> operation','statement',1,'p_statement','C_Parser_new.py',147),
  ('statement -> assignment','statement',1,'p_statement','C_Parser_new.py',148),
  ('statement -> func_call','statement',1,'p_statement','C_Parser_new.py',149),
  ('statement -> loop_stmt','statement',1,'p_statement','C_Parser_new.py',150),
  ('loop_stmt -> loop_header loop_body','loop_stmt',2,'p_loop_stmt','C_Parser_new.py',154),
  ('loop_header -> while ( cond )','loop_header',4,'p_loop_header','C_Parser_new.py',157),
  ('loop_header -> for ( cond )','loop_header',4,'p_loop_header','C_Parser_new.py',158),
  ('loop_body -> { statements_block }','loop_body',3,'p_loop_body','C_Parser_new.py',162),
  ('cond -> rval relop rval','cond',3,'p_cond','C_Parser_new.py',167),
  ('cond -> assignment cond ; operation1','cond',4,'p_cond','C_Parser_new.py',168),
  ('var_declares -> TYPE ID ;','var_declares',3,'p_var_declares','C_Parser_new.py',179),
  ('assignment -> ID EQUAL rval ;','assignment',4,'p_assignment','C_Parser_new.py',186),
  ('operation -> ID EQUAL rval OPER rval ;','operation',6,'p_operation','C_Parser_new.py',191),
  ('operation1 -> ID EQUAL rval OPER rval','operation1',5,'p_operation1','C_Parser_new.py',196),
  ('rval -> ID','rval',1,'p_rval','C_Parser_new.py',201),
  ('rval -> NUMBER','rval',1,'p_rval','C_Parser_new.py',202),
  ('empty -> <empty>','empty',0,'p_empty','C_Parser_new.py',206),
  ('func_call -> call_with_args','func_call',1,'p_func_call','C_Parser_new.py',210),
  ('func_call -> call_without_args','func_call',1,'p_func_call','C_Parser_new.py',211),
  ('call_with_args -> ID EQUAL ID ( arg_list ) ;','call_with_args',7,'p_call_with_args','C_Parser_new.py',222),
  ('call_without_args -> ID ( arg_list ) ;','call_without_args',5,'p_call_without_args','C_Parser_new.py',229),
  ('arg_list -> has_call_args','arg_list',1,'p_arg_list','C_Parser_new.py',237),
  ('arg_list -> empty','arg_list',1,'p_arg_list','C_Parser_new.py',238),
  ('has_call_args -> has_call_args , rval','has_call_args',3,'p_has_call_args','C_Parser_new.py',242),
  ('has_call_args -> rval','has_call_args',1,'p_has_call_args','C_Parser_new.py',243),
]
