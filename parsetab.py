
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'translation_unitADD_ASSIGN AMP AND_ASSIGN AND_OP AUTO BREAK CARET CASE CHAR COLON COMMA CONST CONSTANT CONTINUE DEC_OP DEFAULT DIV_ASSIGN DOT DOUBLE ELLIPSIS ELSE ENUM EQUAL EQ_OP EXCLAIM EXTERN FLOAT FOR GE_OP GOTO GREATER IDENTIFIER IF INC_OP INT LEFT_ASSIGN LEFT_OP LESS LE_OP LONG L_BRACE L_PAREN L_SQUARE MINUS MOD_ASSIGN MUL_ASSIGN NE_OP OR_ASSIGN OR_OP PERCENT PIPE PLUS PTR_OP QUEST REGISTER RETURN RIGHT_ASSIGN RIGHT_OP R_BRACE R_PAREN R_SQUARE SEMI SHORT SIGNED SIZEOF SLASH STAR STATIC STRING_LITERAL STRUCT SUB_ASSIGN SWITCH TILDA TYPEDEF TYPE_NAME UNION UNSIGNED VOID VOLATILE WHILE XOR_ASSIGN\n    primary_expression : variable_use\n    | CONSTANT\n    | STRING_LITERAL\n    | L_PAREN expression R_PAREN\n    \n    variable_use : IDENTIFIER\n    \n    function_call : IDENTIFIER L_PAREN R_PAREN\n    | IDENTIFIER L_PAREN argument_expression_list R_PAREN\n    \n    postfix_expression : primary_expression\n    | postfix_expression L_SQUARE expression R_SQUARE\n    | postfix_expression DOT IDENTIFIER\n    | postfix_expression PTR_OP IDENTIFIER\n    | postfix_expression INC_OP\n    | postfix_expression DEC_OP\n    | function_call\n    \n    argument_expression_list : assignment_expression\n    | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    | INC_OP unary_expression\n    | DEC_OP unary_expression\n    | unary_operator cast_expression\n    | SIZEOF unary_expression\n    | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : AMP\n    | STAR\n    | PLUS\n    | MINUS\n    | TILDA\n    | EXCLAIM\n    \n    cast_expression : unary_expression\n    | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n    | multiplicative_expression STAR cast_expression\n    | multiplicative_expression SLASH cast_expression\n    | multiplicative_expression PERCENT cast_expression\n    \n    additive_expression : multiplicative_expression\n    | additive_expression PLUS multiplicative_expression\n    | additive_expression MINUS multiplicative_expression\n    \n    shift_expression : additive_expression\n    | shift_expression LEFT_OP additive_expression\n    | shift_expression RIGHT_OP additive_expression\n    \n    relational_expression : shift_expression\n    | relational_expression LESS shift_expression\n    | relational_expression GREATER shift_expression\n    | relational_expression LE_OP shift_expression\n    | relational_expression GE_OP shift_expression\n    \n    equality_expression : relational_expression\n    | equality_exp_lhs EQ_OP relational_expression\n    | equality_exp_lhs NE_OP relational_expression\n    \n    equality_exp_lhs : equality_expression\n    \n    and_expression : equality_expression\n    | and_expression AMP equality_expression\n    \n    exclusive_or_expression : and_expression\n    | exclusive_or_expression CARET and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n    | inclusive_or_expression PIPE exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n    | logical_and_expression AND_OP inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n    | logical_or_expression OR_OP logical_and_expression\n    \n    conditional_expression : logical_or_expression\n    | logical_or_expression QUEST expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n    | assignment_lhs assignment_operator assignment_expression\n    \n    assignment_lhs : unary_expression\n    \n    assignment_operator : EQUAL\n    | MUL_ASSIGN\n    | DIV_ASSIGN\n    | MOD_ASSIGN\n    | ADD_ASSIGN\n    | SUB_ASSIGN\n    | LEFT_ASSIGN\n    | RIGHT_ASSIGN\n    | AND_ASSIGN\n    | XOR_ASSIGN\n    | OR_ASSIGN\n    \n    expression : assignment_expression\n    | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : declaration_specifiers SEMI\n    | declaration_specifiers init_declarator_list SEMI\n    \n    declaration_specifiers : storage_class_specifier\n    | storage_class_specifier declaration_specifiers\n    | type_specifier\n    | type_specifier declaration_specifiers\n    | type_qualifier\n    | type_qualifier declaration_specifiers\n    \n    init_declarator_list : init_declarator\n    | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n    | declarator EQUAL initializer\n    \n    storage_class_specifier : TYPEDEF\n    | EXTERN\n    | STATIC\n    | AUTO\n    | REGISTER\n    \n    type_specifier : VOID\n    | CHAR\n    | SHORT\n    | INT\n    | LONG\n    | FLOAT\n    | DOUBLE\n    | SIGNED\n    | UNSIGNED\n    | struct_or_union_specifier\n    | enum_specifier\n    | TYPE_NAME\n    \n    struct_or_union_specifier : struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE\n    | struct_or_union L_BRACE struct_declaration_list R_BRACE\n    | struct_or_union IDENTIFIER\n    \n    struct_or_union : STRUCT\n    | UNION\n    \n    struct_declaration_list : struct_declaration\n    | struct_declaration_list struct_declaration\n    \n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMI\n    \n    specifier_qualifier_list : type_specifier specifier_qualifier_list\n    | type_specifier\n    | type_qualifier specifier_qualifier_list\n    | type_qualifier\n    \n    struct_declarator_list : struct_declarator\n    | struct_declarator_list COMMA struct_declarator\n    \n    struct_declarator : declarator\n    | COLON constant_expression\n    | declarator COLON constant_expression\n    \n    enum_specifier : ENUM L_BRACE enumerator_list R_BRACE\n    | ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE\n    | ENUM IDENTIFIER\n    \n    enumerator_list : enumerator\n    | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n    | IDENTIFIER EQUAL constant_expression\n    \n    type_qualifier : CONST\n    | VOLATILE\n    \n    declarator : pointer direct_declarator\n    | direct_declarator\n    \n    direct_declarator : variable_declaration\n    | function_declaration\n    \n    variable_declaration : variable_declaration1\n    | variable_declaration2\n    \n    variable_declaration1 : IDENTIFIER\n    | IDENTIFIER L_SQUARE constant_expression R_SQUARE\n    | IDENTIFIER L_SQUARE R_SQUARE\n    \n   variable_declaration2 : L_PAREN declarator R_PAREN\n   \n    function_declaration : IDENTIFIER L_PAREN parameter_type_list R_PAREN\n    | IDENTIFIER L_PAREN identifier_list R_PAREN\n    | IDENTIFIER L_PAREN R_PAREN   \n    \n    pointer : STAR\n    | STAR type_qualifier_list\n    | STAR pointer\n    | STAR type_qualifier_list pointer\n    \n    type_qualifier_list : type_qualifier\n    | type_qualifier_list type_qualifier\n    \n    parameter_type_list : parameter_list\n    | parameter_list COMMA ELLIPSIS\n    \n    parameter_list : parameter_declaration\n    | parameter_list COMMA parameter_declaration\n    \n    parameter_declaration : declaration_specifiers declarator\n    | declaration_specifiers abstract_declarator\n    | declaration_specifiers\n    \n    identifier_list : IDENTIFIER\n    | identifier_list COMMA IDENTIFIER\n    \n    type_name : specifier_qualifier_list\n    | specifier_qualifier_list abstract_declarator\n    \n    abstract_declarator : pointer\n    | direct_abstract_declarator\n    | pointer direct_abstract_declarator\n    \n    direct_abstract_declarator : L_PAREN abstract_declarator R_PAREN\n    | L_SQUARE R_SQUARE\n    | L_SQUARE constant_expression R_SQUARE\n    | direct_abstract_declarator L_SQUARE R_SQUARE\n    | direct_abstract_declarator L_SQUARE constant_expression R_SQUARE\n    | L_PAREN R_PAREN\n    | L_PAREN parameter_type_list R_PAREN\n    | direct_abstract_declarator L_PAREN R_PAREN\n    | direct_abstract_declarator L_PAREN parameter_type_list R_PAREN\n    \n    initializer : assignment_expression\n    | L_BRACE initializer_list R_BRACE\n    | L_BRACE initializer_list COMMA R_BRACE\n    \n    initializer_list : initializer\n    | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n    | compound_statement\n    | expression_statement\n    | selection_statement\n    | iteration_statement\n    | jump_statement\n    \n    labeled_statement : IDENTIFIER COLON statement\n    | CASE constant_expression COLON statement\n    | DEFAULT COLON statement\n    \n    compound_statement : L_BRACE R_BRACE\n    | L_BRACE statement_list R_BRACE\n    | L_BRACE declaration_list R_BRACE\n    | L_BRACE declaration_list statement_list R_BRACE\n    \n    declaration_list : declaration\n    | declaration_list declaration\n    \n    statement_list : statement\n    | statement_list statement\n    \n    expression_statement : SEMI\n    | expression SEMI\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n    | IF L_PAREN expression R_PAREN statement ELSE statement\n    | SWITCH L_PAREN expression R_PAREN statement\n    iteration_statement : iteration_header iteration_body \n    iteration_header : WHILE L_PAREN expression R_PAREN \n    | FOR L_PAREN expression_statement expression_statement R_PAREN \n    | FOR L_PAREN expression_statement expression_statement expression R_PAREN \n    iteration_body : statement \n    jump_statement : GOTO IDENTIFIER SEMI\n    | CONTINUE SEMI\n    | BREAK SEMI\n    | RETURN SEMI\n    | RETURN expression SEMI\n    \n    translation_unit : external_declaration\n    | translation_unit external_declaration\n    \n    external_declaration : function_definition\n    | other_declarations\n    \n    other_declarations : declaration\n    \n    function_header : fheader_type1\n    | fheader_type2\n    \n    fheader_type1 : declaration_specifiers function_declaration\n    \n    fheader_type2 : function_declaration\n    \n    function_definition : function_header compound_statement\n    | function_header declaration_list compound_statement\n    '
    
_lr_action_items = {'IDENTIFIER':([0,1,2,3,4,6,9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,49,51,53,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,83,85,86,89,99,100,101,103,107,108,109,110,111,112,125,126,127,129,131,132,133,140,144,145,146,150,151,152,153,154,155,156,160,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,228,229,232,236,238,239,241,246,247,248,249,250,251,253,254,258,259,263,268,269,271,303,308,311,313,314,318,320,321,322,324,325,326,327,331,342,343,344,351,352,353,],[14,14,-213,-215,-216,-217,48,-81,-83,-85,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,61,64,-111,-112,-214,-222,78,-194,48,-79,48,48,-147,-82,-84,-86,134,-110,149,-127,-223,-195,-190,78,78,-196,-181,-182,-183,-184,-185,-186,-198,161,161,78,172,161,161,161,161,161,-23,-24,-25,-26,-27,-28,-80,48,161,161,-148,-149,-151,48,48,-117,-119,149,-191,-197,-192,78,78,161,161,78,-199,161,161,161,-203,-207,-209,-210,-211,161,161,161,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,161,161,161,161,277,278,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,-150,-152,299,48,48,161,-109,161,-116,-118,-125,149,161,-193,-187,78,-189,161,-208,-212,161,161,48,-108,48,161,-126,161,-188,78,78,-204,161,161,161,-200,-202,-205,78,-206,-201,]),'TYPEDEF':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,64,65,66,67,69,125,136,151,153,230,231,233,238,241,249,253,266,304,311,318,],[15,15,-213,-215,-216,15,-217,-218,-219,-221,15,15,15,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,15,15,-194,-79,-220,15,-110,-127,-223,-195,-190,15,-80,-146,-191,-192,-144,-145,15,15,-109,-125,-193,15,15,-108,-126,]),'EXTERN':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,64,65,66,67,69,125,136,151,153,230,231,233,238,241,249,253,266,304,311,318,],[16,16,-213,-215,-216,16,-217,-218,-219,-221,16,16,16,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,16,16,-194,-79,-220,16,-110,-127,-223,-195,-190,16,-80,-146,-191,-192,-144,-145,16,16,-109,-125,-193,16,16,-108,-126,]),'STATIC':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,64,65,66,67,69,125,136,151,153,230,231,233,238,241,249,253,266,304,311,318,],[17,17,-213,-215,-216,17,-217,-218,-219,-221,17,17,17,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,17,17,-194,-79,-220,17,-110,-127,-223,-195,-190,17,-80,-146,-191,-192,-144,-145,17,17,-109,-125,-193,17,17,-108,-126,]),'AUTO':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,64,65,66,67,69,125,136,151,153,230,231,233,238,241,249,253,266,304,311,318,],[18,18,-213,-215,-216,18,-217,-218,-219,-221,18,18,18,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,18,18,-194,-79,-220,18,-110,-127,-223,-195,-190,18,-80,-146,-191,-192,-144,-145,18,18,-109,-125,-193,18,18,-108,-126,]),'REGISTER':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,64,65,66,67,69,125,136,151,153,230,231,233,238,241,249,253,266,304,311,318,],[19,19,-213,-215,-216,19,-217,-218,-219,-221,19,19,19,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,19,19,-194,-79,-220,19,-110,-127,-223,-195,-190,19,-80,-146,-191,-192,-144,-145,19,19,-109,-125,-193,19,19,-108,-126,]),'VOID':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[20,20,-213,-215,-216,20,-217,-218,-219,-221,20,20,20,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,20,20,-194,-79,-220,20,-110,20,-127,-223,-195,-190,20,20,-80,-146,20,20,-113,20,20,-191,-192,20,20,-144,-145,20,20,20,-109,-114,-125,-193,20,20,-108,-115,-126,]),'CHAR':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[21,21,-213,-215,-216,21,-217,-218,-219,-221,21,21,21,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,21,21,-194,-79,-220,21,-110,21,-127,-223,-195,-190,21,21,-80,-146,21,21,-113,21,21,-191,-192,21,21,-144,-145,21,21,21,-109,-114,-125,-193,21,21,-108,-115,-126,]),'SHORT':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[22,22,-213,-215,-216,22,-217,-218,-219,-221,22,22,22,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,22,22,-194,-79,-220,22,-110,22,-127,-223,-195,-190,22,22,-80,-146,22,22,-113,22,22,-191,-192,22,22,-144,-145,22,22,22,-109,-114,-125,-193,22,22,-108,-115,-126,]),'INT':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[23,23,-213,-215,-216,23,-217,-218,-219,-221,23,23,23,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,23,23,-194,-79,-220,23,-110,23,-127,-223,-195,-190,23,23,-80,-146,23,23,-113,23,23,-191,-192,23,23,-144,-145,23,23,23,-109,-114,-125,-193,23,23,-108,-115,-126,]),'LONG':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[24,24,-213,-215,-216,24,-217,-218,-219,-221,24,24,24,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,24,24,-194,-79,-220,24,-110,24,-127,-223,-195,-190,24,24,-80,-146,24,24,-113,24,24,-191,-192,24,24,-144,-145,24,24,24,-109,-114,-125,-193,24,24,-108,-115,-126,]),'FLOAT':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[25,25,-213,-215,-216,25,-217,-218,-219,-221,25,25,25,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,25,25,-194,-79,-220,25,-110,25,-127,-223,-195,-190,25,25,-80,-146,25,25,-113,25,25,-191,-192,25,25,-144,-145,25,25,25,-109,-114,-125,-193,25,25,-108,-115,-126,]),'DOUBLE':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[26,26,-213,-215,-216,26,-217,-218,-219,-221,26,26,26,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,26,26,-194,-79,-220,26,-110,26,-127,-223,-195,-190,26,26,-80,-146,26,26,-113,26,26,-191,-192,26,26,-144,-145,26,26,26,-109,-114,-125,-193,26,26,-108,-115,-126,]),'SIGNED':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[27,27,-213,-215,-216,27,-217,-218,-219,-221,27,27,27,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,27,27,-194,-79,-220,27,-110,27,-127,-223,-195,-190,27,27,-80,-146,27,27,-113,27,27,-191,-192,27,27,-144,-145,27,27,27,-109,-114,-125,-193,27,27,-108,-115,-126,]),'UNSIGNED':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[28,28,-213,-215,-216,28,-217,-218,-219,-221,28,28,28,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,28,28,-194,-79,-220,28,-110,28,-127,-223,-195,-190,28,28,-80,-146,28,28,-113,28,28,-191,-192,28,28,-144,-145,28,28,28,-109,-114,-125,-193,28,28,-108,-115,-126,]),'TYPE_NAME':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[31,31,-213,-215,-216,31,-217,-218,-219,-221,31,31,31,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,31,31,-194,-79,-220,31,-110,31,-127,-223,-195,-190,31,31,-80,-146,31,31,-113,31,31,-191,-192,31,31,-144,-145,31,31,31,-109,-114,-125,-193,31,31,-108,-115,-126,]),'CONST':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,53,60,61,62,64,65,66,67,69,83,125,131,133,136,141,142,143,145,146,151,153,160,204,229,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[32,32,-213,-215,-216,32,-217,-218,-219,-221,32,32,32,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,32,32,-194,-79,-220,32,32,-110,32,-127,-223,-195,-190,32,32,-80,32,-151,-146,32,32,-113,32,32,-191,-192,32,32,-152,-144,-145,32,32,32,-109,-114,-125,-193,32,32,-108,-115,-126,]),'VOLATILE':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,53,60,61,62,64,65,66,67,69,83,125,131,133,136,141,142,143,145,146,151,153,160,204,229,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[33,33,-213,-215,-216,33,-217,-218,-219,-221,33,33,33,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,33,33,-194,-79,-220,33,33,-110,33,-127,-223,-195,-190,33,33,-80,33,-151,-146,33,33,-113,33,33,-191,-192,33,33,-152,-144,-145,33,33,33,-109,-114,-125,-193,33,33,-108,-115,-126,]),'ENUM':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[35,35,-213,-215,-216,35,-217,-218,-219,-221,35,35,35,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,35,35,-194,-79,-220,35,-110,35,-127,-223,-195,-190,35,35,-80,-146,35,35,-113,35,35,-191,-192,35,35,-144,-145,35,35,35,-109,-114,-125,-193,35,35,-108,-115,-126,]),'STRUCT':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[36,36,-213,-215,-216,36,-217,-218,-219,-221,36,36,36,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,36,36,-194,-79,-220,36,-110,36,-127,-223,-195,-190,36,36,-80,-146,36,36,-113,36,36,-191,-192,36,36,-144,-145,36,36,36,-109,-114,-125,-193,36,36,-108,-115,-126,]),'UNION':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,60,61,62,64,65,66,67,69,83,125,136,141,142,143,145,146,151,153,160,204,230,231,233,238,240,241,242,249,253,266,304,311,312,318,],[37,37,-213,-215,-216,37,-217,-218,-219,-221,37,37,37,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-214,-222,37,37,-194,-79,-220,37,-110,37,-127,-223,-195,-190,37,37,-80,-146,37,37,-113,37,37,-191,-192,37,37,-144,-145,37,37,37,-109,-114,-125,-193,37,37,-108,-115,-126,]),'$end':([1,2,3,4,6,38,39,44,65,67,125,151,153,253,],[0,-213,-215,-216,-217,-214,-222,-79,-223,-190,-80,-191,-192,-193,]),'L_BRACE':([5,7,8,10,34,35,36,37,40,41,42,44,46,61,64,66,67,68,69,70,71,72,73,74,75,76,77,85,125,129,136,151,152,153,154,155,162,163,170,171,173,174,175,227,230,231,253,254,258,259,268,269,321,322,324,325,331,342,343,344,351,352,353,],[41,-218,-219,-221,62,63,-111,-112,41,41,-194,-79,-220,141,150,-195,-190,41,41,-196,-181,-182,-183,-184,-185,-186,-198,41,-80,227,-146,-191,-197,-192,41,41,41,-199,-203,-207,-209,-210,-211,227,-144,-145,-193,-187,41,-189,-208,-212,-188,41,41,-204,227,-200,-202,-205,41,-206,-201,]),'SEMI':([9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,41,42,43,44,45,46,47,48,50,52,54,55,56,57,58,59,61,64,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,87,88,89,90,93,95,96,97,98,102,104,105,106,113,114,115,116,117,118,119,121,122,123,124,125,130,136,151,152,153,154,155,158,159,161,162,163,170,171,172,173,174,175,176,178,197,198,199,201,202,203,221,223,224,225,226,230,231,241,243,244,245,249,253,254,255,258,259,260,262,268,269,271,272,274,275,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,311,315,318,319,321,322,323,324,325,328,329,330,339,340,342,343,344,346,347,351,352,353,],[44,-81,-83,-85,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,77,-194,44,-79,125,-137,-87,-140,-89,-135,-136,-138,-139,-82,-84,-86,-110,-127,-195,-190,77,77,-196,-181,-182,-183,-184,-185,-186,-198,-5,163,77,173,174,175,-76,-62,-60,-29,-58,-17,-31,-56,-8,-14,-54,-1,-2,-3,-52,-50,-46,-41,-38,-35,-137,-80,-134,-146,-191,-197,-192,77,77,-78,-29,-5,77,-199,-203,-207,268,-209,-210,-211,269,77,-12,-13,-18,-19,-20,-21,-88,-142,-143,-90,-176,-144,-145,-109,312,-120,-122,-125,-193,-187,-6,77,-189,-77,-4,-208,-212,77,-63,-59,-57,-10,-11,-55,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-141,-108,-123,-126,-7,-188,77,-30,77,-204,-9,-22,-177,-121,-124,-200,-202,-205,-61,-178,77,-206,-201,]),'STAR':([9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,41,42,43,44,49,53,57,58,59,61,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,96,98,99,100,101,102,103,105,106,107,108,109,110,111,112,114,115,116,123,125,126,127,129,131,133,140,144,145,146,151,152,153,154,155,156,159,160,161,162,163,164,165,168,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,229,238,239,241,246,247,248,249,251,253,254,255,258,259,262,263,266,268,269,271,277,278,291,292,293,294,295,303,311,313,314,318,319,320,321,322,323,324,325,326,327,328,329,331,342,343,344,351,352,353,],[53,-81,-83,-85,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,108,-194,53,-79,53,53,-82,-84,-86,-110,-127,-195,-190,108,108,-196,-181,-182,-183,-184,-185,-186,-198,-5,108,108,108,108,-29,-17,108,108,108,-31,108,-8,-14,-23,-24,-25,-26,-27,-28,-1,-2,-3,218,-80,53,108,108,53,-151,53,53,-117,-119,-191,-197,-192,108,108,108,-29,108,-5,108,-199,108,108,53,108,-203,-207,-209,-210,-211,108,108,108,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,108,108,108,108,-12,-13,-18,108,-19,-20,-21,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-152,53,108,-109,108,-116,-118,-125,108,-193,-187,-6,108,-189,-4,108,53,-208,-212,108,-10,-11,218,218,-32,-33,-34,108,-108,53,108,-126,-7,108,-188,108,-30,108,-204,108,108,-9,-22,108,-200,-202,-205,108,-206,-201,]),'L_PAREN':([9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,41,42,43,44,48,49,51,53,57,58,59,61,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,82,83,84,85,89,91,92,99,100,101,103,107,108,109,110,111,112,125,126,127,129,131,132,133,140,144,145,146,151,152,153,154,155,156,160,161,162,163,164,165,168,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,228,229,236,237,238,239,241,246,247,248,249,251,253,254,258,259,263,265,266,268,269,271,302,303,306,308,309,311,313,314,318,320,321,322,324,325,326,327,331,332,334,336,337,338,342,343,344,349,350,351,352,353,],[49,-81,-83,-85,60,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,83,-194,49,-79,60,49,49,-147,-82,-84,-86,-110,-127,-195,-190,83,83,-196,-181,-182,-183,-184,-185,-186,-198,156,160,165,83,169,83,83,177,178,200,200,160,204,-23,-24,-25,-26,-27,-28,-80,49,160,83,-148,-149,-151,238,49,-117,-119,-191,-197,-192,83,83,83,83,156,83,-199,83,83,266,83,-203,-207,-209,-210,-211,83,83,83,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,83,160,160,83,83,83,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,83,-150,-152,238,304,238,160,-109,160,-116,-118,-125,160,-193,-187,83,-189,160,266,266,-208,-212,83,304,160,-172,238,-168,-108,49,160,-126,83,-188,83,83,-204,83,160,83,-170,-174,-167,-173,-169,-200,-202,-205,-171,-175,83,-206,-201,]),'L_SQUARE':([11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,48,53,57,58,59,61,64,78,98,105,106,114,115,116,131,132,133,140,145,146,161,168,197,198,228,229,236,237,238,241,247,248,249,255,262,265,266,277,278,302,306,308,309,311,318,319,328,332,334,336,337,338,349,350,],[-81,-83,-85,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,127,-147,-82,-84,-86,-110,-127,-5,194,-8,-14,-1,-2,-3,-148,-149,-151,239,-117,-119,-5,239,-12,-13,-150,-152,239,303,239,-109,-116,-118,-125,-6,-4,239,239,-10,-11,303,-172,239,-168,-108,-126,-7,-9,-170,-174,-167,-173,-169,-171,-175,]),'COMMA':([11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,45,46,47,48,50,52,53,54,55,56,57,58,59,61,64,78,81,90,93,95,96,97,98,102,104,105,106,113,114,115,116,117,118,119,121,122,123,124,130,131,132,133,134,136,137,138,139,140,147,148,149,158,159,161,166,176,197,198,199,201,202,203,221,223,224,225,226,228,229,230,231,234,235,236,237,241,243,244,245,249,252,255,256,257,260,261,262,267,270,272,273,274,275,276,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,301,302,306,309,311,315,316,317,318,319,323,328,329,330,332,334,336,337,338,339,340,341,345,346,347,348,349,350,],[-81,-83,-85,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,126,-137,-87,-140,-89,-135,-147,-136,-138,-139,-82,-84,-86,-110,-127,-5,164,-76,-62,-60,-29,-58,-17,-31,-56,-8,-14,-54,-1,-2,-3,-52,-50,-46,-41,-38,-35,-137,-134,-148,-149,-151,-160,-146,232,233,-155,-159,250,-128,-130,-78,-29,-5,164,164,-12,-13,-18,-19,-20,-21,-88,-142,-143,-90,-176,-150,-152,-144,-145,-157,-158,-164,-165,-109,313,-120,-122,-125,250,-6,320,-15,-77,164,-4,164,164,-63,164,-59,-57,164,-10,-11,-55,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-141,331,-179,-161,-156,-166,-172,-168,-108,-123,-129,-131,-126,-7,-30,-9,-22,-177,-170,-174,-167,-173,-169,-121,-124,-16,164,-61,-178,-180,-171,-175,]),'R_PAREN':([11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,48,52,53,54,55,56,57,58,59,60,61,64,77,90,93,95,96,97,98,102,104,105,106,113,114,115,116,117,118,119,121,122,123,124,128,130,131,132,133,134,135,136,137,138,139,140,145,146,156,159,161,163,166,167,168,197,198,199,201,202,203,223,224,228,229,230,231,234,235,236,237,238,241,247,248,249,255,256,257,260,261,262,264,265,266,267,270,272,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,299,300,301,302,304,305,306,307,308,309,311,318,319,323,326,328,329,332,334,335,336,337,338,341,345,346,349,350,],[-81,-83,-85,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-140,-135,-147,-136,-138,-139,-82,-84,-86,136,-110,-127,-198,-76,-62,-60,-29,-58,-17,-31,-56,-8,-14,-54,-1,-2,-3,-52,-50,-46,-41,-38,-35,-137,224,-134,-148,-149,-151,-160,230,-146,231,-153,-155,-159,-117,-119,255,-29,-5,-199,262,263,-162,-12,-13,-18,-19,-20,-21,-142,-143,-150,-152,-144,-145,-157,-158,-164,-165,306,-109,-116,-118,-125,-6,319,-15,-77,322,-4,-163,-164,306,324,325,-63,-59,-57,-10,-11,329,-55,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-141,-161,-154,-156,-166,334,336,-172,337,-164,-168,-108,-126,-7,-30,344,-9,-22,-170,-174,350,-167,-173,-169,-16,352,-61,-171,-175,]),'COLON':([20,21,22,23,24,25,26,27,28,29,30,31,32,33,48,52,54,55,56,61,64,78,80,90,93,95,96,97,98,102,104,105,106,113,114,115,116,117,118,119,121,122,123,124,130,136,144,145,146,157,158,159,161,197,198,199,201,202,203,223,224,230,231,241,245,247,248,249,255,260,262,272,273,274,275,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,311,313,318,319,323,328,329,346,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-132,-133,-140,-135,-136,-138,-139,-110,-127,155,162,-76,-62,-60,-29,-58,-17,-31,-56,-8,-14,-54,-1,-2,-3,-52,-50,-46,-41,-38,-35,-137,-134,-146,246,-117,-119,258,-78,-29,-5,-12,-13,-18,-19,-20,-21,-142,-143,-144,-145,-109,314,-116,-118,-125,-6,-77,-4,-63,327,-59,-57,-10,-11,-55,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-141,-108,246,-126,-7,-30,-9,-22,-61,]),'R_BRACE':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,93,95,96,97,98,102,104,105,106,113,114,115,116,117,118,119,121,122,123,125,142,143,147,148,149,151,152,153,154,158,159,161,163,170,171,173,174,175,197,198,199,201,202,203,226,240,242,252,253,254,255,259,262,268,269,272,274,275,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,297,298,312,316,317,319,321,323,328,329,330,331,342,343,346,347,348,353,],[67,-194,-79,-195,-190,151,153,-196,-181,-182,-183,-184,-185,-186,-198,-62,-60,-29,-58,-17,-31,-56,-8,-14,-54,-1,-2,-3,-52,-50,-46,-41,-38,-35,-80,241,-113,249,-128,-130,-191,-197,-192,253,-78,-29,-5,-199,-203,-207,-209,-210,-211,-12,-13,-18,-19,-20,-21,-176,311,-114,318,-193,-187,-6,-189,-4,-208,-212,-63,-59,-57,-10,-11,-55,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,330,-179,-115,-129,-131,-7,-188,-30,-9,-22,-177,347,-200,-202,-61,-178,-180,-201,]),'CASE':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,85,125,151,152,153,154,155,162,163,170,171,173,174,175,253,254,258,259,268,269,321,322,324,325,342,343,344,351,352,353,],[79,-194,-79,-195,-190,79,79,-196,-181,-182,-183,-184,-185,-186,-198,79,-80,-191,-197,-192,79,79,79,-199,-203,-207,-209,-210,-211,-193,-187,79,-189,-208,-212,-188,79,79,-204,-200,-202,-205,79,-206,-201,]),'DEFAULT':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,85,125,151,152,153,154,155,162,163,170,171,173,174,175,253,254,258,259,268,269,321,322,324,325,342,343,344,351,352,353,],[80,-194,-79,-195,-190,80,80,-196,-181,-182,-183,-184,-185,-186,-198,80,-80,-191,-197,-192,80,80,80,-199,-203,-207,-209,-210,-211,-193,-187,80,-189,-208,-212,-188,80,80,-204,-200,-202,-205,80,-206,-201,]),'IF':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,85,125,151,152,153,154,155,162,163,170,171,173,174,175,253,254,258,259,268,269,321,322,324,325,342,343,344,351,352,353,],[82,-194,-79,-195,-190,82,82,-196,-181,-182,-183,-184,-185,-186,-198,82,-80,-191,-197,-192,82,82,82,-199,-203,-207,-209,-210,-211,-193,-187,82,-189,-208,-212,-188,82,82,-204,-200,-202,-205,82,-206,-201,]),'SWITCH':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,85,125,151,152,153,154,155,162,163,170,171,173,174,175,253,254,258,259,268,269,321,322,324,325,342,343,344,351,352,353,],[84,-194,-79,-195,-190,84,84,-196,-181,-182,-183,-184,-185,-186,-198,84,-80,-191,-197,-192,84,84,84,-199,-203,-207,-209,-210,-211,-193,-187,84,-189,-208,-212,-188,84,84,-204,-200,-202,-205,84,-206,-201,]),'GOTO':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,85,125,151,152,153,154,155,162,163,170,171,173,174,175,253,254,258,259,268,269,321,322,324,325,342,343,344,351,352,353,],[86,-194,-79,-195,-190,86,86,-196,-181,-182,-183,-184,-185,-186,-198,86,-80,-191,-197,-192,86,86,86,-199,-203,-207,-209,-210,-211,-193,-187,86,-189,-208,-212,-188,86,86,-204,-200,-202,-205,86,-206,-201,]),'CONTINUE':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,85,125,151,152,153,154,155,162,163,170,171,173,174,175,253,254,258,259,268,269,321,322,324,325,342,343,344,351,352,353,],[87,-194,-79,-195,-190,87,87,-196,-181,-182,-183,-184,-185,-186,-198,87,-80,-191,-197,-192,87,87,87,-199,-203,-207,-209,-210,-211,-193,-187,87,-189,-208,-212,-188,87,87,-204,-200,-202,-205,87,-206,-201,]),'BREAK':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,85,125,151,152,153,154,155,162,163,170,171,173,174,175,253,254,258,259,268,269,321,322,324,325,342,343,344,351,352,353,],[88,-194,-79,-195,-190,88,88,-196,-181,-182,-183,-184,-185,-186,-198,88,-80,-191,-197,-192,88,88,88,-199,-203,-207,-209,-210,-211,-193,-187,88,-189,-208,-212,-188,88,88,-204,-200,-202,-205,88,-206,-201,]),'RETURN':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,85,125,151,152,153,154,155,162,163,170,171,173,174,175,253,254,258,259,268,269,321,322,324,325,342,343,344,351,352,353,],[89,-194,-79,-195,-190,89,89,-196,-181,-182,-183,-184,-185,-186,-198,89,-80,-191,-197,-192,89,89,89,-199,-203,-207,-209,-210,-211,-193,-187,89,-189,-208,-212,-188,89,89,-204,-200,-202,-205,89,-206,-201,]),'WHILE':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,85,125,151,152,153,154,155,162,163,170,171,173,174,175,253,254,258,259,268,269,321,322,324,325,342,343,344,351,352,353,],[91,-194,-79,-195,-190,91,91,-196,-181,-182,-183,-184,-185,-186,-198,91,-80,-191,-197,-192,91,91,91,-199,-203,-207,-209,-210,-211,-193,-187,91,-189,-208,-212,-188,91,91,-204,-200,-202,-205,91,-206,-201,]),'FOR':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,85,125,151,152,153,154,155,162,163,170,171,173,174,175,253,254,258,259,268,269,321,322,324,325,342,343,344,351,352,353,],[92,-194,-79,-195,-190,92,92,-196,-181,-182,-183,-184,-185,-186,-198,92,-80,-191,-197,-192,92,92,92,-199,-203,-207,-209,-210,-211,-193,-187,92,-189,-208,-212,-188,92,92,-204,-200,-202,-205,92,-206,-201,]),'INC_OP':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,98,99,100,101,103,105,106,107,108,109,110,111,112,114,115,116,125,127,129,151,152,153,154,155,156,160,161,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,253,254,255,258,259,262,263,268,269,271,277,278,303,314,319,320,321,322,324,325,326,327,328,331,342,343,344,351,352,353,],[99,-194,-79,-195,-190,99,99,-196,-181,-182,-183,-184,-185,-186,-198,-5,99,99,99,99,197,99,99,99,99,-8,-14,-23,-24,-25,-26,-27,-28,-1,-2,-3,-80,99,99,-191,-197,-192,99,99,99,99,-5,99,-199,99,99,99,-203,-207,-209,-210,-211,99,99,99,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,99,99,99,99,-12,-13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-193,-187,-6,99,-189,-4,99,-208,-212,99,-10,-11,99,99,-7,99,-188,99,99,-204,99,99,-9,99,-200,-202,-205,99,-206,-201,]),'DEC_OP':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,98,99,100,101,103,105,106,107,108,109,110,111,112,114,115,116,125,127,129,151,152,153,154,155,156,160,161,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,253,254,255,258,259,262,263,268,269,271,277,278,303,314,319,320,321,322,324,325,326,327,328,331,342,343,344,351,352,353,],[100,-194,-79,-195,-190,100,100,-196,-181,-182,-183,-184,-185,-186,-198,-5,100,100,100,100,198,100,100,100,100,-8,-14,-23,-24,-25,-26,-27,-28,-1,-2,-3,-80,100,100,-191,-197,-192,100,100,100,100,-5,100,-199,100,100,100,-203,-207,-209,-210,-211,100,100,100,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,100,100,100,100,-12,-13,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-193,-187,-6,100,-189,-4,100,-208,-212,100,-10,-11,100,100,-7,100,-188,100,100,-204,100,100,-9,100,-200,-202,-205,100,-206,-201,]),'SIZEOF':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,79,83,85,89,99,100,101,103,107,108,109,110,111,112,125,127,129,151,152,153,154,155,156,160,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,253,254,258,259,263,268,269,271,303,314,320,321,322,324,325,326,327,331,342,343,344,351,352,353,],[103,-194,-79,-195,-190,103,103,-196,-181,-182,-183,-184,-185,-186,-198,103,103,103,103,103,103,103,103,-23,-24,-25,-26,-27,-28,-80,103,103,-191,-197,-192,103,103,103,103,103,-199,103,103,103,-203,-207,-209,-210,-211,103,103,103,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-193,-187,103,-189,103,-208,-212,103,103,103,103,-188,103,103,-204,103,103,103,-200,-202,-205,103,-206,-201,]),'AMP':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,96,98,99,100,101,102,103,105,106,107,108,109,110,111,112,114,115,116,117,118,119,121,122,123,125,127,129,151,152,153,154,155,156,159,160,161,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,253,254,255,258,259,262,263,268,269,271,277,278,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,303,314,319,320,321,322,323,324,325,326,327,328,329,331,342,343,344,351,352,353,],[107,-194,-79,-195,-190,107,107,-196,-181,-182,-183,-184,-185,-186,-198,-5,107,107,107,107,-29,-17,107,107,107,-31,107,-8,-14,-23,-24,-25,-26,-27,-28,-1,-2,-3,207,-50,-46,-41,-38,-35,-80,107,107,-191,-197,-192,107,107,107,-29,107,-5,107,-199,107,107,107,-203,-207,-209,-210,-211,107,107,107,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,107,107,107,107,-12,-13,-18,107,-19,-20,-21,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-193,-187,-6,107,-189,-4,107,-208,-212,107,-10,-11,207,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,107,107,-7,107,-188,107,-30,107,-204,107,107,-9,-22,107,-200,-202,-205,107,-206,-201,]),'PLUS':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,96,98,99,100,101,102,103,105,106,107,108,109,110,111,112,114,115,116,122,123,125,127,129,151,152,153,154,155,156,159,160,161,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,253,254,255,258,259,262,263,268,269,271,277,278,289,290,291,292,293,294,295,303,314,319,320,321,322,323,324,325,326,327,328,329,331,342,343,344,351,352,353,],[109,-194,-79,-195,-190,109,109,-196,-181,-182,-183,-184,-185,-186,-198,-5,109,109,109,109,-29,-17,109,109,109,-31,109,-8,-14,-23,-24,-25,-26,-27,-28,-1,-2,-3,216,-35,-80,109,109,-191,-197,-192,109,109,109,-29,109,-5,109,-199,109,109,109,-203,-207,-209,-210,-211,109,109,109,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,109,109,109,109,-12,-13,-18,109,-19,-20,-21,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-193,-187,-6,109,-189,-4,109,-208,-212,109,-10,-11,216,216,-36,-37,-32,-33,-34,109,109,-7,109,-188,109,-30,109,-204,109,109,-9,-22,109,-200,-202,-205,109,-206,-201,]),'MINUS':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,96,98,99,100,101,102,103,105,106,107,108,109,110,111,112,114,115,116,122,123,125,127,129,151,152,153,154,155,156,159,160,161,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,253,254,255,258,259,262,263,268,269,271,277,278,289,290,291,292,293,294,295,303,314,319,320,321,322,323,324,325,326,327,328,329,331,342,343,344,351,352,353,],[110,-194,-79,-195,-190,110,110,-196,-181,-182,-183,-184,-185,-186,-198,-5,110,110,110,110,-29,-17,110,110,110,-31,110,-8,-14,-23,-24,-25,-26,-27,-28,-1,-2,-3,217,-35,-80,110,110,-191,-197,-192,110,110,110,-29,110,-5,110,-199,110,110,110,-203,-207,-209,-210,-211,110,110,110,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,110,110,110,110,-12,-13,-18,110,-19,-20,-21,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-193,-187,-6,110,-189,-4,110,-208,-212,110,-10,-11,217,217,-36,-37,-32,-33,-34,110,110,-7,110,-188,110,-30,110,-204,110,110,-9,-22,110,-200,-202,-205,110,-206,-201,]),'TILDA':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,79,83,85,89,99,100,101,103,107,108,109,110,111,112,125,127,129,151,152,153,154,155,156,160,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,253,254,258,259,263,268,269,271,303,314,320,321,322,324,325,326,327,331,342,343,344,351,352,353,],[111,-194,-79,-195,-190,111,111,-196,-181,-182,-183,-184,-185,-186,-198,111,111,111,111,111,111,111,111,-23,-24,-25,-26,-27,-28,-80,111,111,-191,-197,-192,111,111,111,111,111,-199,111,111,111,-203,-207,-209,-210,-211,111,111,111,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,-193,-187,111,-189,111,-208,-212,111,111,111,111,-188,111,111,-204,111,111,111,-200,-202,-205,111,-206,-201,]),'EXCLAIM':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,79,83,85,89,99,100,101,103,107,108,109,110,111,112,125,127,129,151,152,153,154,155,156,160,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,253,254,258,259,263,268,269,271,303,314,320,321,322,324,325,326,327,331,342,343,344,351,352,353,],[112,-194,-79,-195,-190,112,112,-196,-181,-182,-183,-184,-185,-186,-198,112,112,112,112,112,112,112,112,-23,-24,-25,-26,-27,-28,-80,112,112,-191,-197,-192,112,112,112,112,112,-199,112,112,112,-203,-207,-209,-210,-211,112,112,112,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-193,-187,112,-189,112,-208,-212,112,112,112,112,-188,112,112,-204,112,112,112,-200,-202,-205,112,-206,-201,]),'CONSTANT':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,79,83,85,89,99,100,101,103,107,108,109,110,111,112,125,127,129,151,152,153,154,155,156,160,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,253,254,258,259,263,268,269,271,303,314,320,321,322,324,325,326,327,331,342,343,344,351,352,353,],[115,-194,-79,-195,-190,115,115,-196,-181,-182,-183,-184,-185,-186,-198,115,115,115,115,115,115,115,115,-23,-24,-25,-26,-27,-28,-80,115,115,-191,-197,-192,115,115,115,115,115,-199,115,115,115,-203,-207,-209,-210,-211,115,115,115,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-193,-187,115,-189,115,-208,-212,115,115,115,115,-188,115,115,-204,115,115,115,-200,-202,-205,115,-206,-201,]),'STRING_LITERAL':([41,42,44,66,67,68,69,70,71,72,73,74,75,76,77,79,83,85,89,99,100,101,103,107,108,109,110,111,112,125,127,129,151,152,153,154,155,156,160,162,163,164,165,169,170,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,253,254,258,259,263,268,269,271,303,314,320,321,322,324,325,326,327,331,342,343,344,351,352,353,],[116,-194,-79,-195,-190,116,116,-196,-181,-182,-183,-184,-185,-186,-198,116,116,116,116,116,116,116,116,-23,-24,-25,-26,-27,-28,-80,116,116,-191,-197,-192,116,116,116,116,116,-199,116,116,116,-203,-207,-209,-210,-211,116,116,116,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-193,-187,116,-189,116,-208,-212,116,116,116,116,-188,116,116,-204,116,116,116,-200,-202,-205,116,-206,-201,]),'EQUAL':([46,48,50,52,54,55,56,78,94,96,98,105,106,114,115,116,124,130,136,149,159,161,197,198,199,201,202,203,223,224,230,231,255,262,277,278,296,319,323,328,329,],[-137,-140,129,-135,-136,-138,-139,-5,180,-64,-17,-8,-14,-1,-2,-3,-137,-134,-146,251,-29,-5,-12,-13,-18,-19,-20,-21,-142,-143,-144,-145,-6,-4,-10,-11,-141,-7,-30,-9,-22,]),'ELSE':([67,71,72,73,74,75,76,77,151,153,163,170,171,173,174,175,253,254,259,268,269,321,342,343,353,],[-190,-181,-182,-183,-184,-185,-186,-198,-191,-192,-199,-203,-207,-209,-210,-211,-193,-187,-189,-208,-212,-188,351,-202,-201,]),'DOT':([78,98,105,106,114,115,116,161,197,198,255,262,277,278,319,328,],[-5,195,-8,-14,-1,-2,-3,-5,-12,-13,-6,-4,-10,-11,-7,-9,]),'PTR_OP':([78,98,105,106,114,115,116,161,197,198,255,262,277,278,319,328,],[-5,196,-8,-14,-1,-2,-3,-5,-12,-13,-6,-4,-10,-11,-7,-9,]),'MUL_ASSIGN':([78,94,96,98,105,106,114,115,116,159,161,197,198,199,201,202,203,255,262,277,278,319,323,328,329,],[-5,181,-64,-17,-8,-14,-1,-2,-3,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-7,-30,-9,-22,]),'DIV_ASSIGN':([78,94,96,98,105,106,114,115,116,159,161,197,198,199,201,202,203,255,262,277,278,319,323,328,329,],[-5,182,-64,-17,-8,-14,-1,-2,-3,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-7,-30,-9,-22,]),'MOD_ASSIGN':([78,94,96,98,105,106,114,115,116,159,161,197,198,199,201,202,203,255,262,277,278,319,323,328,329,],[-5,183,-64,-17,-8,-14,-1,-2,-3,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-7,-30,-9,-22,]),'ADD_ASSIGN':([78,94,96,98,105,106,114,115,116,159,161,197,198,199,201,202,203,255,262,277,278,319,323,328,329,],[-5,184,-64,-17,-8,-14,-1,-2,-3,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-7,-30,-9,-22,]),'SUB_ASSIGN':([78,94,96,98,105,106,114,115,116,159,161,197,198,199,201,202,203,255,262,277,278,319,323,328,329,],[-5,185,-64,-17,-8,-14,-1,-2,-3,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-7,-30,-9,-22,]),'LEFT_ASSIGN':([78,94,96,98,105,106,114,115,116,159,161,197,198,199,201,202,203,255,262,277,278,319,323,328,329,],[-5,186,-64,-17,-8,-14,-1,-2,-3,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-7,-30,-9,-22,]),'RIGHT_ASSIGN':([78,94,96,98,105,106,114,115,116,159,161,197,198,199,201,202,203,255,262,277,278,319,323,328,329,],[-5,187,-64,-17,-8,-14,-1,-2,-3,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-7,-30,-9,-22,]),'AND_ASSIGN':([78,94,96,98,105,106,114,115,116,159,161,197,198,199,201,202,203,255,262,277,278,319,323,328,329,],[-5,188,-64,-17,-8,-14,-1,-2,-3,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-7,-30,-9,-22,]),'XOR_ASSIGN':([78,94,96,98,105,106,114,115,116,159,161,197,198,199,201,202,203,255,262,277,278,319,323,328,329,],[-5,189,-64,-17,-8,-14,-1,-2,-3,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-7,-30,-9,-22,]),'OR_ASSIGN':([78,94,96,98,105,106,114,115,116,159,161,197,198,199,201,202,203,255,262,277,278,319,323,328,329,],[-5,190,-64,-17,-8,-14,-1,-2,-3,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-7,-30,-9,-22,]),'SLASH':([78,96,98,102,105,106,114,115,116,123,159,161,197,198,199,201,202,203,255,262,277,278,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,-1,-2,-3,219,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,219,219,-32,-33,-34,-7,-30,-9,-22,]),'PERCENT':([78,96,98,102,105,106,114,115,116,123,159,161,197,198,199,201,202,203,255,262,277,278,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,-1,-2,-3,220,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,220,220,-32,-33,-34,-7,-30,-9,-22,]),'LEFT_OP':([78,96,98,102,105,106,114,115,116,121,122,123,159,161,197,198,199,201,202,203,255,262,277,278,283,284,285,286,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,-1,-2,-3,214,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,214,214,214,214,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'RIGHT_OP':([78,96,98,102,105,106,114,115,116,121,122,123,159,161,197,198,199,201,202,203,255,262,277,278,283,284,285,286,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,-1,-2,-3,215,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,215,215,215,215,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'LESS':([78,96,98,102,105,106,114,115,116,119,121,122,123,159,161,197,198,199,201,202,203,255,262,277,278,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,-1,-2,-3,208,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-42,-43,-44,-45,208,208,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'GREATER':([78,96,98,102,105,106,114,115,116,119,121,122,123,159,161,197,198,199,201,202,203,255,262,277,278,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,-1,-2,-3,209,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-42,-43,-44,-45,209,209,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'LE_OP':([78,96,98,102,105,106,114,115,116,119,121,122,123,159,161,197,198,199,201,202,203,255,262,277,278,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,-1,-2,-3,210,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-42,-43,-44,-45,210,210,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'GE_OP':([78,96,98,102,105,106,114,115,116,119,121,122,123,159,161,197,198,199,201,202,203,255,262,277,278,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,-1,-2,-3,211,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-42,-43,-44,-45,211,211,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'CARET':([78,96,98,102,105,106,113,114,115,116,117,118,119,121,122,123,159,161,197,198,199,201,202,203,255,262,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,206,-1,-2,-3,-52,-50,-46,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,206,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'PIPE':([78,96,98,102,104,105,106,113,114,115,116,117,118,119,121,122,123,159,161,197,198,199,201,202,203,255,262,275,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,205,-8,-14,-54,-1,-2,-3,-52,-50,-46,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,205,-10,-11,-55,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'AND_OP':([78,96,97,98,102,104,105,106,113,114,115,116,117,118,119,121,122,123,159,161,197,198,199,201,202,203,255,262,274,275,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,193,-17,-31,-56,-8,-14,-54,-1,-2,-3,-52,-50,-46,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,193,-57,-10,-11,-55,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'QUEST':([78,95,96,97,98,102,104,105,106,113,114,115,116,117,118,119,121,122,123,159,161,197,198,199,201,202,203,255,262,274,275,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,191,-29,-58,-17,-31,-56,-8,-14,-54,-1,-2,-3,-52,-50,-46,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-59,-57,-10,-11,-55,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'OR_OP':([78,95,96,97,98,102,104,105,106,113,114,115,116,117,118,119,121,122,123,159,161,197,198,199,201,202,203,255,262,274,275,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,192,-29,-58,-17,-31,-56,-8,-14,-54,-1,-2,-3,-52,-50,-46,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-59,-57,-10,-11,-55,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'EQ_OP':([78,96,98,102,105,106,114,115,116,118,119,120,121,122,123,159,161,197,198,199,201,202,203,255,262,277,278,282,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,-1,-2,-3,-49,-46,212,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-49,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'NE_OP':([78,96,98,102,105,106,114,115,116,118,119,120,121,122,123,159,161,197,198,199,201,202,203,255,262,277,278,282,283,284,285,286,287,288,289,290,291,292,293,294,295,319,323,328,329,],[-5,-29,-17,-31,-8,-14,-1,-2,-3,-49,-46,213,-41,-38,-35,-29,-5,-12,-13,-18,-19,-20,-21,-6,-4,-10,-11,-49,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,-7,-30,-9,-22,]),'R_SQUARE':([90,93,95,96,97,98,102,104,105,106,113,114,115,116,117,118,119,121,122,123,127,158,159,161,197,198,199,201,202,203,222,239,255,260,262,272,274,275,276,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,303,310,319,323,328,329,333,346,],[-76,-62,-60,-29,-58,-17,-31,-56,-8,-14,-54,-1,-2,-3,-52,-50,-46,-41,-38,-35,223,-78,-29,-5,-12,-13,-18,-19,-20,-21,296,309,-6,-77,-4,-63,-59,-57,328,-10,-11,-55,-53,-51,-42,-43,-44,-45,-47,-48,-39,-40,-36,-37,-32,-33,-34,332,338,-7,-30,-9,-22,349,-61,]),'ELLIPSIS':([233,],[300,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,38,]),'function_definition':([0,1,],[3,3,]),'other_declarations':([0,1,],[4,4,]),'function_header':([0,1,],[5,5,]),'declaration':([0,1,5,40,41,69,],[6,6,42,66,42,66,]),'fheader_type1':([0,1,],[7,7,]),'fheader_type2':([0,1,],[8,8,]),'declaration_specifiers':([0,1,5,11,12,13,40,41,60,69,233,238,266,304,],[9,9,43,57,58,59,43,43,140,43,140,140,140,140,]),'function_declaration':([0,1,9,43,49,51,126,140,144,236,238,308,313,],[10,10,46,124,124,124,124,124,124,124,124,124,124,]),'storage_class_specifier':([0,1,5,11,12,13,40,41,60,69,233,238,266,304,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'type_specifier':([0,1,5,11,12,13,40,41,60,62,69,83,141,142,145,146,160,204,233,238,240,266,304,],[12,12,12,12,12,12,12,12,12,145,12,145,145,145,145,145,145,145,12,12,145,12,12,]),'type_qualifier':([0,1,5,11,12,13,40,41,53,60,62,69,83,131,141,142,145,146,160,204,233,238,240,266,304,],[13,13,13,13,13,13,13,13,133,13,146,13,146,229,146,146,146,146,146,146,13,13,146,13,13,]),'struct_or_union_specifier':([0,1,5,11,12,13,40,41,60,62,69,83,141,142,145,146,160,204,233,238,240,266,304,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'enum_specifier':([0,1,5,11,12,13,40,41,60,62,69,83,141,142,145,146,160,204,233,238,240,266,304,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'struct_or_union':([0,1,5,11,12,13,40,41,60,62,69,83,141,142,145,146,160,204,233,238,240,266,304,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'compound_statement':([5,40,41,68,69,85,154,155,162,258,322,324,351,],[39,65,72,72,72,72,72,72,72,72,72,72,72,]),'declaration_list':([5,41,],[40,69,]),'init_declarator_list':([9,43,],[45,45,]),'init_declarator':([9,43,126,],[47,47,221,]),'declarator':([9,43,49,126,140,144,238,313,],[50,50,128,50,234,245,128,245,]),'pointer':([9,43,49,53,126,131,140,144,168,238,266,313,],[51,51,51,132,51,228,236,51,265,308,265,51,]),'direct_declarator':([9,43,49,51,126,140,144,236,238,308,313,],[52,52,52,130,52,52,52,130,52,130,52,]),'variable_declaration':([9,43,49,51,126,140,144,236,238,308,313,],[54,54,54,54,54,54,54,54,54,54,54,]),'variable_declaration1':([9,43,49,51,126,140,144,236,238,308,313,],[55,55,55,55,55,55,55,55,55,55,55,]),'variable_declaration2':([9,43,49,51,126,140,144,236,238,308,313,],[56,56,56,56,56,56,56,56,56,56,56,]),'statement_list':([41,69,],[68,154,]),'statement':([41,68,69,85,154,155,162,258,322,324,351,],[70,152,70,171,152,254,259,321,342,343,353,]),'labeled_statement':([41,68,69,85,154,155,162,258,322,324,351,],[71,71,71,71,71,71,71,71,71,71,71,]),'expression_statement':([41,68,69,85,154,155,162,178,258,271,322,324,351,],[73,73,73,73,73,73,73,271,73,326,73,73,73,]),'selection_statement':([41,68,69,85,154,155,162,258,322,324,351,],[74,74,74,74,74,74,74,74,74,74,74,]),'iteration_statement':([41,68,69,85,154,155,162,258,322,324,351,],[75,75,75,75,75,75,75,75,75,75,75,]),'jump_statement':([41,68,69,85,154,155,162,258,322,324,351,],[76,76,76,76,76,76,76,76,76,76,76,]),'expression':([41,68,69,83,85,89,154,155,160,162,165,169,177,178,191,194,200,204,258,271,322,324,326,351,],[81,81,81,166,81,176,81,81,166,81,261,267,270,81,273,276,166,166,81,81,81,81,345,81,]),'iteration_header':([41,68,69,85,154,155,162,258,322,324,351,],[85,85,85,85,85,85,85,85,85,85,85,]),'assignment_expression':([41,68,69,83,85,89,129,154,155,156,160,162,164,165,169,177,178,179,191,194,200,204,227,258,271,320,322,324,326,331,351,],[90,90,90,90,90,90,226,90,90,257,90,90,260,90,90,90,90,272,90,90,90,90,226,90,90,341,90,90,90,226,90,]),'conditional_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,194,200,204,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[93,93,93,158,93,93,93,158,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,158,158,158,93,93,158,158,93,93,93,93,346,93,93,]),'assignment_lhs':([41,68,69,83,85,89,129,154,155,156,160,162,164,165,169,177,178,179,191,194,200,204,227,258,271,320,322,324,326,331,351,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'logical_or_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,194,200,204,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'unary_expression':([41,68,69,79,83,85,89,99,100,101,103,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,258,263,271,303,314,320,322,324,326,327,331,351,],[96,96,96,159,96,96,96,199,201,159,203,159,96,96,96,96,96,96,96,96,96,96,96,96,96,159,159,96,96,96,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,96,159,159,159,96,159,96,159,159,96,96,96,96,159,96,96,]),'logical_and_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,194,200,204,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,274,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'postfix_expression':([41,68,69,79,83,85,89,99,100,101,103,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,258,263,271,303,314,320,322,324,326,327,331,351,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'unary_operator':([41,68,69,79,83,85,89,99,100,101,103,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,258,263,271,303,314,320,322,324,326,327,331,351,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'cast_expression':([41,68,69,79,83,85,89,101,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,258,263,271,303,314,320,322,324,326,327,331,351,],[102,102,102,102,102,102,102,202,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,293,294,295,102,102,102,102,102,323,102,102,102,102,102,102,102,102,102,102,]),'inclusive_or_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,275,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'primary_expression':([41,68,69,79,83,85,89,99,100,101,103,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,258,263,271,303,314,320,322,324,326,327,331,351,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'function_call':([41,68,69,79,83,85,89,99,100,101,103,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,258,263,271,303,314,320,322,324,326,327,331,351,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'exclusive_or_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,280,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'variable_use':([41,68,69,79,83,85,89,99,100,101,103,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,227,239,246,251,258,263,271,303,314,320,322,324,326,327,331,351,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'and_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,281,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'equality_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,282,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'relational_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,212,213,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,287,288,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'equality_exp_lhs':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'shift_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,283,284,285,286,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'additive_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,289,290,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'multiplicative_expression':([41,68,69,79,83,85,89,127,129,154,155,156,160,162,164,165,169,177,178,179,191,192,193,194,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,227,239,246,251,258,271,303,314,320,322,324,326,327,331,351,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,291,292,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'type_qualifier_list':([53,],[131,]),'parameter_type_list':([60,238,266,304,],[135,307,307,335,]),'identifier_list':([60,],[137,]),'parameter_list':([60,238,266,304,],[138,138,138,138,]),'parameter_declaration':([60,233,238,266,304,],[139,301,139,139,139,]),'struct_declaration_list':([62,141,],[142,240,]),'struct_declaration':([62,141,142,240,],[143,143,242,242,]),'specifier_qualifier_list':([62,83,141,142,145,146,160,204,240,],[144,168,144,144,247,248,168,168,144,]),'enumerator_list':([63,150,],[147,252,]),'enumerator':([63,150,250,],[148,148,316,]),'constant_expression':([79,127,239,246,251,303,314,],[157,222,310,315,317,333,340,]),'type_name':([83,160,204,],[167,167,279,]),'iteration_body':([85,],[170,]),'assignment_operator':([94,],[179,]),'initializer':([129,227,331,],[225,298,348,]),'abstract_declarator':([140,168,238,266,],[235,264,305,305,]),'direct_abstract_declarator':([140,168,236,238,265,266,308,],[237,237,302,237,302,237,302,]),'struct_declarator_list':([144,],[243,]),'struct_declarator':([144,313,],[244,339,]),'argument_expression_list':([156,],[256,]),'initializer_list':([227,],[297,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('primary_expression -> variable_use','primary_expression',1,'p_primary_expression','C_Parser_new.py',13),
  ('primary_expression -> CONSTANT','primary_expression',1,'p_primary_expression','C_Parser_new.py',14),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','C_Parser_new.py',15),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','C_Parser_new.py',16),
  ('variable_use -> IDENTIFIER','variable_use',1,'p_variable_use','C_Parser_new.py',22),
  ('function_call -> IDENTIFIER L_PAREN R_PAREN','function_call',3,'p_function_call','C_Parser_new.py',50),
  ('function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN','function_call',4,'p_function_call','C_Parser_new.py',51),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','C_Parser_new.py',59),
  ('postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE','postfix_expression',4,'p_postfix_expression','C_Parser_new.py',60),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','C_Parser_new.py',61),
  ('postfix_expression -> postfix_expression PTR_OP IDENTIFIER','postfix_expression',3,'p_postfix_expression','C_Parser_new.py',62),
  ('postfix_expression -> postfix_expression INC_OP','postfix_expression',2,'p_postfix_expression','C_Parser_new.py',63),
  ('postfix_expression -> postfix_expression DEC_OP','postfix_expression',2,'p_postfix_expression','C_Parser_new.py',64),
  ('postfix_expression -> function_call','postfix_expression',1,'p_postfix_expression','C_Parser_new.py',65),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','C_Parser_new.py',72),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','C_Parser_new.py',73),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','C_Parser_new.py',79),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression','C_Parser_new.py',80),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression','C_Parser_new.py',81),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','C_Parser_new.py',82),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','C_Parser_new.py',83),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','C_Parser_new.py',84),
  ('unary_operator -> AMP','unary_operator',1,'p_unary_operator','C_Parser_new.py',92),
  ('unary_operator -> STAR','unary_operator',1,'p_unary_operator','C_Parser_new.py',93),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','C_Parser_new.py',94),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','C_Parser_new.py',95),
  ('unary_operator -> TILDA','unary_operator',1,'p_unary_operator','C_Parser_new.py',96),
  ('unary_operator -> EXCLAIM','unary_operator',1,'p_unary_operator','C_Parser_new.py',97),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','C_Parser_new.py',103),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','C_Parser_new.py',104),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','C_Parser_new.py',110),
  ('multiplicative_expression -> multiplicative_expression STAR cast_expression','multiplicative_expression',3,'p_multiplicative_expression','C_Parser_new.py',111),
  ('multiplicative_expression -> multiplicative_expression SLASH cast_expression','multiplicative_expression',3,'p_multiplicative_expression','C_Parser_new.py',112),
  ('multiplicative_expression -> multiplicative_expression PERCENT cast_expression','multiplicative_expression',3,'p_multiplicative_expression','C_Parser_new.py',113),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','C_Parser_new.py',119),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','C_Parser_new.py',120),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','C_Parser_new.py',121),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','C_Parser_new.py',127),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_shift_expression','C_Parser_new.py',128),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_shift_expression','C_Parser_new.py',129),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','C_Parser_new.py',135),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',136),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',137),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',138),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',139),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','C_Parser_new.py',145),
  ('equality_expression -> equality_exp_lhs EQ_OP relational_expression','equality_expression',3,'p_equality_expression','C_Parser_new.py',146),
  ('equality_expression -> equality_exp_lhs NE_OP relational_expression','equality_expression',3,'p_equality_expression','C_Parser_new.py',147),
  ('equality_exp_lhs -> equality_expression','equality_exp_lhs',1,'p_equality_exp_lhs','C_Parser_new.py',153),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','C_Parser_new.py',159),
  ('and_expression -> and_expression AMP equality_expression','and_expression',3,'p_and_expression','C_Parser_new.py',160),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','C_Parser_new.py',166),
  ('exclusive_or_expression -> exclusive_or_expression CARET and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','C_Parser_new.py',167),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','C_Parser_new.py',173),
  ('inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','C_Parser_new.py',174),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','C_Parser_new.py',180),
  ('logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','C_Parser_new.py',181),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','C_Parser_new.py',187),
  ('logical_or_expression -> logical_or_expression OR_OP logical_and_expression','logical_or_expression',3,'p_logical_or_expression','C_Parser_new.py',188),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','C_Parser_new.py',194),
  ('conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','C_Parser_new.py',195),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','C_Parser_new.py',201),
  ('assignment_expression -> assignment_lhs assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','C_Parser_new.py',202),
  ('assignment_lhs -> unary_expression','assignment_lhs',1,'p_assignment_lhs','C_Parser_new.py',208),
  ('assignment_operator -> EQUAL','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',214),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',215),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',216),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',217),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',218),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',219),
  ('assignment_operator -> LEFT_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',220),
  ('assignment_operator -> RIGHT_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',221),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',222),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',223),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',224),
  ('expression -> assignment_expression','expression',1,'p_expression','C_Parser_new.py',230),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','C_Parser_new.py',231),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','C_Parser_new.py',237),
  ('declaration -> declaration_specifiers SEMI','declaration',2,'p_declaration','C_Parser_new.py',243),
  ('declaration -> declaration_specifiers init_declarator_list SEMI','declaration',3,'p_declaration','C_Parser_new.py',244),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','C_Parser_new.py',250),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','C_Parser_new.py',251),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','C_Parser_new.py',252),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','C_Parser_new.py',253),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','C_Parser_new.py',254),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','C_Parser_new.py',255),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','C_Parser_new.py',261),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','C_Parser_new.py',262),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','C_Parser_new.py',268),
  ('init_declarator -> declarator EQUAL initializer','init_declarator',3,'p_init_declarator','C_Parser_new.py',269),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',276),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',277),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',278),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',279),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',280),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','C_Parser_new.py',286),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','C_Parser_new.py',287),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','C_Parser_new.py',288),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','C_Parser_new.py',289),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','C_Parser_new.py',290),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','C_Parser_new.py',291),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','C_Parser_new.py',292),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','C_Parser_new.py',293),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','C_Parser_new.py',294),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','C_Parser_new.py',295),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','C_Parser_new.py',296),
  ('type_specifier -> TYPE_NAME','type_specifier',1,'p_type_specifier','C_Parser_new.py',297),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE','struct_or_union_specifier',5,'p_struct_or_union_specifier','C_Parser_new.py',303),
  ('struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE','struct_or_union_specifier',4,'p_struct_or_union_specifier','C_Parser_new.py',304),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','C_Parser_new.py',305),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','C_Parser_new.py',311),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','C_Parser_new.py',312),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','C_Parser_new.py',318),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','C_Parser_new.py',319),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI','struct_declaration',3,'p_struct_declaration','C_Parser_new.py',325),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','C_Parser_new.py',331),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','C_Parser_new.py',332),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','C_Parser_new.py',333),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','C_Parser_new.py',334),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','C_Parser_new.py',340),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','C_Parser_new.py',341),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','C_Parser_new.py',347),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','C_Parser_new.py',348),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','C_Parser_new.py',349),
  ('enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE','enum_specifier',4,'p_enum_specifier','C_Parser_new.py',355),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE','enum_specifier',5,'p_enum_specifier','C_Parser_new.py',356),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','C_Parser_new.py',357),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','C_Parser_new.py',364),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','C_Parser_new.py',365),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','C_Parser_new.py',371),
  ('enumerator -> IDENTIFIER EQUAL constant_expression','enumerator',3,'p_enumerator','C_Parser_new.py',372),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','C_Parser_new.py',378),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','C_Parser_new.py',379),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','C_Parser_new.py',385),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','C_Parser_new.py',386),
  ('direct_declarator -> variable_declaration','direct_declarator',1,'p_direct_declarator','C_Parser_new.py',414),
  ('direct_declarator -> function_declaration','direct_declarator',1,'p_direct_declarator','C_Parser_new.py',415),
  ('variable_declaration -> variable_declaration1','variable_declaration',1,'p_variable_declaration','C_Parser_new.py',442),
  ('variable_declaration -> variable_declaration2','variable_declaration',1,'p_variable_declaration','C_Parser_new.py',443),
  ('variable_declaration1 -> IDENTIFIER','variable_declaration1',1,'p_variable_declaration1','C_Parser_new.py',449),
  ('variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE','variable_declaration1',4,'p_variable_declaration1','C_Parser_new.py',450),
  ('variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE','variable_declaration1',3,'p_variable_declaration1','C_Parser_new.py',451),
  ('variable_declaration2 -> L_PAREN declarator R_PAREN','variable_declaration2',3,'p_variable_declaration2','C_Parser_new.py',462),
  ('function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN','function_declaration',4,'p_function_declaration','C_Parser_new.py',477),
  ('function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN','function_declaration',4,'p_function_declaration','C_Parser_new.py',478),
  ('function_declaration -> IDENTIFIER L_PAREN R_PAREN','function_declaration',3,'p_function_declaration','C_Parser_new.py',479),
  ('pointer -> STAR','pointer',1,'p_pointer','C_Parser_new.py',489),
  ('pointer -> STAR type_qualifier_list','pointer',2,'p_pointer','C_Parser_new.py',490),
  ('pointer -> STAR pointer','pointer',2,'p_pointer','C_Parser_new.py',491),
  ('pointer -> STAR type_qualifier_list pointer','pointer',3,'p_pointer','C_Parser_new.py',492),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','C_Parser_new.py',498),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','C_Parser_new.py',499),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','C_Parser_new.py',505),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','C_Parser_new.py',506),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','C_Parser_new.py',513),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','C_Parser_new.py',514),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','C_Parser_new.py',520),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','C_Parser_new.py',521),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','C_Parser_new.py',522),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','C_Parser_new.py',528),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','C_Parser_new.py',529),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','C_Parser_new.py',535),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','C_Parser_new.py',536),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','C_Parser_new.py',542),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','C_Parser_new.py',543),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','C_Parser_new.py',544),
  ('direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',550),
  ('direct_abstract_declarator -> L_SQUARE R_SQUARE','direct_abstract_declarator',2,'p_direct_abstract_declarator','C_Parser_new.py',551),
  ('direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',552),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',553),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE','direct_abstract_declarator',4,'p_direct_abstract_declarator','C_Parser_new.py',554),
  ('direct_abstract_declarator -> L_PAREN R_PAREN','direct_abstract_declarator',2,'p_direct_abstract_declarator','C_Parser_new.py',555),
  ('direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',556),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',557),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator','C_Parser_new.py',558),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','C_Parser_new.py',564),
  ('initializer -> L_BRACE initializer_list R_BRACE','initializer',3,'p_initializer','C_Parser_new.py',565),
  ('initializer -> L_BRACE initializer_list COMMA R_BRACE','initializer',4,'p_initializer','C_Parser_new.py',566),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','C_Parser_new.py',572),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','C_Parser_new.py',573),
  ('statement -> labeled_statement','statement',1,'p_statement','C_Parser_new.py',579),
  ('statement -> compound_statement','statement',1,'p_statement','C_Parser_new.py',580),
  ('statement -> expression_statement','statement',1,'p_statement','C_Parser_new.py',581),
  ('statement -> selection_statement','statement',1,'p_statement','C_Parser_new.py',582),
  ('statement -> iteration_statement','statement',1,'p_statement','C_Parser_new.py',583),
  ('statement -> jump_statement','statement',1,'p_statement','C_Parser_new.py',584),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','C_Parser_new.py',590),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','C_Parser_new.py',591),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','C_Parser_new.py',592),
  ('compound_statement -> L_BRACE R_BRACE','compound_statement',2,'p_compound_statement','C_Parser_new.py',600),
  ('compound_statement -> L_BRACE statement_list R_BRACE','compound_statement',3,'p_compound_statement','C_Parser_new.py',601),
  ('compound_statement -> L_BRACE declaration_list R_BRACE','compound_statement',3,'p_compound_statement','C_Parser_new.py',602),
  ('compound_statement -> L_BRACE declaration_list statement_list R_BRACE','compound_statement',4,'p_compound_statement','C_Parser_new.py',603),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','C_Parser_new.py',631),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','C_Parser_new.py',632),
  ('statement_list -> statement','statement_list',1,'p_statement_list','C_Parser_new.py',638),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','C_Parser_new.py',639),
  ('expression_statement -> SEMI','expression_statement',1,'p_expression_statement','C_Parser_new.py',645),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','C_Parser_new.py',646),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','C_Parser_new.py',652),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','C_Parser_new.py',653),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','C_Parser_new.py',654),
  ('iteration_statement -> iteration_header iteration_body','iteration_statement',2,'p_iteration_statement','C_Parser_new.py',659),
  ('iteration_header -> WHILE L_PAREN expression R_PAREN','iteration_header',4,'p_iteration_header','C_Parser_new.py',663),
  ('iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN','iteration_header',5,'p_iteration_header','C_Parser_new.py',664),
  ('iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN','iteration_header',6,'p_iteration_header','C_Parser_new.py',665),
  ('iteration_body -> statement','iteration_body',1,'p_iteration_body','C_Parser_new.py',674),
  ('jump_statement -> GOTO IDENTIFIER SEMI','jump_statement',3,'p_jump_statement','C_Parser_new.py',684),
  ('jump_statement -> CONTINUE SEMI','jump_statement',2,'p_jump_statement','C_Parser_new.py',685),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','C_Parser_new.py',686),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement','C_Parser_new.py',687),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement','C_Parser_new.py',688),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','C_Parser_new.py',694),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','C_Parser_new.py',695),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','C_Parser_new.py',708),
  ('external_declaration -> other_declarations','external_declaration',1,'p_external_declaration','C_Parser_new.py',709),
  ('other_declarations -> declaration','other_declarations',1,'p_other_declarations','C_Parser_new.py',715),
  ('function_header -> fheader_type1','function_header',1,'p_function_header','C_Parser_new.py',758),
  ('function_header -> fheader_type2','function_header',1,'p_function_header','C_Parser_new.py',759),
  ('fheader_type1 -> declaration_specifiers function_declaration','fheader_type1',2,'p_fheader_type1','C_Parser_new.py',767),
  ('fheader_type2 -> function_declaration','fheader_type2',1,'p_fheader_type2','C_Parser_new.py',775),
  ('function_definition -> function_header compound_statement','function_definition',2,'p_function_definition','C_Parser_new.py',784),
  ('function_definition -> function_header declaration_list compound_statement','function_definition',3,'p_function_definition','C_Parser_new.py',785),
]
