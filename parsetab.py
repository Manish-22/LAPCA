
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'translation_unitADD_ASSIGN AMP AND_ASSIGN AND_OP AUTO BREAK CARET CASE CHAR COLON COMMA CONST CONSTANT CONTINUE DEC_OP DEFAULT DIV_ASSIGN DOT DOUBLE ELLIPSIS ELSE ENUM EQUAL EQ_OP EXCLAIM EXTERN FLOAT FOR GE_OP GOTO GREATER IDENTIFIER IF INC_OP INT LEFT_ASSIGN LEFT_OP LESS LE_OP LONG L_BRACE L_PAREN L_SQUARE MINUS MOD_ASSIGN MUL_ASSIGN NE_OP OR_ASSIGN OR_OP PERCENT PIPE PLUS PTR_OP QUEST REGISTER RETURN RIGHT_ASSIGN RIGHT_OP R_BRACE R_PAREN R_SQUARE SEMI SHORT SIGNED SIZEOF SLASH STAR STATIC STRING_LITERAL STRUCT SUB_ASSIGN SWITCH TILDA TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE XOR_ASSIGN\n    primary_expression : variable_use\n    | const_or_parenthesis\n    \n    const_or_parenthesis : CONSTANT\n    | STRING_LITERAL\n    | L_PAREN expression R_PAREN\n    \n    variable_use : IDENTIFIER\n    \n    function_call : IDENTIFIER L_PAREN R_PAREN\n    | IDENTIFIER L_PAREN argument_expression_list R_PAREN\n    \n    postfix_expression : primary_expression\n    | postfix_expression L_SQUARE expression R_SQUARE\n    | postfix_expression DOT IDENTIFIER\n    | postfix_expression PTR_OP IDENTIFIER\n    | postfix_expression INC_OP\n    | postfix_expression DEC_OP\n    | function_call\n    \n    argument_expression_list : assignment_expression\n    | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    | INC_OP unary_expression\n    | DEC_OP unary_expression\n    | unary_op_before_cast_exp\n    | SIZEOF unary_expression\n    | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_op_before_cast_exp : unary_operator cast_expression\n    \n    unary_operator : AMP\n    | STAR\n    | PLUS\n    | MINUS\n    | TILDA\n    | EXCLAIM\n    \n    cast_expression : unary_expression\n    | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n    | multiplicative_expression STAR cast_expression\n    | multiplicative_expression SLASH cast_expression\n    | multiplicative_expression PERCENT cast_expression\n    \n    additive_expression : multiplicative_expression\n    | additive_expression PLUS multiplicative_expression\n    | additive_expression MINUS multiplicative_expression\n    \n    shift_expression : additive_expression\n    | shift_expression LEFT_OP additive_expression\n    | shift_expression RIGHT_OP additive_expression\n    \n    relational_expression : shift_expression\n    | relational_expression LESS shift_expression\n    | relational_expression GREATER shift_expression\n    | relational_expression LE_OP shift_expression\n    | relational_expression GE_OP shift_expression\n    \n    equality_expression : relational_expression\n    | equality_exp_lhs EQ_OP relational_expression\n    | equality_exp_lhs NE_OP relational_expression\n    \n    equality_exp_lhs : equality_expression\n    \n    and_expression : equality_expression\n    | and_expression AMP equality_expression\n    \n    exclusive_or_expression : and_expression\n    | exclusive_or_expression CARET and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n    | inclusive_or_expression PIPE exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n    | logical_and_expression AND_OP inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n    | logical_or_expression OR_OP logical_and_expression\n    \n    conditional_expression : logical_or_expression\n    | logical_or_expression QUEST expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n    | assignment_lhs assignment_operator assignment_expression\n    \n    assignment_lhs : unary_expression\n    \n    assignment_operator : EQUAL\n    | MUL_ASSIGN\n    | DIV_ASSIGN\n    | MOD_ASSIGN\n    | ADD_ASSIGN\n    | SUB_ASSIGN\n    | LEFT_ASSIGN\n    | RIGHT_ASSIGN\n    | AND_ASSIGN\n    | XOR_ASSIGN\n    | OR_ASSIGN\n    \n    expression : assignment_expression\n    | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : declaration_specifiers SEMI\n    | declaration_specifiers init_declarator_list SEMI\n    \n    declaration_specifiers : storage_class_specifier\n    | storage_class_specifier declaration_specifiers\n    | type_specifier\n    | type_specifier declaration_specifiers\n    | type_qualifier\n    | type_qualifier declaration_specifiers\n    \n    init_declarator_list : init_declarator\n    | init_declarator_list COMMA init_declarator\n    \n    init_declarator : uninitialized_declaration\n    | initialized_declaration\n    \n    initialized_declaration : declarator EQUAL initializer\n    \n    uninitialized_declaration : declarator\n    \n    storage_class_specifier : TYPEDEF\n    | EXTERN\n    | STATIC\n    | AUTO\n    | REGISTER\n    \n    type : VOID\n    | CHAR\n    | SHORT\n    | INT\n    | LONG\n    | FLOAT\n    | DOUBLE\n    | SIGNED\n    | UNSIGNED\n    \n    type_specifier : type\n    | struct_or_union_specifier\n    | enum_specifier\n    \n    struct_or_union_specifier : struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE\n    | struct_or_union L_BRACE struct_declaration_list R_BRACE\n    | struct_or_union IDENTIFIER\n    \n    struct_or_union : STRUCT\n    | UNION\n    \n    struct_declaration_list : struct_declaration\n    | struct_declaration_list struct_declaration\n    \n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMI\n    \n    specifier_qualifier_list : type_specifier specifier_qualifier_list\n    | type_specifier\n    | type_qualifier specifier_qualifier_list\n    | type_qualifier\n    \n    struct_declarator_list : struct_declarator\n    | struct_declarator_list COMMA struct_declarator\n    \n    struct_declarator : declarator\n    | COLON constant_expression\n    | declarator COLON constant_expression\n    \n    enum_specifier : ENUM L_BRACE enumerator_list R_BRACE\n    | ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE\n    | ENUM IDENTIFIER\n    \n    enumerator_list : enumerator\n    | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n    | IDENTIFIER EQUAL constant_expression\n    \n    type_qualifier : CONST\n    | VOLATILE\n    \n    declarator : pointer direct_declarator \n    | direct_declarator\n    \n    direct_declarator : variable_declaration\n    | function_declaration\n    \n    variable_declaration : variable_declaration1\n    | variable_declaration2\n    \n    variable_declaration1 : IDENTIFIER\n    | IDENTIFIER L_SQUARE constant_expression R_SQUARE\n    | IDENTIFIER L_SQUARE R_SQUARE\n    \n   variable_declaration2 : L_PAREN declarator R_PAREN\n   \n    function_declaration : IDENTIFIER L_PAREN parameter_type_list R_PAREN\n    | IDENTIFIER L_PAREN identifier_list R_PAREN\n    | IDENTIFIER L_PAREN R_PAREN   \n    \n    pointer : STAR\n    | STAR type_qualifier_list\n    | STAR pointer\n    | STAR type_qualifier_list pointer\n    \n    type_qualifier_list : type_qualifier\n    | type_qualifier_list type_qualifier\n    \n    parameter_type_list : parameter_list\n    | parameter_list COMMA ELLIPSIS\n    \n    parameter_list : parameter_declaration\n    | parameter_list COMMA parameter_declaration\n    \n    parameter_declaration : declaration_specifiers declarator\n    | declaration_specifiers abstract_declarator\n    | declaration_specifiers\n    \n    identifier_list : IDENTIFIER\n    | identifier_list COMMA IDENTIFIER\n    \n    type_name : specifier_qualifier_list\n    | specifier_qualifier_list abstract_declarator\n    \n    abstract_declarator : pointer\n    | direct_abstract_declarator\n    | pointer direct_abstract_declarator\n    \n    direct_abstract_declarator : L_SQUARE R_SQUARE\n    | L_PAREN R_PAREN\n    | L_SQUARE constant_expression R_SQUARE\n    | L_PAREN abstract_declarator R_PAREN\n    | L_PAREN parameter_type_list R_PAREN\n    | direct_abstract_declarator L_PAREN R_PAREN\n    | direct_abstract_declarator L_SQUARE R_SQUARE\n    | direct_abstract_declarator L_SQUARE constant_expression R_SQUARE\n    | direct_abstract_declarator L_PAREN parameter_type_list R_PAREN\n    \n    initializer : assignment_expression\n    | L_BRACE initializer_list R_BRACE\n    | L_BRACE initializer_list COMMA R_BRACE\n    \n    initializer_list : initializer\n    | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n    | compound_statement\n    | expression_statement\n    | selection_statement\n    | iteration_statement\n    | jump_statement\n    \n    labeled_statement : IDENTIFIER COLON statement\n    | CASE constant_expression COLON statement\n    | DEFAULT COLON statement\n    \n    compound_statement : L_BRACE R_BRACE\n    | L_BRACE statement_list R_BRACE\n    | L_BRACE declaration_list R_BRACE\n    | L_BRACE declaration_list statement_list R_BRACE\n    \n    declaration_list : declaration\n    | declaration_list declaration\n    \n    statement_list : statement\n    | statement_list statement\n    \n    expression_statement : SEMI\n    | expression SEMI\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n    | IF L_PAREN expression R_PAREN statement ELSE statement\n    | SWITCH L_PAREN expression R_PAREN statement\n    iteration_statement : iteration_header iteration_body \n    iteration_header : WHILE L_PAREN expression R_PAREN \n    | FOR L_PAREN expression_statement expression_statement R_PAREN \n    | FOR L_PAREN expression_statement expression_statement expression R_PAREN \n    iteration_body : statement \n    jump_statement : GOTO IDENTIFIER SEMI\n    | CONTINUE SEMI\n    | BREAK SEMI\n    | RETURN SEMI\n    | RETURN expression SEMI\n    \n    translation_unit : external_declaration\n    | translation_unit external_declaration\n    \n    external_declaration : function_definition\n    | other_declarations\n    \n    other_declarations : declaration\n    \n    function_header : fheader_type1\n    | fheader_type2\n    \n    fheader_type1 : declaration_specifiers function_declaration\n    \n    fheader_type2 : function_declaration\n    \n    function_definition : function_header compound_statement\n    | function_header declaration_list compound_statement\n    '
    
_lr_action_items = {'IDENTIFIER':([0,1,2,3,4,6,9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,49,53,55,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,85,87,88,91,101,102,104,108,113,114,115,116,117,118,129,130,131,133,135,136,137,144,148,149,150,154,155,156,157,158,159,160,164,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,232,233,236,240,242,243,245,250,251,252,253,254,255,257,258,262,263,267,272,273,275,308,314,315,317,318,322,324,325,326,328,329,330,331,335,346,347,348,355,356,357,],[14,14,-217,-219,-220,-221,48,-83,-85,-87,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,63,66,-115,-116,-218,-226,80,-198,48,-81,48,48,-151,-84,-86,-88,138,-114,153,-131,-227,-199,-194,80,80,-200,-185,-186,-187,-188,-189,-190,-202,165,165,80,176,165,165,165,165,165,-25,-26,-27,-28,-29,-30,-82,48,165,165,-152,-153,-155,48,48,-121,-123,153,-195,-201,-196,80,80,165,165,80,-203,165,165,165,-207,-211,-213,-214,-215,165,165,165,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,165,165,165,165,281,282,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,-154,-156,303,48,165,48,-113,165,-120,-122,-129,153,165,-197,-191,80,-193,165,-212,-216,165,165,48,-112,48,165,-130,165,-192,80,80,-208,165,165,165,-204,-206,-209,80,-210,-205,]),'TYPEDEF':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,66,67,68,69,71,129,140,155,157,234,235,237,243,245,253,257,270,307,315,322,],[15,15,-217,-219,-220,15,-221,-222,-223,-225,15,15,15,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,15,15,-198,-81,-224,15,-114,-131,-227,-199,-194,15,-82,-150,-195,-196,-148,-149,15,15,-113,-129,-197,15,15,-112,-130,]),'EXTERN':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,66,67,68,69,71,129,140,155,157,234,235,237,243,245,253,257,270,307,315,322,],[16,16,-217,-219,-220,16,-221,-222,-223,-225,16,16,16,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,16,16,-198,-81,-224,16,-114,-131,-227,-199,-194,16,-82,-150,-195,-196,-148,-149,16,16,-113,-129,-197,16,16,-112,-130,]),'STATIC':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,66,67,68,69,71,129,140,155,157,234,235,237,243,245,253,257,270,307,315,322,],[17,17,-217,-219,-220,17,-221,-222,-223,-225,17,17,17,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,17,17,-198,-81,-224,17,-114,-131,-227,-199,-194,17,-82,-150,-195,-196,-148,-149,17,17,-113,-129,-197,17,17,-112,-130,]),'AUTO':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,66,67,68,69,71,129,140,155,157,234,235,237,243,245,253,257,270,307,315,322,],[18,18,-217,-219,-220,18,-221,-222,-223,-225,18,18,18,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,18,18,-198,-81,-224,18,-114,-131,-227,-199,-194,18,-82,-150,-195,-196,-148,-149,18,18,-113,-129,-197,18,18,-112,-130,]),'REGISTER':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,66,67,68,69,71,129,140,155,157,234,235,237,243,245,253,257,270,307,315,322,],[19,19,-217,-219,-220,19,-221,-222,-223,-225,19,19,19,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,19,19,-198,-81,-224,19,-114,-131,-227,-199,-194,19,-82,-150,-195,-196,-148,-149,19,19,-113,-129,-197,19,19,-112,-130,]),'CONST':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,55,62,63,64,66,67,68,69,71,85,129,135,137,140,145,146,147,149,150,155,157,164,207,233,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[23,23,-217,-219,-220,23,-221,-222,-223,-225,23,23,23,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,23,23,-198,-81,-224,23,23,-114,23,-131,-227,-199,-194,23,23,-82,23,-155,-150,23,23,-117,23,23,-195,-196,23,23,-156,-148,-149,23,23,23,-113,-118,-129,-197,23,23,-112,-119,-130,]),'VOLATILE':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,55,62,63,64,66,67,68,69,71,85,129,135,137,140,145,146,147,149,150,155,157,164,207,233,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[24,24,-217,-219,-220,24,-221,-222,-223,-225,24,24,24,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,24,24,-198,-81,-224,24,24,-114,24,-131,-227,-199,-194,24,24,-82,24,-155,-150,24,24,-117,24,24,-195,-196,24,24,-156,-148,-149,24,24,24,-113,-118,-129,-197,24,24,-112,-119,-130,]),'VOID':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[25,25,-217,-219,-220,25,-221,-222,-223,-225,25,25,25,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,25,25,-198,-81,-224,25,-114,25,-131,-227,-199,-194,25,25,-82,-150,25,25,-117,25,25,-195,-196,25,25,-148,-149,25,25,25,-113,-118,-129,-197,25,25,-112,-119,-130,]),'CHAR':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[26,26,-217,-219,-220,26,-221,-222,-223,-225,26,26,26,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,26,26,-198,-81,-224,26,-114,26,-131,-227,-199,-194,26,26,-82,-150,26,26,-117,26,26,-195,-196,26,26,-148,-149,26,26,26,-113,-118,-129,-197,26,26,-112,-119,-130,]),'SHORT':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[27,27,-217,-219,-220,27,-221,-222,-223,-225,27,27,27,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,27,27,-198,-81,-224,27,-114,27,-131,-227,-199,-194,27,27,-82,-150,27,27,-117,27,27,-195,-196,27,27,-148,-149,27,27,27,-113,-118,-129,-197,27,27,-112,-119,-130,]),'INT':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[28,28,-217,-219,-220,28,-221,-222,-223,-225,28,28,28,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,28,28,-198,-81,-224,28,-114,28,-131,-227,-199,-194,28,28,-82,-150,28,28,-117,28,28,-195,-196,28,28,-148,-149,28,28,28,-113,-118,-129,-197,28,28,-112,-119,-130,]),'LONG':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[29,29,-217,-219,-220,29,-221,-222,-223,-225,29,29,29,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,29,29,-198,-81,-224,29,-114,29,-131,-227,-199,-194,29,29,-82,-150,29,29,-117,29,29,-195,-196,29,29,-148,-149,29,29,29,-113,-118,-129,-197,29,29,-112,-119,-130,]),'FLOAT':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[30,30,-217,-219,-220,30,-221,-222,-223,-225,30,30,30,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,30,30,-198,-81,-224,30,-114,30,-131,-227,-199,-194,30,30,-82,-150,30,30,-117,30,30,-195,-196,30,30,-148,-149,30,30,30,-113,-118,-129,-197,30,30,-112,-119,-130,]),'DOUBLE':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[31,31,-217,-219,-220,31,-221,-222,-223,-225,31,31,31,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,31,31,-198,-81,-224,31,-114,31,-131,-227,-199,-194,31,31,-82,-150,31,31,-117,31,31,-195,-196,31,31,-148,-149,31,31,31,-113,-118,-129,-197,31,31,-112,-119,-130,]),'SIGNED':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[32,32,-217,-219,-220,32,-221,-222,-223,-225,32,32,32,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,32,32,-198,-81,-224,32,-114,32,-131,-227,-199,-194,32,32,-82,-150,32,32,-117,32,32,-195,-196,32,32,-148,-149,32,32,32,-113,-118,-129,-197,32,32,-112,-119,-130,]),'UNSIGNED':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[33,33,-217,-219,-220,33,-221,-222,-223,-225,33,33,33,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,33,33,-198,-81,-224,33,-114,33,-131,-227,-199,-194,33,33,-82,-150,33,33,-117,33,33,-195,-196,33,33,-148,-149,33,33,33,-113,-118,-129,-197,33,33,-112,-119,-130,]),'ENUM':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[35,35,-217,-219,-220,35,-221,-222,-223,-225,35,35,35,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,35,35,-198,-81,-224,35,-114,35,-131,-227,-199,-194,35,35,-82,-150,35,35,-117,35,35,-195,-196,35,35,-148,-149,35,35,35,-113,-118,-129,-197,35,35,-112,-119,-130,]),'STRUCT':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[36,36,-217,-219,-220,36,-221,-222,-223,-225,36,36,36,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,36,36,-198,-81,-224,36,-114,36,-131,-227,-199,-194,36,36,-82,-150,36,36,-117,36,36,-195,-196,36,36,-148,-149,36,36,36,-113,-118,-129,-197,36,36,-112,-119,-130,]),'UNION':([0,1,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,44,46,62,63,64,66,67,68,69,71,85,129,140,145,146,147,149,150,155,157,164,207,234,235,237,243,244,245,246,253,257,270,307,315,316,322,],[37,37,-217,-219,-220,37,-221,-222,-223,-225,37,37,37,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-218,-226,37,37,-198,-81,-224,37,-114,37,-131,-227,-199,-194,37,37,-82,-150,37,37,-117,37,37,-195,-196,37,37,-148,-149,37,37,37,-113,-118,-129,-197,37,37,-112,-119,-130,]),'$end':([1,2,3,4,6,38,39,44,67,69,129,155,157,257,],[0,-217,-219,-220,-221,-218,-226,-81,-227,-194,-82,-195,-196,-197,]),'L_BRACE':([5,7,8,10,34,35,36,37,40,41,42,44,46,63,66,68,69,70,71,72,73,74,75,76,77,78,79,87,129,133,140,155,156,157,158,159,166,167,174,175,177,178,179,231,234,235,257,258,262,263,272,273,325,326,328,329,335,346,347,348,355,356,357,],[41,-222,-223,-225,64,65,-115,-116,41,41,-198,-81,-224,145,154,-199,-194,41,41,-200,-185,-186,-187,-188,-189,-190,-202,41,-82,231,-150,-195,-201,-196,41,41,41,-203,-207,-211,-213,-214,-215,231,-148,-149,-197,-191,41,-193,-212,-216,-192,41,41,-208,231,-204,-206,-209,41,-210,-205,]),'SEMI':([9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,41,42,43,44,45,46,47,48,50,51,52,54,56,57,58,59,60,61,63,66,68,69,70,71,72,73,74,75,76,77,78,79,80,83,87,89,90,91,92,95,97,98,99,100,103,105,106,107,109,110,111,112,119,120,121,122,123,125,126,127,128,129,134,140,155,156,157,158,159,162,163,165,166,167,174,175,176,177,178,179,180,182,201,202,203,205,206,209,225,227,228,229,230,234,235,245,247,248,249,253,257,258,259,262,263,264,266,272,273,275,276,278,279,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,315,319,322,323,325,326,327,328,329,332,333,334,343,344,346,347,348,350,351,355,356,357,],[44,-83,-85,-87,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,79,-198,44,-81,129,-141,-89,-144,-91,-92,-94,-139,-140,-142,-143,-84,-86,-88,-114,-131,-199,-194,79,79,-200,-185,-186,-187,-188,-189,-190,-202,-6,167,79,177,178,179,-78,-64,-62,-31,-60,-18,-21,-58,-9,-15,-33,-56,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,-141,-82,-138,-150,-195,-201,-196,79,79,-80,-31,-6,79,-203,-207,-211,272,-213,-214,-215,273,79,-13,-14,-19,-20,-22,-24,-90,-146,-147,-93,-180,-148,-149,-113,316,-124,-126,-129,-197,-191,-7,79,-193,-79,-5,-212,-216,79,-65,-61,-59,-11,-12,-57,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-145,-112,-127,-130,-8,-192,79,-32,79,-208,-10,-23,-181,-125,-128,-204,-206,-209,-63,-182,79,-210,-205,]),'STAR':([9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,41,42,43,44,49,55,59,60,61,63,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,87,91,98,100,101,102,103,104,106,107,108,109,111,112,113,114,115,116,117,118,120,121,127,129,130,131,133,135,137,144,148,149,150,155,156,157,158,159,160,163,164,165,166,167,168,169,172,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,233,242,243,245,250,251,252,253,255,257,258,259,262,263,266,267,270,272,273,275,281,282,295,296,297,298,299,308,315,317,318,322,323,324,325,326,327,328,329,330,331,332,333,335,346,347,348,355,356,357,],[55,-83,-85,-87,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,114,-198,55,-81,55,55,-84,-86,-88,-114,-131,-199,-194,114,114,-200,-185,-186,-187,-188,-189,-190,-202,-6,114,114,114,114,-31,-18,114,114,-21,114,-9,-15,114,-33,-1,-2,-25,-26,-27,-28,-29,-30,-3,-4,222,-82,55,114,114,55,-155,55,55,-121,-123,-195,-201,-196,114,114,114,-31,114,-6,114,-203,114,114,55,114,-207,-211,-213,-214,-215,114,114,114,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,114,114,114,114,-13,-14,-19,114,-20,-22,114,114,-24,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-156,114,55,-113,114,-120,-122,-129,114,-197,-191,-7,114,-193,-5,114,55,-212,-216,114,-11,-12,222,222,-34,-35,-36,114,-112,55,114,-130,-8,114,-192,114,-32,114,-208,114,114,-10,-23,114,-204,-206,-209,114,-210,-205,]),'L_PAREN':([9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,41,42,43,44,48,49,53,55,59,60,61,63,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,91,93,94,101,102,104,108,113,114,115,116,117,118,129,130,131,133,135,136,137,144,148,149,150,155,156,157,158,159,160,164,165,166,167,168,169,172,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,232,233,240,241,242,243,245,250,251,252,253,255,257,258,262,263,267,269,270,272,273,275,306,308,309,311,314,315,317,318,322,324,325,326,328,329,330,331,335,336,338,340,341,342,346,347,348,353,354,355,356,357,],[49,-83,-85,-87,62,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,85,-198,49,-81,62,49,49,-151,-84,-86,-88,-114,-131,-199,-194,85,85,-200,-185,-186,-187,-188,-189,-190,-202,160,164,169,85,173,85,85,181,182,204,204,207,164,-25,-26,-27,-28,-29,-30,-82,49,164,85,-152,-153,-155,243,49,-121,-123,-195,-201,-196,85,85,85,85,160,85,-203,85,85,270,85,-207,-211,-213,-214,-215,85,85,85,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,85,164,164,85,85,85,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,85,-154,-156,243,307,164,243,-113,164,-120,-122,-129,164,-197,-191,85,-193,164,270,270,-212,-216,85,307,164,-171,-172,243,-112,49,164,-130,85,-192,85,85,-208,85,164,85,-176,-177,-173,-174,-175,-204,-206,-209,-179,-178,85,-210,-205,]),'L_SQUARE':([11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,48,55,59,60,61,63,66,80,100,106,107,111,112,120,121,135,136,137,144,149,150,165,172,201,202,232,233,240,241,243,245,251,252,253,259,266,269,270,281,282,306,309,311,314,315,322,323,332,336,338,340,341,342,353,354,],[-83,-85,-87,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,131,-151,-84,-86,-88,-114,-131,-6,198,-9,-15,-1,-2,-3,-4,-152,-153,-155,242,-121,-123,-6,242,-13,-14,-154,-156,242,308,242,-113,-120,-122,-129,-7,-5,242,242,-11,-12,308,-171,-172,242,-112,-130,-8,-10,-176,-177,-173,-174,-175,-179,-178,]),'COMMA':([11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,63,66,80,83,92,95,97,98,99,100,103,105,106,107,109,110,111,112,119,120,121,122,123,125,126,127,128,134,135,136,137,138,140,141,142,143,144,151,152,153,162,163,165,170,180,201,202,203,205,206,209,225,227,228,229,230,232,233,234,235,238,239,240,241,245,247,248,249,253,256,259,260,261,264,265,266,271,274,276,277,278,279,280,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,306,309,311,315,319,320,321,322,323,327,332,333,334,336,338,340,341,342,343,344,345,349,350,351,352,353,354,],[-83,-85,-87,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,130,-141,-89,-144,-91,-92,-94,-139,-151,-140,-142,-143,-84,-86,-88,-114,-131,-6,168,-78,-64,-62,-31,-60,-18,-21,-58,-9,-15,-33,-56,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,-141,-138,-152,-153,-155,-164,-150,236,237,-159,-163,254,-132,-134,-80,-31,-6,168,168,-13,-14,-19,-20,-22,-24,-90,-146,-147,-93,-180,-154,-156,-148,-149,-161,-162,-168,-169,-113,317,-124,-126,-129,254,-7,324,-16,-79,168,-5,168,168,-65,168,-61,-59,168,-11,-12,-57,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-145,335,-183,-165,-160,-170,-171,-172,-112,-127,-133,-135,-130,-8,-32,-10,-23,-181,-176,-177,-173,-174,-175,-125,-128,-17,168,-63,-182,-184,-179,-178,]),'R_PAREN':([11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,48,54,55,56,57,58,59,60,61,62,63,66,79,92,95,97,98,99,100,103,105,106,107,109,110,111,112,119,120,121,122,123,125,126,127,128,132,134,135,136,137,138,139,140,141,142,143,144,149,150,160,163,165,167,170,171,172,201,202,203,205,206,209,227,228,232,233,234,235,238,239,240,241,243,245,251,252,253,259,260,261,264,265,266,268,269,270,271,274,276,278,279,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,303,304,305,306,307,309,311,312,313,314,315,322,323,327,330,332,333,336,337,338,340,341,342,345,349,350,353,354,],[-83,-85,-87,-95,-96,-97,-98,-99,-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-144,-139,-151,-140,-142,-143,-84,-86,-88,140,-114,-131,-202,-78,-64,-62,-31,-60,-18,-21,-58,-9,-15,-33,-56,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,-141,228,-138,-152,-153,-155,-164,234,-150,235,-157,-159,-163,-121,-123,259,-31,-6,-203,266,267,-166,-13,-14,-19,-20,-22,-24,-146,-147,-154,-156,-148,-149,-161,-162,-168,-169,311,-113,-120,-122,-129,-7,323,-16,-79,326,-5,-167,-168,311,328,329,-65,-61,-59,-11,-12,333,-57,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-145,-165,-158,-160,-170,336,-171,-172,341,342,-168,-112,-130,-8,-32,348,-10,-23,-176,353,-177,-173,-174,-175,-17,356,-63,-179,-178,]),'COLON':([20,21,22,23,24,25,26,27,28,29,30,31,32,33,48,54,56,57,58,63,66,80,82,92,95,97,98,99,100,103,105,106,107,109,110,111,112,119,120,121,122,123,125,126,127,128,134,140,148,149,150,161,162,163,165,201,202,203,205,206,209,227,228,234,235,245,249,251,252,253,259,264,266,276,277,278,279,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,315,317,322,323,327,332,333,350,],[-109,-110,-111,-136,-137,-100,-101,-102,-103,-104,-105,-106,-107,-108,-144,-139,-140,-142,-143,-114,-131,159,166,-78,-64,-62,-31,-60,-18,-21,-58,-9,-15,-33,-56,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,-141,-138,-150,250,-121,-123,262,-80,-31,-6,-13,-14,-19,-20,-22,-24,-146,-147,-148,-149,-113,318,-120,-122,-129,-7,-79,-5,-65,331,-61,-59,-11,-12,-57,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-145,-112,250,-130,-8,-32,-10,-23,-63,]),'R_BRACE':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,95,97,98,99,100,103,105,106,107,109,110,111,112,119,120,121,122,123,125,126,127,129,146,147,151,152,153,155,156,157,158,162,163,165,167,174,175,177,178,179,201,202,203,205,206,209,230,244,246,256,257,258,259,263,266,272,273,276,278,279,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,301,302,316,320,321,323,325,327,332,333,334,335,346,347,350,351,352,357,],[69,-198,-81,-199,-194,155,157,-200,-185,-186,-187,-188,-189,-190,-202,-64,-62,-31,-60,-18,-21,-58,-9,-15,-33,-56,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,-82,245,-117,253,-132,-134,-195,-201,-196,257,-80,-31,-6,-203,-207,-211,-213,-214,-215,-13,-14,-19,-20,-22,-24,-180,315,-118,322,-197,-191,-7,-193,-5,-212,-216,-65,-61,-59,-11,-12,-57,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,334,-183,-119,-133,-135,-8,-192,-32,-10,-23,-181,351,-204,-206,-63,-182,-184,-205,]),'CASE':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,87,129,155,156,157,158,159,166,167,174,175,177,178,179,257,258,262,263,272,273,325,326,328,329,346,347,348,355,356,357,],[81,-198,-81,-199,-194,81,81,-200,-185,-186,-187,-188,-189,-190,-202,81,-82,-195,-201,-196,81,81,81,-203,-207,-211,-213,-214,-215,-197,-191,81,-193,-212,-216,-192,81,81,-208,-204,-206,-209,81,-210,-205,]),'DEFAULT':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,87,129,155,156,157,158,159,166,167,174,175,177,178,179,257,258,262,263,272,273,325,326,328,329,346,347,348,355,356,357,],[82,-198,-81,-199,-194,82,82,-200,-185,-186,-187,-188,-189,-190,-202,82,-82,-195,-201,-196,82,82,82,-203,-207,-211,-213,-214,-215,-197,-191,82,-193,-212,-216,-192,82,82,-208,-204,-206,-209,82,-210,-205,]),'IF':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,87,129,155,156,157,158,159,166,167,174,175,177,178,179,257,258,262,263,272,273,325,326,328,329,346,347,348,355,356,357,],[84,-198,-81,-199,-194,84,84,-200,-185,-186,-187,-188,-189,-190,-202,84,-82,-195,-201,-196,84,84,84,-203,-207,-211,-213,-214,-215,-197,-191,84,-193,-212,-216,-192,84,84,-208,-204,-206,-209,84,-210,-205,]),'SWITCH':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,87,129,155,156,157,158,159,166,167,174,175,177,178,179,257,258,262,263,272,273,325,326,328,329,346,347,348,355,356,357,],[86,-198,-81,-199,-194,86,86,-200,-185,-186,-187,-188,-189,-190,-202,86,-82,-195,-201,-196,86,86,86,-203,-207,-211,-213,-214,-215,-197,-191,86,-193,-212,-216,-192,86,86,-208,-204,-206,-209,86,-210,-205,]),'GOTO':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,87,129,155,156,157,158,159,166,167,174,175,177,178,179,257,258,262,263,272,273,325,326,328,329,346,347,348,355,356,357,],[88,-198,-81,-199,-194,88,88,-200,-185,-186,-187,-188,-189,-190,-202,88,-82,-195,-201,-196,88,88,88,-203,-207,-211,-213,-214,-215,-197,-191,88,-193,-212,-216,-192,88,88,-208,-204,-206,-209,88,-210,-205,]),'CONTINUE':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,87,129,155,156,157,158,159,166,167,174,175,177,178,179,257,258,262,263,272,273,325,326,328,329,346,347,348,355,356,357,],[89,-198,-81,-199,-194,89,89,-200,-185,-186,-187,-188,-189,-190,-202,89,-82,-195,-201,-196,89,89,89,-203,-207,-211,-213,-214,-215,-197,-191,89,-193,-212,-216,-192,89,89,-208,-204,-206,-209,89,-210,-205,]),'BREAK':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,87,129,155,156,157,158,159,166,167,174,175,177,178,179,257,258,262,263,272,273,325,326,328,329,346,347,348,355,356,357,],[90,-198,-81,-199,-194,90,90,-200,-185,-186,-187,-188,-189,-190,-202,90,-82,-195,-201,-196,90,90,90,-203,-207,-211,-213,-214,-215,-197,-191,90,-193,-212,-216,-192,90,90,-208,-204,-206,-209,90,-210,-205,]),'RETURN':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,87,129,155,156,157,158,159,166,167,174,175,177,178,179,257,258,262,263,272,273,325,326,328,329,346,347,348,355,356,357,],[91,-198,-81,-199,-194,91,91,-200,-185,-186,-187,-188,-189,-190,-202,91,-82,-195,-201,-196,91,91,91,-203,-207,-211,-213,-214,-215,-197,-191,91,-193,-212,-216,-192,91,91,-208,-204,-206,-209,91,-210,-205,]),'WHILE':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,87,129,155,156,157,158,159,166,167,174,175,177,178,179,257,258,262,263,272,273,325,326,328,329,346,347,348,355,356,357,],[93,-198,-81,-199,-194,93,93,-200,-185,-186,-187,-188,-189,-190,-202,93,-82,-195,-201,-196,93,93,93,-203,-207,-211,-213,-214,-215,-197,-191,93,-193,-212,-216,-192,93,93,-208,-204,-206,-209,93,-210,-205,]),'FOR':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,87,129,155,156,157,158,159,166,167,174,175,177,178,179,257,258,262,263,272,273,325,326,328,329,346,347,348,355,356,357,],[94,-198,-81,-199,-194,94,94,-200,-185,-186,-187,-188,-189,-190,-202,94,-82,-195,-201,-196,94,94,94,-203,-207,-211,-213,-214,-215,-197,-191,94,-193,-212,-216,-192,94,94,-208,-204,-206,-209,94,-210,-205,]),'INC_OP':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,87,91,100,101,102,104,106,107,108,111,112,113,114,115,116,117,118,120,121,129,131,133,155,156,157,158,159,160,164,165,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,201,202,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,257,258,259,262,263,266,267,272,273,275,281,282,308,318,323,324,325,326,328,329,330,331,332,335,346,347,348,355,356,357,],[101,-198,-81,-199,-194,101,101,-200,-185,-186,-187,-188,-189,-190,-202,-6,101,101,101,101,201,101,101,101,-9,-15,101,-1,-2,-25,-26,-27,-28,-29,-30,-3,-4,-82,101,101,-195,-201,-196,101,101,101,101,-6,101,-203,101,101,101,-207,-211,-213,-214,-215,101,101,101,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,101,101,101,101,-13,-14,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-197,-191,-7,101,-193,-5,101,-212,-216,101,-11,-12,101,101,-8,101,-192,101,101,-208,101,101,-10,101,-204,-206,-209,101,-210,-205,]),'DEC_OP':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,87,91,100,101,102,104,106,107,108,111,112,113,114,115,116,117,118,120,121,129,131,133,155,156,157,158,159,160,164,165,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,201,202,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,257,258,259,262,263,266,267,272,273,275,281,282,308,318,323,324,325,326,328,329,330,331,332,335,346,347,348,355,356,357,],[102,-198,-81,-199,-194,102,102,-200,-185,-186,-187,-188,-189,-190,-202,-6,102,102,102,102,202,102,102,102,-9,-15,102,-1,-2,-25,-26,-27,-28,-29,-30,-3,-4,-82,102,102,-195,-201,-196,102,102,102,102,-6,102,-203,102,102,102,-207,-211,-213,-214,-215,102,102,102,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,102,102,102,102,-13,-14,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-197,-191,-7,102,-193,-5,102,-212,-216,102,-11,-12,102,102,-8,102,-192,102,102,-208,102,102,-10,102,-204,-206,-209,102,-210,-205,]),'SIZEOF':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,81,85,87,91,101,102,104,108,113,114,115,116,117,118,129,131,133,155,156,157,158,159,160,164,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,257,258,262,263,267,272,273,275,308,318,324,325,326,328,329,330,331,335,346,347,348,355,356,357,],[104,-198,-81,-199,-194,104,104,-200,-185,-186,-187,-188,-189,-190,-202,104,104,104,104,104,104,104,104,-25,-26,-27,-28,-29,-30,-82,104,104,-195,-201,-196,104,104,104,104,104,-203,104,104,104,-207,-211,-213,-214,-215,104,104,104,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-197,-191,104,-193,104,-212,-216,104,104,104,104,-192,104,104,-208,104,104,104,-204,-206,-209,104,-210,-205,]),'AMP':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,87,91,98,100,101,102,103,104,106,107,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,129,131,133,155,156,157,158,159,160,163,164,165,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,257,258,259,262,263,266,267,272,273,275,281,282,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,308,318,323,324,325,326,327,328,329,330,331,332,333,335,346,347,348,355,356,357,],[113,-198,-81,-199,-194,113,113,-200,-185,-186,-187,-188,-189,-190,-202,-6,113,113,113,113,-31,-18,113,113,-21,113,-9,-15,113,-33,-1,-2,-25,-26,-27,-28,-29,-30,211,-3,-4,-52,-48,-43,-40,-37,-82,113,113,-195,-201,-196,113,113,113,-31,113,-6,113,-203,113,113,113,-207,-211,-213,-214,-215,113,113,113,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,113,113,113,113,-13,-14,-19,113,-20,-22,113,113,-24,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-197,-191,-7,113,-193,-5,113,-212,-216,113,-11,-12,211,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,113,113,-8,113,-192,113,-32,113,-208,113,113,-10,-23,113,-204,-206,-209,113,-210,-205,]),'PLUS':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,87,91,98,100,101,102,103,104,106,107,108,109,111,112,113,114,115,116,117,118,120,121,126,127,129,131,133,155,156,157,158,159,160,163,164,165,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,257,258,259,262,263,266,267,272,273,275,281,282,293,294,295,296,297,298,299,308,318,323,324,325,326,327,328,329,330,331,332,333,335,346,347,348,355,356,357,],[115,-198,-81,-199,-194,115,115,-200,-185,-186,-187,-188,-189,-190,-202,-6,115,115,115,115,-31,-18,115,115,-21,115,-9,-15,115,-33,-1,-2,-25,-26,-27,-28,-29,-30,-3,-4,220,-37,-82,115,115,-195,-201,-196,115,115,115,-31,115,-6,115,-203,115,115,115,-207,-211,-213,-214,-215,115,115,115,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,115,115,115,115,-13,-14,-19,115,-20,-22,115,115,-24,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-197,-191,-7,115,-193,-5,115,-212,-216,115,-11,-12,220,220,-38,-39,-34,-35,-36,115,115,-8,115,-192,115,-32,115,-208,115,115,-10,-23,115,-204,-206,-209,115,-210,-205,]),'MINUS':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,87,91,98,100,101,102,103,104,106,107,108,109,111,112,113,114,115,116,117,118,120,121,126,127,129,131,133,155,156,157,158,159,160,163,164,165,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,257,258,259,262,263,266,267,272,273,275,281,282,293,294,295,296,297,298,299,308,318,323,324,325,326,327,328,329,330,331,332,333,335,346,347,348,355,356,357,],[116,-198,-81,-199,-194,116,116,-200,-185,-186,-187,-188,-189,-190,-202,-6,116,116,116,116,-31,-18,116,116,-21,116,-9,-15,116,-33,-1,-2,-25,-26,-27,-28,-29,-30,-3,-4,221,-37,-82,116,116,-195,-201,-196,116,116,116,-31,116,-6,116,-203,116,116,116,-207,-211,-213,-214,-215,116,116,116,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,116,116,116,116,-13,-14,-19,116,-20,-22,116,116,-24,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-197,-191,-7,116,-193,-5,116,-212,-216,116,-11,-12,221,221,-38,-39,-34,-35,-36,116,116,-8,116,-192,116,-32,116,-208,116,116,-10,-23,116,-204,-206,-209,116,-210,-205,]),'TILDA':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,81,85,87,91,101,102,104,108,113,114,115,116,117,118,129,131,133,155,156,157,158,159,160,164,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,257,258,262,263,267,272,273,275,308,318,324,325,326,328,329,330,331,335,346,347,348,355,356,357,],[117,-198,-81,-199,-194,117,117,-200,-185,-186,-187,-188,-189,-190,-202,117,117,117,117,117,117,117,117,-25,-26,-27,-28,-29,-30,-82,117,117,-195,-201,-196,117,117,117,117,117,-203,117,117,117,-207,-211,-213,-214,-215,117,117,117,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-197,-191,117,-193,117,-212,-216,117,117,117,117,-192,117,117,-208,117,117,117,-204,-206,-209,117,-210,-205,]),'EXCLAIM':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,81,85,87,91,101,102,104,108,113,114,115,116,117,118,129,131,133,155,156,157,158,159,160,164,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,257,258,262,263,267,272,273,275,308,318,324,325,326,328,329,330,331,335,346,347,348,355,356,357,],[118,-198,-81,-199,-194,118,118,-200,-185,-186,-187,-188,-189,-190,-202,118,118,118,118,118,118,118,118,-25,-26,-27,-28,-29,-30,-82,118,118,-195,-201,-196,118,118,118,118,118,-203,118,118,118,-207,-211,-213,-214,-215,118,118,118,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,-197,-191,118,-193,118,-212,-216,118,118,118,118,-192,118,118,-208,118,118,118,-204,-206,-209,118,-210,-205,]),'CONSTANT':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,81,85,87,91,101,102,104,108,113,114,115,116,117,118,129,131,133,155,156,157,158,159,160,164,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,257,258,262,263,267,272,273,275,308,318,324,325,326,328,329,330,331,335,346,347,348,355,356,357,],[120,-198,-81,-199,-194,120,120,-200,-185,-186,-187,-188,-189,-190,-202,120,120,120,120,120,120,120,120,-25,-26,-27,-28,-29,-30,-82,120,120,-195,-201,-196,120,120,120,120,120,-203,120,120,120,-207,-211,-213,-214,-215,120,120,120,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,-197,-191,120,-193,120,-212,-216,120,120,120,120,-192,120,120,-208,120,120,120,-204,-206,-209,120,-210,-205,]),'STRING_LITERAL':([41,42,44,68,69,70,71,72,73,74,75,76,77,78,79,81,85,87,91,101,102,104,108,113,114,115,116,117,118,129,131,133,155,156,157,158,159,160,164,166,167,168,169,173,174,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,257,258,262,263,267,272,273,275,308,318,324,325,326,328,329,330,331,335,346,347,348,355,356,357,],[121,-198,-81,-199,-194,121,121,-200,-185,-186,-187,-188,-189,-190,-202,121,121,121,121,121,121,121,121,-25,-26,-27,-28,-29,-30,-82,121,121,-195,-201,-196,121,121,121,121,121,-203,121,121,121,-207,-211,-213,-214,-215,121,121,121,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-197,-191,121,-193,121,-212,-216,121,121,121,121,-192,121,121,-208,121,121,121,-204,-206,-209,121,-210,-205,]),'EQUAL':([46,48,52,54,56,57,58,80,96,98,100,103,106,107,111,112,120,121,128,134,140,153,163,165,201,202,203,205,206,209,227,228,234,235,259,266,281,282,300,323,327,332,333,],[-141,-144,133,-139,-140,-142,-143,-6,184,-66,-18,-21,-9,-15,-1,-2,-3,-4,-141,-138,-150,255,-31,-6,-13,-14,-19,-20,-22,-24,-146,-147,-148,-149,-7,-5,-11,-12,-145,-8,-32,-10,-23,]),'ELSE':([69,73,74,75,76,77,78,79,155,157,167,174,175,177,178,179,257,258,263,272,273,325,346,347,357,],[-194,-185,-186,-187,-188,-189,-190,-202,-195,-196,-203,-207,-211,-213,-214,-215,-197,-191,-193,-212,-216,-192,355,-206,-205,]),'DOT':([80,100,106,107,111,112,120,121,165,201,202,259,266,281,282,323,332,],[-6,199,-9,-15,-1,-2,-3,-4,-6,-13,-14,-7,-5,-11,-12,-8,-10,]),'PTR_OP':([80,100,106,107,111,112,120,121,165,201,202,259,266,281,282,323,332,],[-6,200,-9,-15,-1,-2,-3,-4,-6,-13,-14,-7,-5,-11,-12,-8,-10,]),'MUL_ASSIGN':([80,96,98,100,103,106,107,111,112,120,121,163,165,201,202,203,205,206,209,259,266,281,282,323,327,332,333,],[-6,185,-66,-18,-21,-9,-15,-1,-2,-3,-4,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-8,-32,-10,-23,]),'DIV_ASSIGN':([80,96,98,100,103,106,107,111,112,120,121,163,165,201,202,203,205,206,209,259,266,281,282,323,327,332,333,],[-6,186,-66,-18,-21,-9,-15,-1,-2,-3,-4,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-8,-32,-10,-23,]),'MOD_ASSIGN':([80,96,98,100,103,106,107,111,112,120,121,163,165,201,202,203,205,206,209,259,266,281,282,323,327,332,333,],[-6,187,-66,-18,-21,-9,-15,-1,-2,-3,-4,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-8,-32,-10,-23,]),'ADD_ASSIGN':([80,96,98,100,103,106,107,111,112,120,121,163,165,201,202,203,205,206,209,259,266,281,282,323,327,332,333,],[-6,188,-66,-18,-21,-9,-15,-1,-2,-3,-4,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-8,-32,-10,-23,]),'SUB_ASSIGN':([80,96,98,100,103,106,107,111,112,120,121,163,165,201,202,203,205,206,209,259,266,281,282,323,327,332,333,],[-6,189,-66,-18,-21,-9,-15,-1,-2,-3,-4,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-8,-32,-10,-23,]),'LEFT_ASSIGN':([80,96,98,100,103,106,107,111,112,120,121,163,165,201,202,203,205,206,209,259,266,281,282,323,327,332,333,],[-6,190,-66,-18,-21,-9,-15,-1,-2,-3,-4,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-8,-32,-10,-23,]),'RIGHT_ASSIGN':([80,96,98,100,103,106,107,111,112,120,121,163,165,201,202,203,205,206,209,259,266,281,282,323,327,332,333,],[-6,191,-66,-18,-21,-9,-15,-1,-2,-3,-4,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-8,-32,-10,-23,]),'AND_ASSIGN':([80,96,98,100,103,106,107,111,112,120,121,163,165,201,202,203,205,206,209,259,266,281,282,323,327,332,333,],[-6,192,-66,-18,-21,-9,-15,-1,-2,-3,-4,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-8,-32,-10,-23,]),'XOR_ASSIGN':([80,96,98,100,103,106,107,111,112,120,121,163,165,201,202,203,205,206,209,259,266,281,282,323,327,332,333,],[-6,193,-66,-18,-21,-9,-15,-1,-2,-3,-4,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-8,-32,-10,-23,]),'OR_ASSIGN':([80,96,98,100,103,106,107,111,112,120,121,163,165,201,202,203,205,206,209,259,266,281,282,323,327,332,333,],[-6,194,-66,-18,-21,-9,-15,-1,-2,-3,-4,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-8,-32,-10,-23,]),'SLASH':([80,98,100,103,106,107,109,111,112,120,121,127,163,165,201,202,203,205,206,209,259,266,281,282,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,-1,-2,-3,-4,223,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,223,223,-34,-35,-36,-8,-32,-10,-23,]),'PERCENT':([80,98,100,103,106,107,109,111,112,120,121,127,163,165,201,202,203,205,206,209,259,266,281,282,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,-1,-2,-3,-4,224,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,224,224,-34,-35,-36,-8,-32,-10,-23,]),'LEFT_OP':([80,98,100,103,106,107,109,111,112,120,121,125,126,127,163,165,201,202,203,205,206,209,259,266,281,282,287,288,289,290,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,-1,-2,-3,-4,218,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,218,218,218,218,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'RIGHT_OP':([80,98,100,103,106,107,109,111,112,120,121,125,126,127,163,165,201,202,203,205,206,209,259,266,281,282,287,288,289,290,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,-1,-2,-3,-4,219,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,219,219,219,219,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'LESS':([80,98,100,103,106,107,109,111,112,120,121,123,125,126,127,163,165,201,202,203,205,206,209,259,266,281,282,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,-1,-2,-3,-4,212,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-44,-45,-46,-47,212,212,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'GREATER':([80,98,100,103,106,107,109,111,112,120,121,123,125,126,127,163,165,201,202,203,205,206,209,259,266,281,282,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,-1,-2,-3,-4,213,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-44,-45,-46,-47,213,213,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'LE_OP':([80,98,100,103,106,107,109,111,112,120,121,123,125,126,127,163,165,201,202,203,205,206,209,259,266,281,282,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,-1,-2,-3,-4,214,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-44,-45,-46,-47,214,214,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'GE_OP':([80,98,100,103,106,107,109,111,112,120,121,123,125,126,127,163,165,201,202,203,205,206,209,259,266,281,282,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,-1,-2,-3,-4,215,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-44,-45,-46,-47,215,215,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'CARET':([80,98,100,103,106,107,109,110,111,112,119,120,121,122,123,125,126,127,163,165,201,202,203,205,206,209,259,266,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,210,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,210,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'PIPE':([80,98,100,103,105,106,107,109,110,111,112,119,120,121,122,123,125,126,127,163,165,201,202,203,205,206,209,259,266,279,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,208,-9,-15,-33,-56,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,208,-11,-12,-57,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'AND_OP':([80,98,99,100,103,105,106,107,109,110,111,112,119,120,121,122,123,125,126,127,163,165,201,202,203,205,206,209,259,266,278,279,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,197,-18,-21,-58,-9,-15,-33,-56,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,197,-59,-11,-12,-57,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'QUEST':([80,97,98,99,100,103,105,106,107,109,110,111,112,119,120,121,122,123,125,126,127,163,165,201,202,203,205,206,209,259,266,278,279,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,195,-31,-60,-18,-21,-58,-9,-15,-33,-56,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-61,-59,-11,-12,-57,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'OR_OP':([80,97,98,99,100,103,105,106,107,109,110,111,112,119,120,121,122,123,125,126,127,163,165,201,202,203,205,206,209,259,266,278,279,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,196,-31,-60,-18,-21,-58,-9,-15,-33,-56,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-61,-59,-11,-12,-57,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'EQ_OP':([80,98,100,103,106,107,109,111,112,120,121,122,123,124,125,126,127,163,165,201,202,203,205,206,209,259,266,281,282,286,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,-1,-2,-3,-4,-51,-48,216,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-51,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'NE_OP':([80,98,100,103,106,107,109,111,112,120,121,122,123,124,125,126,127,163,165,201,202,203,205,206,209,259,266,281,282,286,287,288,289,290,291,292,293,294,295,296,297,298,299,323,327,332,333,],[-6,-31,-18,-21,-9,-15,-33,-1,-2,-3,-4,-51,-48,217,-43,-40,-37,-31,-6,-13,-14,-19,-20,-22,-24,-7,-5,-11,-12,-51,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,-8,-32,-10,-23,]),'R_SQUARE':([92,95,97,98,99,100,103,105,106,107,109,110,111,112,119,120,121,122,123,125,126,127,131,162,163,165,201,202,203,205,206,209,226,242,259,264,266,276,278,279,280,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,308,310,323,327,332,333,339,350,],[-78,-64,-62,-31,-60,-18,-21,-58,-9,-15,-33,-56,-1,-2,-54,-3,-4,-52,-48,-43,-40,-37,227,-80,-31,-6,-13,-14,-19,-20,-22,-24,300,309,-7,-79,-5,-65,-61,-59,332,-11,-12,-57,-55,-53,-44,-45,-46,-47,-49,-50,-41,-42,-38,-39,-34,-35,-36,338,340,-8,-32,-10,-23,354,-63,]),'ELLIPSIS':([237,],[304,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,38,]),'function_definition':([0,1,],[3,3,]),'other_declarations':([0,1,],[4,4,]),'function_header':([0,1,],[5,5,]),'declaration':([0,1,5,40,41,71,],[6,6,42,68,42,68,]),'fheader_type1':([0,1,],[7,7,]),'fheader_type2':([0,1,],[8,8,]),'declaration_specifiers':([0,1,5,11,12,13,40,41,62,71,237,243,270,307,],[9,9,43,59,60,61,43,43,144,43,144,144,144,144,]),'function_declaration':([0,1,9,43,49,53,130,144,148,240,243,314,317,],[10,10,46,128,128,128,128,128,128,128,128,128,128,]),'storage_class_specifier':([0,1,5,11,12,13,40,41,62,71,237,243,270,307,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'type_specifier':([0,1,5,11,12,13,40,41,62,64,71,85,145,146,149,150,164,207,237,243,244,270,307,],[12,12,12,12,12,12,12,12,12,149,12,149,149,149,149,149,149,149,12,12,149,12,12,]),'type_qualifier':([0,1,5,11,12,13,40,41,55,62,64,71,85,135,145,146,149,150,164,207,237,243,244,270,307,],[13,13,13,13,13,13,13,13,137,13,150,13,150,233,150,150,150,150,150,150,13,13,150,13,13,]),'type':([0,1,5,11,12,13,40,41,62,64,71,85,145,146,149,150,164,207,237,243,244,270,307,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'struct_or_union_specifier':([0,1,5,11,12,13,40,41,62,64,71,85,145,146,149,150,164,207,237,243,244,270,307,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'enum_specifier':([0,1,5,11,12,13,40,41,62,64,71,85,145,146,149,150,164,207,237,243,244,270,307,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'struct_or_union':([0,1,5,11,12,13,40,41,62,64,71,85,145,146,149,150,164,207,237,243,244,270,307,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'compound_statement':([5,40,41,70,71,87,158,159,166,262,326,328,355,],[39,67,74,74,74,74,74,74,74,74,74,74,74,]),'declaration_list':([5,41,],[40,71,]),'init_declarator_list':([9,43,],[45,45,]),'init_declarator':([9,43,130,],[47,47,225,]),'uninitialized_declaration':([9,43,130,],[50,50,50,]),'initialized_declaration':([9,43,130,],[51,51,51,]),'declarator':([9,43,49,130,144,148,243,317,],[52,52,132,52,238,249,132,249,]),'pointer':([9,43,49,55,130,135,144,148,172,243,270,317,],[53,53,53,136,53,232,240,53,269,314,269,53,]),'direct_declarator':([9,43,49,53,130,144,148,240,243,314,317,],[54,54,54,134,54,54,54,134,54,134,54,]),'variable_declaration':([9,43,49,53,130,144,148,240,243,314,317,],[56,56,56,56,56,56,56,56,56,56,56,]),'variable_declaration1':([9,43,49,53,130,144,148,240,243,314,317,],[57,57,57,57,57,57,57,57,57,57,57,]),'variable_declaration2':([9,43,49,53,130,144,148,240,243,314,317,],[58,58,58,58,58,58,58,58,58,58,58,]),'statement_list':([41,71,],[70,158,]),'statement':([41,70,71,87,158,159,166,262,326,328,355,],[72,156,72,175,156,258,263,325,346,347,357,]),'labeled_statement':([41,70,71,87,158,159,166,262,326,328,355,],[73,73,73,73,73,73,73,73,73,73,73,]),'expression_statement':([41,70,71,87,158,159,166,182,262,275,326,328,355,],[75,75,75,75,75,75,75,275,75,330,75,75,75,]),'selection_statement':([41,70,71,87,158,159,166,262,326,328,355,],[76,76,76,76,76,76,76,76,76,76,76,]),'iteration_statement':([41,70,71,87,158,159,166,262,326,328,355,],[77,77,77,77,77,77,77,77,77,77,77,]),'jump_statement':([41,70,71,87,158,159,166,262,326,328,355,],[78,78,78,78,78,78,78,78,78,78,78,]),'expression':([41,70,71,85,87,91,158,159,164,166,169,173,181,182,195,198,204,207,262,275,326,328,330,355,],[83,83,83,170,83,180,83,83,170,83,265,271,274,83,277,280,170,170,83,83,83,83,349,83,]),'iteration_header':([41,70,71,87,158,159,166,262,326,328,355,],[87,87,87,87,87,87,87,87,87,87,87,]),'assignment_expression':([41,70,71,85,87,91,133,158,159,160,164,166,168,169,173,181,182,183,195,198,204,207,231,262,275,324,326,328,330,335,355,],[92,92,92,92,92,92,230,92,92,261,92,92,264,92,92,92,92,276,92,92,92,92,230,92,92,345,92,92,92,230,92,]),'conditional_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,198,204,207,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[95,95,95,162,95,95,95,162,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,162,162,162,95,95,162,162,95,95,95,95,350,95,95,]),'assignment_lhs':([41,70,71,85,87,91,133,158,159,160,164,166,168,169,173,181,182,183,195,198,204,207,231,262,275,324,326,328,330,335,355,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'logical_or_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,198,204,207,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'unary_expression':([41,70,71,81,85,87,91,101,102,104,108,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,262,267,275,308,318,324,326,328,330,331,335,355,],[98,98,98,163,98,98,98,203,205,206,163,163,98,98,98,98,98,98,98,98,98,98,98,98,98,163,163,98,98,98,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,98,163,163,163,98,163,98,163,163,98,98,98,98,163,98,98,]),'logical_and_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,198,204,207,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,278,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'postfix_expression':([41,70,71,81,85,87,91,101,102,104,108,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,262,267,275,308,318,324,326,328,330,331,335,355,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'unary_op_before_cast_exp':([41,70,71,81,85,87,91,101,102,104,108,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,262,267,275,308,318,324,326,328,330,331,335,355,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'inclusive_or_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,279,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'primary_expression':([41,70,71,81,85,87,91,101,102,104,108,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,262,267,275,308,318,324,326,328,330,331,335,355,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'function_call':([41,70,71,81,85,87,91,101,102,104,108,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,262,267,275,308,318,324,326,328,330,331,335,355,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'unary_operator':([41,70,71,81,85,87,91,101,102,104,108,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,262,267,275,308,318,324,326,328,330,331,335,355,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'cast_expression':([41,70,71,81,85,87,91,108,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,262,267,275,308,318,324,326,328,330,331,335,355,],[109,109,109,109,109,109,109,209,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,297,298,299,109,109,109,109,109,327,109,109,109,109,109,109,109,109,109,109,]),'exclusive_or_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,284,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'variable_use':([41,70,71,81,85,87,91,101,102,104,108,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,262,267,275,308,318,324,326,328,330,331,335,355,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'const_or_parenthesis':([41,70,71,81,85,87,91,101,102,104,108,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,242,250,255,262,267,275,308,318,324,326,328,330,331,335,355,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'and_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,285,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'equality_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,286,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'relational_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,216,217,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,291,292,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'equality_exp_lhs':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'shift_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,287,288,289,290,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'additive_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,293,294,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'multiplicative_expression':([41,70,71,81,85,87,91,131,133,158,159,160,164,166,168,169,173,181,182,183,195,196,197,198,204,207,208,210,211,212,213,214,215,216,217,218,219,220,221,231,242,250,255,262,275,308,318,324,326,328,330,331,335,355,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,295,296,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'type_qualifier_list':([55,],[135,]),'parameter_type_list':([62,243,270,307,],[139,313,313,337,]),'identifier_list':([62,],[141,]),'parameter_list':([62,243,270,307,],[142,142,142,142,]),'parameter_declaration':([62,237,243,270,307,],[143,305,143,143,143,]),'struct_declaration_list':([64,145,],[146,244,]),'struct_declaration':([64,145,146,244,],[147,147,246,246,]),'specifier_qualifier_list':([64,85,145,146,149,150,164,207,244,],[148,172,148,148,251,252,172,172,148,]),'enumerator_list':([65,154,],[151,256,]),'enumerator':([65,154,254,],[152,152,320,]),'constant_expression':([81,131,242,250,255,308,318,],[161,226,310,319,321,339,344,]),'type_name':([85,164,207,],[171,171,283,]),'iteration_body':([87,],[174,]),'assignment_operator':([96,],[183,]),'initializer':([133,231,335,],[229,302,352,]),'abstract_declarator':([144,172,243,270,],[239,268,312,312,]),'direct_abstract_declarator':([144,172,240,243,269,270,314,],[241,241,306,241,306,241,306,]),'struct_declarator_list':([148,],[247,]),'struct_declarator':([148,317,],[248,343,]),'argument_expression_list':([160,],[260,]),'initializer_list':([231,],[301,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('primary_expression -> variable_use','primary_expression',1,'p_primary_expression','C_Parser_new.py',14),
  ('primary_expression -> const_or_parenthesis','primary_expression',1,'p_primary_expression','C_Parser_new.py',15),
  ('const_or_parenthesis -> CONSTANT','const_or_parenthesis',1,'p_const_or_parenthesis','C_Parser_new.py',22),
  ('const_or_parenthesis -> STRING_LITERAL','const_or_parenthesis',1,'p_const_or_parenthesis','C_Parser_new.py',23),
  ('const_or_parenthesis -> L_PAREN expression R_PAREN','const_or_parenthesis',3,'p_const_or_parenthesis','C_Parser_new.py',24),
  ('variable_use -> IDENTIFIER','variable_use',1,'p_variable_use','C_Parser_new.py',42),
  ('function_call -> IDENTIFIER L_PAREN R_PAREN','function_call',3,'p_function_call','C_Parser_new.py',55),
  ('function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN','function_call',4,'p_function_call','C_Parser_new.py',56),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','C_Parser_new.py',77),
  ('postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE','postfix_expression',4,'p_postfix_expression','C_Parser_new.py',78),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','C_Parser_new.py',79),
  ('postfix_expression -> postfix_expression PTR_OP IDENTIFIER','postfix_expression',3,'p_postfix_expression','C_Parser_new.py',80),
  ('postfix_expression -> postfix_expression INC_OP','postfix_expression',2,'p_postfix_expression','C_Parser_new.py',81),
  ('postfix_expression -> postfix_expression DEC_OP','postfix_expression',2,'p_postfix_expression','C_Parser_new.py',82),
  ('postfix_expression -> function_call','postfix_expression',1,'p_postfix_expression','C_Parser_new.py',83),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','C_Parser_new.py',112),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','C_Parser_new.py',113),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','C_Parser_new.py',127),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression','C_Parser_new.py',128),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression','C_Parser_new.py',129),
  ('unary_expression -> unary_op_before_cast_exp','unary_expression',1,'p_unary_expression','C_Parser_new.py',130),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','C_Parser_new.py',131),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','C_Parser_new.py',132),
  ('unary_op_before_cast_exp -> unary_operator cast_expression','unary_op_before_cast_exp',2,'p_unary_op_before_cast_exp','C_Parser_new.py',156),
  ('unary_operator -> AMP','unary_operator',1,'p_unary_operator','C_Parser_new.py',165),
  ('unary_operator -> STAR','unary_operator',1,'p_unary_operator','C_Parser_new.py',166),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','C_Parser_new.py',167),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','C_Parser_new.py',168),
  ('unary_operator -> TILDA','unary_operator',1,'p_unary_operator','C_Parser_new.py',169),
  ('unary_operator -> EXCLAIM','unary_operator',1,'p_unary_operator','C_Parser_new.py',170),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','C_Parser_new.py',179),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','C_Parser_new.py',180),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','C_Parser_new.py',194),
  ('multiplicative_expression -> multiplicative_expression STAR cast_expression','multiplicative_expression',3,'p_multiplicative_expression','C_Parser_new.py',195),
  ('multiplicative_expression -> multiplicative_expression SLASH cast_expression','multiplicative_expression',3,'p_multiplicative_expression','C_Parser_new.py',196),
  ('multiplicative_expression -> multiplicative_expression PERCENT cast_expression','multiplicative_expression',3,'p_multiplicative_expression','C_Parser_new.py',197),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','C_Parser_new.py',214),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','C_Parser_new.py',215),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','C_Parser_new.py',216),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','C_Parser_new.py',232),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_shift_expression','C_Parser_new.py',233),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_shift_expression','C_Parser_new.py',234),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','C_Parser_new.py',249),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',250),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',251),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',252),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',253),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','C_Parser_new.py',268),
  ('equality_expression -> equality_exp_lhs EQ_OP relational_expression','equality_expression',3,'p_equality_expression','C_Parser_new.py',269),
  ('equality_expression -> equality_exp_lhs NE_OP relational_expression','equality_expression',3,'p_equality_expression','C_Parser_new.py',270),
  ('equality_exp_lhs -> equality_expression','equality_exp_lhs',1,'p_equality_exp_lhs','C_Parser_new.py',285),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','C_Parser_new.py',295),
  ('and_expression -> and_expression AMP equality_expression','and_expression',3,'p_and_expression','C_Parser_new.py',296),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','C_Parser_new.py',311),
  ('exclusive_or_expression -> exclusive_or_expression CARET and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','C_Parser_new.py',312),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','C_Parser_new.py',327),
  ('inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','C_Parser_new.py',328),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','C_Parser_new.py',343),
  ('logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','C_Parser_new.py',344),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','C_Parser_new.py',359),
  ('logical_or_expression -> logical_or_expression OR_OP logical_and_expression','logical_or_expression',3,'p_logical_or_expression','C_Parser_new.py',360),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','C_Parser_new.py',377),
  ('conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','C_Parser_new.py',378),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','C_Parser_new.py',393),
  ('assignment_expression -> assignment_lhs assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','C_Parser_new.py',394),
  ('assignment_lhs -> unary_expression','assignment_lhs',1,'p_assignment_lhs','C_Parser_new.py',411),
  ('assignment_operator -> EQUAL','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',419),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',420),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',421),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',422),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',423),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',424),
  ('assignment_operator -> LEFT_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',425),
  ('assignment_operator -> RIGHT_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',426),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',427),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',428),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',429),
  ('expression -> assignment_expression','expression',1,'p_expression','C_Parser_new.py',440),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','C_Parser_new.py',441),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','C_Parser_new.py',454),
  ('declaration -> declaration_specifiers SEMI','declaration',2,'p_declaration','C_Parser_new.py',462),
  ('declaration -> declaration_specifiers init_declarator_list SEMI','declaration',3,'p_declaration','C_Parser_new.py',463),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','C_Parser_new.py',476),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','C_Parser_new.py',477),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','C_Parser_new.py',478),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','C_Parser_new.py',479),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','C_Parser_new.py',480),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','C_Parser_new.py',481),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','C_Parser_new.py',494),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','C_Parser_new.py',495),
  ('init_declarator -> uninitialized_declaration','init_declarator',1,'p_init_declarator','C_Parser_new.py',510),
  ('init_declarator -> initialized_declaration','init_declarator',1,'p_init_declarator','C_Parser_new.py',511),
  ('initialized_declaration -> declarator EQUAL initializer','initialized_declaration',3,'p_initialized_declaration','C_Parser_new.py',519),
  ('uninitialized_declaration -> declarator','uninitialized_declaration',1,'p_uninitialized_declaration','C_Parser_new.py',539),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',548),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',549),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',550),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',551),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',552),
  ('type -> VOID','type',1,'p_type','C_Parser_new.py',562),
  ('type -> CHAR','type',1,'p_type','C_Parser_new.py',563),
  ('type -> SHORT','type',1,'p_type','C_Parser_new.py',564),
  ('type -> INT','type',1,'p_type','C_Parser_new.py',565),
  ('type -> LONG','type',1,'p_type','C_Parser_new.py',566),
  ('type -> FLOAT','type',1,'p_type','C_Parser_new.py',567),
  ('type -> DOUBLE','type',1,'p_type','C_Parser_new.py',568),
  ('type -> SIGNED','type',1,'p_type','C_Parser_new.py',569),
  ('type -> UNSIGNED','type',1,'p_type','C_Parser_new.py',570),
  ('type_specifier -> type','type_specifier',1,'p_type_specifier','C_Parser_new.py',580),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','C_Parser_new.py',581),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','C_Parser_new.py',582),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE','struct_or_union_specifier',5,'p_struct_or_union_specifier','C_Parser_new.py',590),
  ('struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE','struct_or_union_specifier',4,'p_struct_or_union_specifier','C_Parser_new.py',591),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','C_Parser_new.py',592),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','C_Parser_new.py',613),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','C_Parser_new.py',614),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','C_Parser_new.py',626),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','C_Parser_new.py',627),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI','struct_declaration',3,'p_struct_declaration','C_Parser_new.py',640),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','C_Parser_new.py',650),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','C_Parser_new.py',651),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','C_Parser_new.py',652),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','C_Parser_new.py',653),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','C_Parser_new.py',666),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','C_Parser_new.py',667),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','C_Parser_new.py',680),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','C_Parser_new.py',681),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','C_Parser_new.py',682),
  ('enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE','enum_specifier',4,'p_enum_specifier','C_Parser_new.py',698),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE','enum_specifier',5,'p_enum_specifier','C_Parser_new.py',699),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','C_Parser_new.py',700),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','C_Parser_new.py',718),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','C_Parser_new.py',719),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','C_Parser_new.py',731),
  ('enumerator -> IDENTIFIER EQUAL constant_expression','enumerator',3,'p_enumerator','C_Parser_new.py',732),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','C_Parser_new.py',746),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','C_Parser_new.py',747),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','C_Parser_new.py',756),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','C_Parser_new.py',757),
  ('direct_declarator -> variable_declaration','direct_declarator',1,'p_direct_declarator','C_Parser_new.py',773),
  ('direct_declarator -> function_declaration','direct_declarator',1,'p_direct_declarator','C_Parser_new.py',774),
  ('variable_declaration -> variable_declaration1','variable_declaration',1,'p_variable_declaration','C_Parser_new.py',781),
  ('variable_declaration -> variable_declaration2','variable_declaration',1,'p_variable_declaration','C_Parser_new.py',782),
  ('variable_declaration1 -> IDENTIFIER','variable_declaration1',1,'p_variable_declaration1','C_Parser_new.py',789),
  ('variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE','variable_declaration1',4,'p_variable_declaration1','C_Parser_new.py',790),
  ('variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE','variable_declaration1',3,'p_variable_declaration1','C_Parser_new.py',791),
  ('variable_declaration2 -> L_PAREN declarator R_PAREN','variable_declaration2',3,'p_variable_declaration2','C_Parser_new.py',815),
  ('function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN','function_declaration',4,'p_function_declaration','C_Parser_new.py',825),
  ('function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN','function_declaration',4,'p_function_declaration','C_Parser_new.py',826),
  ('function_declaration -> IDENTIFIER L_PAREN R_PAREN','function_declaration',3,'p_function_declaration','C_Parser_new.py',827),
  ('pointer -> STAR','pointer',1,'p_pointer','C_Parser_new.py',853),
  ('pointer -> STAR type_qualifier_list','pointer',2,'p_pointer','C_Parser_new.py',854),
  ('pointer -> STAR pointer','pointer',2,'p_pointer','C_Parser_new.py',855),
  ('pointer -> STAR type_qualifier_list pointer','pointer',3,'p_pointer','C_Parser_new.py',856),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','C_Parser_new.py',873),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','C_Parser_new.py',874),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','C_Parser_new.py',887),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','C_Parser_new.py',888),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','C_Parser_new.py',901),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','C_Parser_new.py',902),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','C_Parser_new.py',915),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','C_Parser_new.py',916),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','C_Parser_new.py',917),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','C_Parser_new.py',931),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','C_Parser_new.py',932),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','C_Parser_new.py',948),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','C_Parser_new.py',949),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','C_Parser_new.py',962),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','C_Parser_new.py',963),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','C_Parser_new.py',964),
  ('direct_abstract_declarator -> L_SQUARE R_SQUARE','direct_abstract_declarator',2,'p_direct_abstract_declarator','C_Parser_new.py',977),
  ('direct_abstract_declarator -> L_PAREN R_PAREN','direct_abstract_declarator',2,'p_direct_abstract_declarator','C_Parser_new.py',978),
  ('direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',979),
  ('direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',980),
  ('direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',981),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',982),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',983),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE','direct_abstract_declarator',4,'p_direct_abstract_declarator','C_Parser_new.py',984),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator','C_Parser_new.py',985),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','C_Parser_new.py',1002),
  ('initializer -> L_BRACE initializer_list R_BRACE','initializer',3,'p_initializer','C_Parser_new.py',1003),
  ('initializer -> L_BRACE initializer_list COMMA R_BRACE','initializer',4,'p_initializer','C_Parser_new.py',1004),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','C_Parser_new.py',1021),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','C_Parser_new.py',1022),
  ('statement -> labeled_statement','statement',1,'p_statement','C_Parser_new.py',1035),
  ('statement -> compound_statement','statement',1,'p_statement','C_Parser_new.py',1036),
  ('statement -> expression_statement','statement',1,'p_statement','C_Parser_new.py',1037),
  ('statement -> selection_statement','statement',1,'p_statement','C_Parser_new.py',1038),
  ('statement -> iteration_statement','statement',1,'p_statement','C_Parser_new.py',1039),
  ('statement -> jump_statement','statement',1,'p_statement','C_Parser_new.py',1040),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','C_Parser_new.py',1048),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','C_Parser_new.py',1049),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','C_Parser_new.py',1050),
  ('compound_statement -> L_BRACE R_BRACE','compound_statement',2,'p_compound_statement','C_Parser_new.py',1064),
  ('compound_statement -> L_BRACE statement_list R_BRACE','compound_statement',3,'p_compound_statement','C_Parser_new.py',1065),
  ('compound_statement -> L_BRACE declaration_list R_BRACE','compound_statement',3,'p_compound_statement','C_Parser_new.py',1066),
  ('compound_statement -> L_BRACE declaration_list statement_list R_BRACE','compound_statement',4,'p_compound_statement','C_Parser_new.py',1067),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','C_Parser_new.py',1082),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','C_Parser_new.py',1083),
  ('statement_list -> statement','statement_list',1,'p_statement_list','C_Parser_new.py',1096),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','C_Parser_new.py',1097),
  ('expression_statement -> SEMI','expression_statement',1,'p_expression_statement','C_Parser_new.py',1110),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','C_Parser_new.py',1111),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','C_Parser_new.py',1129),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','C_Parser_new.py',1130),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','C_Parser_new.py',1131),
  ('iteration_statement -> iteration_header iteration_body','iteration_statement',2,'p_iteration_statement','C_Parser_new.py',1143),
  ('iteration_header -> WHILE L_PAREN expression R_PAREN','iteration_header',4,'p_iteration_header','C_Parser_new.py',1151),
  ('iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN','iteration_header',5,'p_iteration_header','C_Parser_new.py',1152),
  ('iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN','iteration_header',6,'p_iteration_header','C_Parser_new.py',1153),
  ('iteration_body -> statement','iteration_body',1,'p_iteration_body','C_Parser_new.py',1178),
  ('jump_statement -> GOTO IDENTIFIER SEMI','jump_statement',3,'p_jump_statement','C_Parser_new.py',1185),
  ('jump_statement -> CONTINUE SEMI','jump_statement',2,'p_jump_statement','C_Parser_new.py',1186),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','C_Parser_new.py',1187),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement','C_Parser_new.py',1188),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement','C_Parser_new.py',1189),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','C_Parser_new.py',1203),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','C_Parser_new.py',1204),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','C_Parser_new.py',1218),
  ('external_declaration -> other_declarations','external_declaration',1,'p_external_declaration','C_Parser_new.py',1219),
  ('other_declarations -> declaration','other_declarations',1,'p_other_declarations','C_Parser_new.py',1227),
  ('function_header -> fheader_type1','function_header',1,'p_function_header','C_Parser_new.py',1236),
  ('function_header -> fheader_type2','function_header',1,'p_function_header','C_Parser_new.py',1237),
  ('fheader_type1 -> declaration_specifiers function_declaration','fheader_type1',2,'p_fheader_type1','C_Parser_new.py',1247),
  ('fheader_type2 -> function_declaration','fheader_type2',1,'p_fheader_type2','C_Parser_new.py',1260),
  ('function_definition -> function_header compound_statement','function_definition',2,'p_function_definition','C_Parser_new.py',1270),
  ('function_definition -> function_header declaration_list compound_statement','function_definition',3,'p_function_definition','C_Parser_new.py',1271),
]
