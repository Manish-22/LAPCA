
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'translation_unitADD_ASSIGN AMP AND_ASSIGN AND_OP AUTO BREAK CARET CASE CHAR CHARACTER COLON COMMA CONST CONSTANT CONTINUE DEC_OP DEFAULT DIV_ASSIGN DOT DOUBLE ELLIPSIS ELSE ENUM EQUAL EQ_OP EXCLAIM EXTERN FLOAT FOR GE_OP GOTO GREATER IDENTIFIER IF INC_OP INT LEFT_ASSIGN LEFT_OP LESS LE_OP LONG L_BRACE L_PAREN L_SQUARE MINUS MOD_ASSIGN MUL_ASSIGN NE_OP OR_ASSIGN OR_OP PERCENT PIPE PLUS PTR_OP QUEST REGISTER RETURN RIGHT_ASSIGN RIGHT_OP R_BRACE R_PAREN R_SQUARE SEMI SHORT SIGNED SIZEOF SLASH STAR STATIC STRING_LITERAL STRUCT SUB_ASSIGN SWITCH TILDA TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE XOR_ASSIGN\n    primary_expression : variable_use\n    | const_or_parenthesis\n    \n    const_or_parenthesis : CONSTANT\n    | CHARACTER\n    | STRING_LITERAL\n    | L_PAREN expression R_PAREN\n    \n    variable_use : IDENTIFIER\n    \n    function_call : IDENTIFIER L_PAREN R_PAREN\n    | IDENTIFIER L_PAREN argument_expression_list R_PAREN\n    \n    postfix_expression : primary_expression\n    | postfix_expression L_SQUARE expression R_SQUARE\n    | postfix_expression DOT IDENTIFIER\n    | postfix_expression PTR_OP IDENTIFIER\n    | postfix_expression INC_OP\n    | postfix_expression DEC_OP\n    | function_call\n    \n    argument_expression_list : assignment_expression\n    | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    | INC_OP unary_expression\n    | DEC_OP unary_expression\n    | unary_op_before_cast_exp\n    | SIZEOF unary_expression\n    | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_op_before_cast_exp : unary_operator cast_expression\n    \n    unary_operator : AMP\n    | STAR\n    | PLUS\n    | MINUS\n    | TILDA\n    | EXCLAIM\n    \n    cast_expression : unary_expression\n    | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n    | multiplicative_expression STAR cast_expression\n    | multiplicative_expression SLASH cast_expression\n    | multiplicative_expression PERCENT cast_expression\n    \n    additive_expression : multiplicative_expression\n    | additive_expression PLUS multiplicative_expression\n    | additive_expression MINUS multiplicative_expression\n    \n    shift_expression : additive_expression\n    | shift_expression LEFT_OP additive_expression\n    | shift_expression RIGHT_OP additive_expression\n    \n    relational_expression : shift_expression\n    | relational_expression LESS shift_expression\n    | relational_expression GREATER shift_expression\n    | relational_expression LE_OP shift_expression\n    | relational_expression GE_OP shift_expression\n    \n    equality_expression : relational_expression\n    | equality_exp_lhs EQ_OP relational_expression\n    | equality_exp_lhs NE_OP relational_expression\n    \n    equality_exp_lhs : equality_expression\n    \n    and_expression : equality_expression\n    | and_expression AMP equality_expression\n    \n    exclusive_or_expression : and_expression\n    | exclusive_or_expression CARET and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n    | inclusive_or_expression PIPE exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n    | logical_and_expression AND_OP inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n    | logical_or_expression OR_OP logical_and_expression\n    \n    conditional_expression : logical_or_expression\n    | logical_or_expression QUEST expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n    | assignment_lhs assignment_operator assignment_expression\n    \n    assignment_lhs : unary_expression\n    \n    assignment_operator : EQUAL\n    | MUL_ASSIGN\n    | DIV_ASSIGN\n    | MOD_ASSIGN\n    | ADD_ASSIGN\n    | SUB_ASSIGN\n    | LEFT_ASSIGN\n    | RIGHT_ASSIGN\n    | AND_ASSIGN\n    | XOR_ASSIGN\n    | OR_ASSIGN\n    \n    expression : assignment_expression\n    | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : declaration_specifiers SEMI\n    | declaration_specifiers init_declarator_list SEMI\n    \n    declaration_specifiers : storage_class_specifier\n    | storage_class_specifier declaration_specifiers\n    | type_specifier\n    | type_specifier declaration_specifiers\n    | type_qualifier\n    | type_qualifier declaration_specifiers\n    \n    init_declarator_list : init_declarator\n    | init_declarator_list COMMA init_declarator\n    \n    init_declarator : uninitialized_declaration\n    | initialized_declaration\n    \n    initialized_declaration : declarator EQUAL initializer\n    \n    uninitialized_declaration : declarator\n    \n    storage_class_specifier : TYPEDEF\n    | EXTERN\n    | STATIC\n    | AUTO\n    | REGISTER\n    \n    type : VOID\n    | CHAR\n    | SHORT\n    | INT\n    | LONG\n    | FLOAT\n    | DOUBLE\n    | SIGNED\n    | UNSIGNED\n    \n    type_specifier : type\n    | struct_or_union_specifier\n    | enum_specifier\n    \n    struct_or_union_specifier : struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE\n    | struct_or_union L_BRACE struct_declaration_list R_BRACE\n    | struct_or_union IDENTIFIER\n    \n    struct_or_union : STRUCT\n    | UNION\n    \n    struct_declaration_list : struct_declaration\n    | struct_declaration_list struct_declaration\n    \n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMI\n    \n    specifier_qualifier_list : type_specifier specifier_qualifier_list\n    | type_specifier\n    | type_qualifier specifier_qualifier_list\n    | type_qualifier\n    \n    struct_declarator_list : struct_declarator\n    | struct_declarator_list COMMA struct_declarator\n    \n    struct_declarator : declarator\n    | COLON constant_expression\n    | declarator COLON constant_expression\n    \n    enum_specifier : ENUM L_BRACE enumerator_list R_BRACE\n    | ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE\n    | ENUM IDENTIFIER\n    \n    enumerator_list : enumerator\n    | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n    | IDENTIFIER EQUAL constant_expression\n    \n    type_qualifier : CONST\n    | VOLATILE\n    \n    declarator : pointer direct_declarator \n    | direct_declarator\n    \n    direct_declarator : variable_declaration\n    | function_declaration\n    \n    variable_declaration : variable_declaration1\n    | variable_declaration2\n    \n    variable_declaration1 : IDENTIFIER\n    | IDENTIFIER L_SQUARE constant_expression R_SQUARE\n    | IDENTIFIER L_SQUARE R_SQUARE\n    \n   variable_declaration2 : L_PAREN declarator R_PAREN\n   \n    function_declaration : IDENTIFIER L_PAREN parameter_type_list R_PAREN\n    | IDENTIFIER L_PAREN identifier_list R_PAREN\n    | IDENTIFIER L_PAREN R_PAREN   \n    \n    pointer : STAR\n    | STAR type_qualifier_list\n    | STAR pointer\n    | STAR type_qualifier_list pointer\n    \n    type_qualifier_list : type_qualifier\n    | type_qualifier_list type_qualifier\n    \n    parameter_type_list : parameter_list\n    | parameter_list COMMA ELLIPSIS\n    \n    parameter_list : parameter_declaration\n    | parameter_list COMMA parameter_declaration\n    \n    parameter_declaration : declaration_specifiers declarator\n    | declaration_specifiers abstract_declarator\n    | declaration_specifiers\n    \n    identifier_list : IDENTIFIER\n    | identifier_list COMMA IDENTIFIER\n    \n    type_name : specifier_qualifier_list\n    | specifier_qualifier_list abstract_declarator\n    \n    abstract_declarator : pointer\n    | direct_abstract_declarator\n    | pointer direct_abstract_declarator\n    \n    direct_abstract_declarator : L_SQUARE R_SQUARE\n    | L_PAREN R_PAREN\n    | L_SQUARE constant_expression R_SQUARE\n    | L_PAREN abstract_declarator R_PAREN\n    | L_PAREN parameter_type_list R_PAREN\n    | direct_abstract_declarator L_PAREN R_PAREN\n    | direct_abstract_declarator L_SQUARE R_SQUARE\n    | direct_abstract_declarator L_SQUARE constant_expression R_SQUARE\n    | direct_abstract_declarator L_PAREN parameter_type_list R_PAREN\n    \n    initializer : assignment_expression\n    | L_BRACE initializer_list R_BRACE\n    | L_BRACE initializer_list COMMA R_BRACE\n    \n    initializer_list : initializer\n    | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n    | compound_statement\n    | expression_statement\n    | selection_statement\n    | iteration_statement\n    | jump_statement\n    \n    labeled_statement : IDENTIFIER COLON statement\n    | CASE constant_expression COLON statement\n    | DEFAULT COLON statement\n    \n    compound_statement : compound_statement_begin R_BRACE\n    | compound_statement_begin statement_list R_BRACE\n    | compound_statement_begin declaration_list R_BRACE\n    | compound_statement_begin declaration_list statement_list R_BRACE\n    \n    compound_statement_begin : L_BRACE\n    \n    declaration_list : declaration\n    | declaration_list declaration\n    \n    statement_list : statement\n    | statement_list statement\n    \n    expression_statement : SEMI\n    | expression SEMI\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n    | IF L_PAREN expression R_PAREN statement ELSE statement\n    | SWITCH L_PAREN expression R_PAREN statement\n    iteration_statement : iteration_header iteration_body \n    iteration_header : WHILE L_PAREN expression R_PAREN \n    | FOR L_PAREN expression_statement expression_statement R_PAREN \n    | FOR L_PAREN expression_statement expression_statement expression R_PAREN \n    iteration_body : statement \n    jump_statement : GOTO IDENTIFIER SEMI\n    | CONTINUE SEMI\n    | BREAK SEMI\n    | RETURN SEMI\n    | RETURN expression SEMI\n    \n    translation_unit : external_declaration\n    |  external_declaration translation_unit\n    \n    external_declaration : function_definition\n    | other_declarations\n    \n    other_declarations : declaration\n    \n    function_header : fheader_type1\n    | fheader_type2\n    \n    fheader_type1 : declaration_specifiers function_declaration\n    \n    fheader_type2 : function_declaration\n    \n    function_definition : function_header compound_statement\n    | function_header declaration_list compound_statement\n    '
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,6,9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,43,44,45,50,54,56,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,86,88,89,92,102,103,105,109,114,115,116,117,118,119,131,132,133,135,137,138,139,146,150,151,152,156,157,158,159,160,161,162,166,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,234,235,238,242,244,245,247,252,253,254,255,256,257,259,260,264,265,269,274,275,277,310,316,317,319,320,324,326,327,328,330,331,332,333,337,348,349,350,357,358,359,],[14,14,-221,-222,-223,49,-84,-86,-88,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,64,67,-116,-117,-228,81,-200,-199,49,-82,49,49,-152,-85,-87,-89,140,-115,155,-132,-229,-201,-195,81,81,-202,-186,-187,-188,-189,-190,-191,-204,167,167,81,178,167,167,167,167,167,-26,-27,-28,-29,-30,-31,-83,49,167,167,-153,-154,-156,49,49,-122,-124,155,-196,-203,-197,81,81,167,167,81,-205,167,167,167,-209,-213,-215,-216,-217,167,167,167,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,167,167,167,167,283,284,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,-155,-157,305,49,167,49,-114,167,-121,-123,-130,155,167,-198,-192,81,-194,167,-214,-218,167,167,49,-113,49,167,-131,167,-193,81,81,-210,167,167,167,-206,-208,-211,81,-212,-207,]),'TYPEDEF':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,67,68,69,70,72,131,142,157,159,236,237,239,245,247,255,259,272,309,317,324,],[15,15,-221,-222,15,-223,-224,-225,-227,15,15,15,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,15,15,-200,-199,-82,-226,15,-115,-132,-229,-201,-195,15,-83,-151,-196,-197,-149,-150,15,15,-114,-130,-198,15,15,-113,-131,]),'EXTERN':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,67,68,69,70,72,131,142,157,159,236,237,239,245,247,255,259,272,309,317,324,],[16,16,-221,-222,16,-223,-224,-225,-227,16,16,16,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,16,16,-200,-199,-82,-226,16,-115,-132,-229,-201,-195,16,-83,-151,-196,-197,-149,-150,16,16,-114,-130,-198,16,16,-113,-131,]),'STATIC':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,67,68,69,70,72,131,142,157,159,236,237,239,245,247,255,259,272,309,317,324,],[17,17,-221,-222,17,-223,-224,-225,-227,17,17,17,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,17,17,-200,-199,-82,-226,17,-115,-132,-229,-201,-195,17,-83,-151,-196,-197,-149,-150,17,17,-114,-130,-198,17,17,-113,-131,]),'AUTO':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,67,68,69,70,72,131,142,157,159,236,237,239,245,247,255,259,272,309,317,324,],[18,18,-221,-222,18,-223,-224,-225,-227,18,18,18,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,18,18,-200,-199,-82,-226,18,-115,-132,-229,-201,-195,18,-83,-151,-196,-197,-149,-150,18,18,-114,-130,-198,18,18,-113,-131,]),'REGISTER':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,67,68,69,70,72,131,142,157,159,236,237,239,245,247,255,259,272,309,317,324,],[19,19,-221,-222,19,-223,-224,-225,-227,19,19,19,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,19,19,-200,-199,-82,-226,19,-115,-132,-229,-201,-195,19,-83,-151,-196,-197,-149,-150,19,19,-114,-130,-198,19,19,-113,-131,]),'CONST':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,56,63,64,65,67,68,69,70,72,86,131,137,139,142,147,148,149,151,152,157,159,166,209,235,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[23,23,-221,-222,23,-223,-224,-225,-227,23,23,23,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,23,23,-200,-199,-82,-226,23,23,-115,23,-132,-229,-201,-195,23,23,-83,23,-156,-151,23,23,-118,23,23,-196,-197,23,23,-157,-149,-150,23,23,23,-114,-119,-130,-198,23,23,-113,-120,-131,]),'VOLATILE':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,56,63,64,65,67,68,69,70,72,86,131,137,139,142,147,148,149,151,152,157,159,166,209,235,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[24,24,-221,-222,24,-223,-224,-225,-227,24,24,24,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,24,24,-200,-199,-82,-226,24,24,-115,24,-132,-229,-201,-195,24,24,-83,24,-156,-151,24,24,-118,24,24,-196,-197,24,24,-157,-149,-150,24,24,24,-114,-119,-130,-198,24,24,-113,-120,-131,]),'VOID':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[25,25,-221,-222,25,-223,-224,-225,-227,25,25,25,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,25,25,-200,-199,-82,-226,25,-115,25,-132,-229,-201,-195,25,25,-83,-151,25,25,-118,25,25,-196,-197,25,25,-149,-150,25,25,25,-114,-119,-130,-198,25,25,-113,-120,-131,]),'CHAR':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[26,26,-221,-222,26,-223,-224,-225,-227,26,26,26,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,26,26,-200,-199,-82,-226,26,-115,26,-132,-229,-201,-195,26,26,-83,-151,26,26,-118,26,26,-196,-197,26,26,-149,-150,26,26,26,-114,-119,-130,-198,26,26,-113,-120,-131,]),'SHORT':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[27,27,-221,-222,27,-223,-224,-225,-227,27,27,27,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,27,27,-200,-199,-82,-226,27,-115,27,-132,-229,-201,-195,27,27,-83,-151,27,27,-118,27,27,-196,-197,27,27,-149,-150,27,27,27,-114,-119,-130,-198,27,27,-113,-120,-131,]),'INT':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[28,28,-221,-222,28,-223,-224,-225,-227,28,28,28,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,28,28,-200,-199,-82,-226,28,-115,28,-132,-229,-201,-195,28,28,-83,-151,28,28,-118,28,28,-196,-197,28,28,-149,-150,28,28,28,-114,-119,-130,-198,28,28,-113,-120,-131,]),'LONG':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[29,29,-221,-222,29,-223,-224,-225,-227,29,29,29,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,29,29,-200,-199,-82,-226,29,-115,29,-132,-229,-201,-195,29,29,-83,-151,29,29,-118,29,29,-196,-197,29,29,-149,-150,29,29,29,-114,-119,-130,-198,29,29,-113,-120,-131,]),'FLOAT':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[30,30,-221,-222,30,-223,-224,-225,-227,30,30,30,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,30,30,-200,-199,-82,-226,30,-115,30,-132,-229,-201,-195,30,30,-83,-151,30,30,-118,30,30,-196,-197,30,30,-149,-150,30,30,30,-114,-119,-130,-198,30,30,-113,-120,-131,]),'DOUBLE':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[31,31,-221,-222,31,-223,-224,-225,-227,31,31,31,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,31,31,-200,-199,-82,-226,31,-115,31,-132,-229,-201,-195,31,31,-83,-151,31,31,-118,31,31,-196,-197,31,31,-149,-150,31,31,31,-114,-119,-130,-198,31,31,-113,-120,-131,]),'SIGNED':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[32,32,-221,-222,32,-223,-224,-225,-227,32,32,32,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,32,32,-200,-199,-82,-226,32,-115,32,-132,-229,-201,-195,32,32,-83,-151,32,32,-118,32,32,-196,-197,32,32,-149,-150,32,32,32,-114,-119,-130,-198,32,32,-113,-120,-131,]),'UNSIGNED':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[33,33,-221,-222,33,-223,-224,-225,-227,33,33,33,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,33,33,-200,-199,-82,-226,33,-115,33,-132,-229,-201,-195,33,33,-83,-151,33,33,-118,33,33,-196,-197,33,33,-149,-150,33,33,33,-114,-119,-130,-198,33,33,-113,-120,-131,]),'ENUM':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[35,35,-221,-222,35,-223,-224,-225,-227,35,35,35,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,35,35,-200,-199,-82,-226,35,-115,35,-132,-229,-201,-195,35,35,-83,-151,35,35,-118,35,35,-196,-197,35,35,-149,-150,35,35,35,-114,-119,-130,-198,35,35,-113,-120,-131,]),'STRUCT':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[36,36,-221,-222,36,-223,-224,-225,-227,36,36,36,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,36,36,-200,-199,-82,-226,36,-115,36,-132,-229,-201,-195,36,36,-83,-151,36,36,-118,36,36,-196,-197,36,36,-149,-150,36,36,36,-114,-119,-130,-198,36,36,-113,-120,-131,]),'UNION':([0,2,3,4,5,6,7,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,45,47,63,64,65,67,68,69,70,72,86,131,142,147,148,149,151,152,157,159,166,209,236,237,239,245,246,247,248,255,259,272,309,317,318,324,],[37,37,-221,-222,37,-223,-224,-225,-227,37,37,37,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-228,37,37,-200,-199,-82,-226,37,-115,37,-132,-229,-201,-195,37,37,-83,-151,37,37,-118,37,37,-196,-197,37,37,-149,-150,37,37,37,-114,-119,-130,-198,37,37,-113,-120,-131,]),'$end':([1,2,3,4,6,38,39,45,68,70,131,157,159,259,],[0,-219,-221,-222,-223,-220,-228,-82,-229,-195,-83,-196,-197,-198,]),'L_BRACE':([5,7,8,10,34,35,36,37,40,41,42,43,45,47,64,67,69,70,71,72,73,74,75,76,77,78,79,80,88,131,135,142,157,158,159,160,161,168,169,176,177,179,180,181,233,236,237,259,260,264,265,274,275,327,328,330,331,337,348,349,350,357,358,359,],[43,-224,-225,-227,65,66,-116,-117,43,43,-200,-199,-82,-226,147,156,-201,-195,43,43,-202,-186,-187,-188,-189,-190,-191,-204,43,-83,233,-151,-196,-203,-197,43,43,43,-205,-209,-213,-215,-216,-217,233,-149,-150,-198,-192,43,-194,-214,-218,-193,43,43,-210,233,-206,-208,-211,43,-212,-207,]),'SEMI':([9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,41,42,43,44,45,46,47,48,49,51,52,53,55,57,58,59,60,61,62,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,84,88,90,91,92,93,96,98,99,100,101,104,106,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,130,131,136,142,157,158,159,160,161,164,165,167,168,169,176,177,178,179,180,181,182,184,203,204,205,207,208,211,227,229,230,231,232,236,237,247,249,250,251,255,259,260,261,264,265,266,268,274,275,277,278,280,281,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,317,321,324,325,327,328,329,330,331,334,335,336,345,346,348,349,350,352,353,357,358,359,],[45,-84,-86,-88,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,80,-200,-199,45,-82,131,-142,-90,-145,-92,-93,-95,-140,-141,-143,-144,-85,-87,-89,-115,-132,-201,-195,80,80,-202,-186,-187,-188,-189,-190,-191,-204,-7,169,80,179,180,181,-79,-65,-63,-32,-61,-19,-22,-59,-10,-16,-34,-57,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,-142,-83,-139,-151,-196,-203,-197,80,80,-81,-32,-7,80,-205,-209,-213,274,-215,-216,-217,275,80,-14,-15,-20,-21,-23,-25,-91,-147,-148,-94,-181,-149,-150,-114,318,-125,-127,-130,-198,-192,-8,80,-194,-80,-6,-214,-218,80,-66,-62,-60,-12,-13,-58,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-146,-113,-128,-131,-9,-193,80,-33,80,-210,-11,-24,-182,-126,-129,-206,-208,-211,-64,-183,80,-212,-207,]),'STAR':([9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,41,42,43,44,45,50,56,60,61,62,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,88,92,99,101,102,103,104,105,107,108,109,110,112,113,114,115,116,117,118,119,121,122,123,129,131,132,133,135,137,139,146,150,151,152,157,158,159,160,161,162,165,166,167,168,169,170,171,174,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,235,244,245,247,252,253,254,255,257,259,260,261,264,265,268,269,272,274,275,277,283,284,297,298,299,300,301,310,317,319,320,324,325,326,327,328,329,330,331,332,333,334,335,337,348,349,350,357,358,359,],[56,-84,-86,-88,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,115,-200,-199,56,-82,56,56,-85,-87,-89,-115,-132,-201,-195,115,115,-202,-186,-187,-188,-189,-190,-191,-204,-7,115,115,115,115,-32,-19,115,115,-22,115,-10,-16,115,-34,-1,-2,-26,-27,-28,-29,-30,-31,-3,-4,-5,224,-83,56,115,115,56,-156,56,56,-122,-124,-196,-203,-197,115,115,115,-32,115,-7,115,-205,115,115,56,115,-209,-213,-215,-216,-217,115,115,115,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,115,115,115,115,-14,-15,-20,115,-21,-23,115,115,-25,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-157,115,56,-114,115,-121,-123,-130,115,-198,-192,-8,115,-194,-6,115,56,-214,-218,115,-12,-13,224,224,-35,-36,-37,115,-113,56,115,-131,-9,115,-193,115,-33,115,-210,115,115,-11,-24,115,-206,-208,-211,115,-212,-207,]),'L_PAREN':([9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,41,42,43,44,45,49,50,54,56,60,61,62,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,92,94,95,102,103,105,109,114,115,116,117,118,119,131,132,133,135,137,138,139,146,150,151,152,157,158,159,160,161,162,166,167,168,169,170,171,174,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,234,235,242,243,244,245,247,252,253,254,255,257,259,260,264,265,269,271,272,274,275,277,308,310,311,313,316,317,319,320,324,326,327,328,330,331,332,333,337,338,340,342,343,344,348,349,350,355,356,357,358,359,],[50,-84,-86,-88,63,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,86,-200,-199,50,-82,63,50,50,-152,-85,-87,-89,-115,-132,-201,-195,86,86,-202,-186,-187,-188,-189,-190,-191,-204,162,166,171,86,175,86,86,183,184,206,206,209,166,-26,-27,-28,-29,-30,-31,-83,50,166,86,-153,-154,-156,245,50,-122,-124,-196,-203,-197,86,86,86,86,162,86,-205,86,86,272,86,-209,-213,-215,-216,-217,86,86,86,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,86,166,166,86,86,86,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,86,-155,-157,245,309,166,245,-114,166,-121,-123,-130,166,-198,-192,86,-194,166,272,272,-214,-218,86,309,166,-172,-173,245,-113,50,166,-131,86,-193,86,86,-210,86,166,86,-177,-178,-174,-175,-176,-206,-208,-211,-180,-179,86,-212,-207,]),'L_SQUARE':([11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,49,56,60,61,62,64,67,81,101,107,108,112,113,121,122,123,137,138,139,146,151,152,167,174,203,204,234,235,242,243,245,247,253,254,255,261,268,271,272,283,284,308,311,313,316,317,324,325,334,338,340,342,343,344,355,356,],[-84,-86,-88,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,133,-152,-85,-87,-89,-115,-132,-7,200,-10,-16,-1,-2,-3,-4,-5,-153,-154,-156,244,-122,-124,-7,244,-14,-15,-155,-157,244,310,244,-114,-121,-123,-130,-8,-6,244,244,-12,-13,310,-172,-173,244,-113,-131,-9,-11,-177,-178,-174,-175,-176,-180,-179,]),'COMMA':([11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,46,47,48,49,51,52,53,55,56,57,58,59,60,61,62,64,67,81,84,93,96,98,99,100,101,104,106,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,130,136,137,138,139,140,142,143,144,145,146,153,154,155,164,165,167,172,182,203,204,205,207,208,211,227,229,230,231,232,234,235,236,237,240,241,242,243,247,249,250,251,255,258,261,262,263,266,267,268,273,276,278,279,280,281,282,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,308,311,313,317,321,322,323,324,325,329,334,335,336,338,340,342,343,344,345,346,347,351,352,353,354,355,356,],[-84,-86,-88,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,132,-142,-90,-145,-92,-93,-95,-140,-152,-141,-143,-144,-85,-87,-89,-115,-132,-7,170,-79,-65,-63,-32,-61,-19,-22,-59,-10,-16,-34,-57,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,-142,-139,-153,-154,-156,-165,-151,238,239,-160,-164,256,-133,-135,-81,-32,-7,170,170,-14,-15,-20,-21,-23,-25,-91,-147,-148,-94,-181,-155,-157,-149,-150,-162,-163,-169,-170,-114,319,-125,-127,-130,256,-8,326,-17,-80,170,-6,170,170,-66,170,-62,-60,170,-12,-13,-58,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-146,337,-184,-166,-161,-171,-172,-173,-113,-128,-134,-136,-131,-9,-33,-11,-24,-182,-177,-178,-174,-175,-176,-126,-129,-18,170,-64,-183,-185,-180,-179,]),'R_PAREN':([11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,49,55,56,57,58,59,60,61,62,63,64,67,80,93,96,98,99,100,101,104,106,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,130,134,136,137,138,139,140,141,142,143,144,145,146,151,152,162,165,167,169,172,173,174,203,204,205,207,208,211,229,230,234,235,236,237,240,241,242,243,245,247,253,254,255,261,262,263,266,267,268,270,271,272,273,276,278,280,281,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,305,306,307,308,309,311,313,314,315,316,317,324,325,329,332,334,335,338,339,340,342,343,344,347,351,352,355,356,],[-84,-86,-88,-96,-97,-98,-99,-100,-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-145,-140,-152,-141,-143,-144,-85,-87,-89,142,-115,-132,-204,-79,-65,-63,-32,-61,-19,-22,-59,-10,-16,-34,-57,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,-142,230,-139,-153,-154,-156,-165,236,-151,237,-158,-160,-164,-122,-124,261,-32,-7,-205,268,269,-167,-14,-15,-20,-21,-23,-25,-147,-148,-155,-157,-149,-150,-162,-163,-169,-170,313,-114,-121,-123,-130,-8,325,-17,-80,328,-6,-168,-169,313,330,331,-66,-62,-60,-12,-13,335,-58,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-146,-166,-159,-161,-171,338,-172,-173,343,344,-169,-113,-131,-9,-33,350,-11,-24,-177,355,-178,-174,-175,-176,-18,358,-64,-180,-179,]),'COLON':([20,21,22,23,24,25,26,27,28,29,30,31,32,33,49,55,57,58,59,64,67,81,83,93,96,98,99,100,101,104,106,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,130,136,142,150,151,152,163,164,165,167,203,204,205,207,208,211,229,230,236,237,247,251,253,254,255,261,266,268,278,279,280,281,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,317,319,324,325,329,334,335,352,],[-110,-111,-112,-137,-138,-101,-102,-103,-104,-105,-106,-107,-108,-109,-145,-140,-141,-143,-144,-115,-132,161,168,-79,-65,-63,-32,-61,-19,-22,-59,-10,-16,-34,-57,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,-142,-139,-151,252,-122,-124,264,-81,-32,-7,-14,-15,-20,-21,-23,-25,-147,-148,-149,-150,-114,320,-121,-123,-130,-8,-80,-6,-66,333,-62,-60,-12,-13,-58,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-146,-113,252,-131,-9,-33,-11,-24,-64,]),'R_BRACE':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,96,98,99,100,101,104,106,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,131,148,149,153,154,155,157,158,159,160,164,165,167,169,176,177,179,180,181,203,204,205,207,208,211,232,246,248,258,259,260,261,265,268,274,275,278,280,281,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,318,322,323,325,327,329,334,335,336,337,348,349,352,353,354,359,],[70,-200,-199,-82,-201,-195,157,159,-202,-186,-187,-188,-189,-190,-191,-204,-65,-63,-32,-61,-19,-22,-59,-10,-16,-34,-57,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,-83,247,-118,255,-133,-135,-196,-203,-197,259,-81,-32,-7,-205,-209,-213,-215,-216,-217,-14,-15,-20,-21,-23,-25,-181,317,-119,324,-198,-192,-8,-194,-6,-214,-218,-66,-62,-60,-12,-13,-58,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,336,-184,-120,-134,-136,-9,-193,-33,-11,-24,-182,353,-206,-208,-64,-183,-185,-207,]),'CASE':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,88,131,157,158,159,160,161,168,169,176,177,179,180,181,259,260,264,265,274,275,327,328,330,331,348,349,350,357,358,359,],[82,-200,-199,-82,-201,-195,82,82,-202,-186,-187,-188,-189,-190,-191,-204,82,-83,-196,-203,-197,82,82,82,-205,-209,-213,-215,-216,-217,-198,-192,82,-194,-214,-218,-193,82,82,-210,-206,-208,-211,82,-212,-207,]),'DEFAULT':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,88,131,157,158,159,160,161,168,169,176,177,179,180,181,259,260,264,265,274,275,327,328,330,331,348,349,350,357,358,359,],[83,-200,-199,-82,-201,-195,83,83,-202,-186,-187,-188,-189,-190,-191,-204,83,-83,-196,-203,-197,83,83,83,-205,-209,-213,-215,-216,-217,-198,-192,83,-194,-214,-218,-193,83,83,-210,-206,-208,-211,83,-212,-207,]),'IF':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,88,131,157,158,159,160,161,168,169,176,177,179,180,181,259,260,264,265,274,275,327,328,330,331,348,349,350,357,358,359,],[85,-200,-199,-82,-201,-195,85,85,-202,-186,-187,-188,-189,-190,-191,-204,85,-83,-196,-203,-197,85,85,85,-205,-209,-213,-215,-216,-217,-198,-192,85,-194,-214,-218,-193,85,85,-210,-206,-208,-211,85,-212,-207,]),'SWITCH':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,88,131,157,158,159,160,161,168,169,176,177,179,180,181,259,260,264,265,274,275,327,328,330,331,348,349,350,357,358,359,],[87,-200,-199,-82,-201,-195,87,87,-202,-186,-187,-188,-189,-190,-191,-204,87,-83,-196,-203,-197,87,87,87,-205,-209,-213,-215,-216,-217,-198,-192,87,-194,-214,-218,-193,87,87,-210,-206,-208,-211,87,-212,-207,]),'GOTO':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,88,131,157,158,159,160,161,168,169,176,177,179,180,181,259,260,264,265,274,275,327,328,330,331,348,349,350,357,358,359,],[89,-200,-199,-82,-201,-195,89,89,-202,-186,-187,-188,-189,-190,-191,-204,89,-83,-196,-203,-197,89,89,89,-205,-209,-213,-215,-216,-217,-198,-192,89,-194,-214,-218,-193,89,89,-210,-206,-208,-211,89,-212,-207,]),'CONTINUE':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,88,131,157,158,159,160,161,168,169,176,177,179,180,181,259,260,264,265,274,275,327,328,330,331,348,349,350,357,358,359,],[90,-200,-199,-82,-201,-195,90,90,-202,-186,-187,-188,-189,-190,-191,-204,90,-83,-196,-203,-197,90,90,90,-205,-209,-213,-215,-216,-217,-198,-192,90,-194,-214,-218,-193,90,90,-210,-206,-208,-211,90,-212,-207,]),'BREAK':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,88,131,157,158,159,160,161,168,169,176,177,179,180,181,259,260,264,265,274,275,327,328,330,331,348,349,350,357,358,359,],[91,-200,-199,-82,-201,-195,91,91,-202,-186,-187,-188,-189,-190,-191,-204,91,-83,-196,-203,-197,91,91,91,-205,-209,-213,-215,-216,-217,-198,-192,91,-194,-214,-218,-193,91,91,-210,-206,-208,-211,91,-212,-207,]),'RETURN':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,88,131,157,158,159,160,161,168,169,176,177,179,180,181,259,260,264,265,274,275,327,328,330,331,348,349,350,357,358,359,],[92,-200,-199,-82,-201,-195,92,92,-202,-186,-187,-188,-189,-190,-191,-204,92,-83,-196,-203,-197,92,92,92,-205,-209,-213,-215,-216,-217,-198,-192,92,-194,-214,-218,-193,92,92,-210,-206,-208,-211,92,-212,-207,]),'WHILE':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,88,131,157,158,159,160,161,168,169,176,177,179,180,181,259,260,264,265,274,275,327,328,330,331,348,349,350,357,358,359,],[94,-200,-199,-82,-201,-195,94,94,-202,-186,-187,-188,-189,-190,-191,-204,94,-83,-196,-203,-197,94,94,94,-205,-209,-213,-215,-216,-217,-198,-192,94,-194,-214,-218,-193,94,94,-210,-206,-208,-211,94,-212,-207,]),'FOR':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,88,131,157,158,159,160,161,168,169,176,177,179,180,181,259,260,264,265,274,275,327,328,330,331,348,349,350,357,358,359,],[95,-200,-199,-82,-201,-195,95,95,-202,-186,-187,-188,-189,-190,-191,-204,95,-83,-196,-203,-197,95,95,95,-205,-209,-213,-215,-216,-217,-198,-192,95,-194,-214,-218,-193,95,95,-210,-206,-208,-211,95,-212,-207,]),'INC_OP':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,88,92,101,102,103,105,107,108,109,112,113,114,115,116,117,118,119,121,122,123,131,133,135,157,158,159,160,161,162,166,167,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,203,204,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,261,264,265,268,269,274,275,277,283,284,310,320,325,326,327,328,330,331,332,333,334,337,348,349,350,357,358,359,],[102,-200,-199,-82,-201,-195,102,102,-202,-186,-187,-188,-189,-190,-191,-204,-7,102,102,102,102,203,102,102,102,-10,-16,102,-1,-2,-26,-27,-28,-29,-30,-31,-3,-4,-5,-83,102,102,-196,-203,-197,102,102,102,102,-7,102,-205,102,102,102,-209,-213,-215,-216,-217,102,102,102,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,102,102,102,102,-14,-15,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-198,-192,-8,102,-194,-6,102,-214,-218,102,-12,-13,102,102,-9,102,-193,102,102,-210,102,102,-11,102,-206,-208,-211,102,-212,-207,]),'DEC_OP':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,88,92,101,102,103,105,107,108,109,112,113,114,115,116,117,118,119,121,122,123,131,133,135,157,158,159,160,161,162,166,167,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,203,204,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,261,264,265,268,269,274,275,277,283,284,310,320,325,326,327,328,330,331,332,333,334,337,348,349,350,357,358,359,],[103,-200,-199,-82,-201,-195,103,103,-202,-186,-187,-188,-189,-190,-191,-204,-7,103,103,103,103,204,103,103,103,-10,-16,103,-1,-2,-26,-27,-28,-29,-30,-31,-3,-4,-5,-83,103,103,-196,-203,-197,103,103,103,103,-7,103,-205,103,103,103,-209,-213,-215,-216,-217,103,103,103,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,103,103,103,103,-14,-15,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-198,-192,-8,103,-194,-6,103,-214,-218,103,-12,-13,103,103,-9,103,-193,103,103,-210,103,103,-11,103,-206,-208,-211,103,-212,-207,]),'SIZEOF':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,82,86,88,92,102,103,105,109,114,115,116,117,118,119,131,133,135,157,158,159,160,161,162,166,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,264,265,269,274,275,277,310,320,326,327,328,330,331,332,333,337,348,349,350,357,358,359,],[105,-200,-199,-82,-201,-195,105,105,-202,-186,-187,-188,-189,-190,-191,-204,105,105,105,105,105,105,105,105,-26,-27,-28,-29,-30,-31,-83,105,105,-196,-203,-197,105,105,105,105,105,-205,105,105,105,-209,-213,-215,-216,-217,105,105,105,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-198,-192,105,-194,105,-214,-218,105,105,105,105,-193,105,105,-210,105,105,105,-206,-208,-211,105,-212,-207,]),'AMP':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,88,92,99,101,102,103,104,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,131,133,135,157,158,159,160,161,162,165,166,167,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,261,264,265,268,269,274,275,277,283,284,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,310,320,325,326,327,328,329,330,331,332,333,334,335,337,348,349,350,357,358,359,],[114,-200,-199,-82,-201,-195,114,114,-202,-186,-187,-188,-189,-190,-191,-204,-7,114,114,114,114,-32,-19,114,114,-22,114,-10,-16,114,-34,-1,-2,-26,-27,-28,-29,-30,-31,213,-3,-4,-5,-53,-49,-44,-41,-38,-83,114,114,-196,-203,-197,114,114,114,-32,114,-7,114,-205,114,114,114,-209,-213,-215,-216,-217,114,114,114,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,114,114,114,114,-14,-15,-20,114,-21,-23,114,114,-25,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-198,-192,-8,114,-194,-6,114,-214,-218,114,-12,-13,213,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,114,114,-9,114,-193,114,-33,114,-210,114,114,-11,-24,114,-206,-208,-211,114,-212,-207,]),'PLUS':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,88,92,99,101,102,103,104,105,107,108,109,110,112,113,114,115,116,117,118,119,121,122,123,128,129,131,133,135,157,158,159,160,161,162,165,166,167,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,261,264,265,268,269,274,275,277,283,284,295,296,297,298,299,300,301,310,320,325,326,327,328,329,330,331,332,333,334,335,337,348,349,350,357,358,359,],[116,-200,-199,-82,-201,-195,116,116,-202,-186,-187,-188,-189,-190,-191,-204,-7,116,116,116,116,-32,-19,116,116,-22,116,-10,-16,116,-34,-1,-2,-26,-27,-28,-29,-30,-31,-3,-4,-5,222,-38,-83,116,116,-196,-203,-197,116,116,116,-32,116,-7,116,-205,116,116,116,-209,-213,-215,-216,-217,116,116,116,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,116,116,116,116,-14,-15,-20,116,-21,-23,116,116,-25,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-198,-192,-8,116,-194,-6,116,-214,-218,116,-12,-13,222,222,-39,-40,-35,-36,-37,116,116,-9,116,-193,116,-33,116,-210,116,116,-11,-24,116,-206,-208,-211,116,-212,-207,]),'MINUS':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,88,92,99,101,102,103,104,105,107,108,109,110,112,113,114,115,116,117,118,119,121,122,123,128,129,131,133,135,157,158,159,160,161,162,165,166,167,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,261,264,265,268,269,274,275,277,283,284,295,296,297,298,299,300,301,310,320,325,326,327,328,329,330,331,332,333,334,335,337,348,349,350,357,358,359,],[117,-200,-199,-82,-201,-195,117,117,-202,-186,-187,-188,-189,-190,-191,-204,-7,117,117,117,117,-32,-19,117,117,-22,117,-10,-16,117,-34,-1,-2,-26,-27,-28,-29,-30,-31,-3,-4,-5,223,-38,-83,117,117,-196,-203,-197,117,117,117,-32,117,-7,117,-205,117,117,117,-209,-213,-215,-216,-217,117,117,117,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,117,117,117,117,-14,-15,-20,117,-21,-23,117,117,-25,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-198,-192,-8,117,-194,-6,117,-214,-218,117,-12,-13,223,223,-39,-40,-35,-36,-37,117,117,-9,117,-193,117,-33,117,-210,117,117,-11,-24,117,-206,-208,-211,117,-212,-207,]),'TILDA':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,82,86,88,92,102,103,105,109,114,115,116,117,118,119,131,133,135,157,158,159,160,161,162,166,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,264,265,269,274,275,277,310,320,326,327,328,330,331,332,333,337,348,349,350,357,358,359,],[118,-200,-199,-82,-201,-195,118,118,-202,-186,-187,-188,-189,-190,-191,-204,118,118,118,118,118,118,118,118,-26,-27,-28,-29,-30,-31,-83,118,118,-196,-203,-197,118,118,118,118,118,-205,118,118,118,-209,-213,-215,-216,-217,118,118,118,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,-198,-192,118,-194,118,-214,-218,118,118,118,118,-193,118,118,-210,118,118,118,-206,-208,-211,118,-212,-207,]),'EXCLAIM':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,82,86,88,92,102,103,105,109,114,115,116,117,118,119,131,133,135,157,158,159,160,161,162,166,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,264,265,269,274,275,277,310,320,326,327,328,330,331,332,333,337,348,349,350,357,358,359,],[119,-200,-199,-82,-201,-195,119,119,-202,-186,-187,-188,-189,-190,-191,-204,119,119,119,119,119,119,119,119,-26,-27,-28,-29,-30,-31,-83,119,119,-196,-203,-197,119,119,119,119,119,-205,119,119,119,-209,-213,-215,-216,-217,119,119,119,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-198,-192,119,-194,119,-214,-218,119,119,119,119,-193,119,119,-210,119,119,119,-206,-208,-211,119,-212,-207,]),'CONSTANT':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,82,86,88,92,102,103,105,109,114,115,116,117,118,119,131,133,135,157,158,159,160,161,162,166,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,264,265,269,274,275,277,310,320,326,327,328,330,331,332,333,337,348,349,350,357,358,359,],[121,-200,-199,-82,-201,-195,121,121,-202,-186,-187,-188,-189,-190,-191,-204,121,121,121,121,121,121,121,121,-26,-27,-28,-29,-30,-31,-83,121,121,-196,-203,-197,121,121,121,121,121,-205,121,121,121,-209,-213,-215,-216,-217,121,121,121,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-198,-192,121,-194,121,-214,-218,121,121,121,121,-193,121,121,-210,121,121,121,-206,-208,-211,121,-212,-207,]),'CHARACTER':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,82,86,88,92,102,103,105,109,114,115,116,117,118,119,131,133,135,157,158,159,160,161,162,166,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,264,265,269,274,275,277,310,320,326,327,328,330,331,332,333,337,348,349,350,357,358,359,],[122,-200,-199,-82,-201,-195,122,122,-202,-186,-187,-188,-189,-190,-191,-204,122,122,122,122,122,122,122,122,-26,-27,-28,-29,-30,-31,-83,122,122,-196,-203,-197,122,122,122,122,122,-205,122,122,122,-209,-213,-215,-216,-217,122,122,122,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-198,-192,122,-194,122,-214,-218,122,122,122,122,-193,122,122,-210,122,122,122,-206,-208,-211,122,-212,-207,]),'STRING_LITERAL':([41,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,82,86,88,92,102,103,105,109,114,115,116,117,118,119,131,133,135,157,158,159,160,161,162,166,168,169,170,171,175,176,177,179,180,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,259,260,264,265,269,274,275,277,310,320,326,327,328,330,331,332,333,337,348,349,350,357,358,359,],[123,-200,-199,-82,-201,-195,123,123,-202,-186,-187,-188,-189,-190,-191,-204,123,123,123,123,123,123,123,123,-26,-27,-28,-29,-30,-31,-83,123,123,-196,-203,-197,123,123,123,123,123,-205,123,123,123,-209,-213,-215,-216,-217,123,123,123,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-198,-192,123,-194,123,-214,-218,123,123,123,123,-193,123,123,-210,123,123,123,-206,-208,-211,123,-212,-207,]),'EQUAL':([47,49,53,55,57,58,59,81,97,99,101,104,107,108,112,113,121,122,123,130,136,142,155,165,167,203,204,205,207,208,211,229,230,236,237,261,268,283,284,302,325,329,334,335,],[-142,-145,135,-140,-141,-143,-144,-7,186,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-142,-139,-151,257,-32,-7,-14,-15,-20,-21,-23,-25,-147,-148,-149,-150,-8,-6,-12,-13,-146,-9,-33,-11,-24,]),'ELSE':([70,74,75,76,77,78,79,80,157,159,169,176,177,179,180,181,259,260,265,274,275,327,348,349,359,],[-195,-186,-187,-188,-189,-190,-191,-204,-196,-197,-205,-209,-213,-215,-216,-217,-198,-192,-194,-214,-218,-193,357,-208,-207,]),'DOT':([81,101,107,108,112,113,121,122,123,167,203,204,261,268,283,284,325,334,],[-7,201,-10,-16,-1,-2,-3,-4,-5,-7,-14,-15,-8,-6,-12,-13,-9,-11,]),'PTR_OP':([81,101,107,108,112,113,121,122,123,167,203,204,261,268,283,284,325,334,],[-7,202,-10,-16,-1,-2,-3,-4,-5,-7,-14,-15,-8,-6,-12,-13,-9,-11,]),'MUL_ASSIGN':([81,97,99,101,104,107,108,112,113,121,122,123,165,167,203,204,205,207,208,211,261,268,283,284,325,329,334,335,],[-7,187,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-9,-33,-11,-24,]),'DIV_ASSIGN':([81,97,99,101,104,107,108,112,113,121,122,123,165,167,203,204,205,207,208,211,261,268,283,284,325,329,334,335,],[-7,188,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-9,-33,-11,-24,]),'MOD_ASSIGN':([81,97,99,101,104,107,108,112,113,121,122,123,165,167,203,204,205,207,208,211,261,268,283,284,325,329,334,335,],[-7,189,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-9,-33,-11,-24,]),'ADD_ASSIGN':([81,97,99,101,104,107,108,112,113,121,122,123,165,167,203,204,205,207,208,211,261,268,283,284,325,329,334,335,],[-7,190,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-9,-33,-11,-24,]),'SUB_ASSIGN':([81,97,99,101,104,107,108,112,113,121,122,123,165,167,203,204,205,207,208,211,261,268,283,284,325,329,334,335,],[-7,191,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-9,-33,-11,-24,]),'LEFT_ASSIGN':([81,97,99,101,104,107,108,112,113,121,122,123,165,167,203,204,205,207,208,211,261,268,283,284,325,329,334,335,],[-7,192,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-9,-33,-11,-24,]),'RIGHT_ASSIGN':([81,97,99,101,104,107,108,112,113,121,122,123,165,167,203,204,205,207,208,211,261,268,283,284,325,329,334,335,],[-7,193,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-9,-33,-11,-24,]),'AND_ASSIGN':([81,97,99,101,104,107,108,112,113,121,122,123,165,167,203,204,205,207,208,211,261,268,283,284,325,329,334,335,],[-7,194,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-9,-33,-11,-24,]),'XOR_ASSIGN':([81,97,99,101,104,107,108,112,113,121,122,123,165,167,203,204,205,207,208,211,261,268,283,284,325,329,334,335,],[-7,195,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-9,-33,-11,-24,]),'OR_ASSIGN':([81,97,99,101,104,107,108,112,113,121,122,123,165,167,203,204,205,207,208,211,261,268,283,284,325,329,334,335,],[-7,196,-67,-19,-22,-10,-16,-1,-2,-3,-4,-5,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-9,-33,-11,-24,]),'SLASH':([81,99,101,104,107,108,110,112,113,121,122,123,129,165,167,203,204,205,207,208,211,261,268,283,284,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,-1,-2,-3,-4,-5,225,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,225,225,-35,-36,-37,-9,-33,-11,-24,]),'PERCENT':([81,99,101,104,107,108,110,112,113,121,122,123,129,165,167,203,204,205,207,208,211,261,268,283,284,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,-1,-2,-3,-4,-5,226,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,226,226,-35,-36,-37,-9,-33,-11,-24,]),'LEFT_OP':([81,99,101,104,107,108,110,112,113,121,122,123,127,128,129,165,167,203,204,205,207,208,211,261,268,283,284,289,290,291,292,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,-1,-2,-3,-4,-5,220,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,220,220,220,220,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'RIGHT_OP':([81,99,101,104,107,108,110,112,113,121,122,123,127,128,129,165,167,203,204,205,207,208,211,261,268,283,284,289,290,291,292,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,-1,-2,-3,-4,-5,221,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,221,221,221,221,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'LESS':([81,99,101,104,107,108,110,112,113,121,122,123,125,127,128,129,165,167,203,204,205,207,208,211,261,268,283,284,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,-1,-2,-3,-4,-5,214,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-45,-46,-47,-48,214,214,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'GREATER':([81,99,101,104,107,108,110,112,113,121,122,123,125,127,128,129,165,167,203,204,205,207,208,211,261,268,283,284,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,-1,-2,-3,-4,-5,215,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-45,-46,-47,-48,215,215,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'LE_OP':([81,99,101,104,107,108,110,112,113,121,122,123,125,127,128,129,165,167,203,204,205,207,208,211,261,268,283,284,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,-1,-2,-3,-4,-5,216,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-45,-46,-47,-48,216,216,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'GE_OP':([81,99,101,104,107,108,110,112,113,121,122,123,125,127,128,129,165,167,203,204,205,207,208,211,261,268,283,284,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,-1,-2,-3,-4,-5,217,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-45,-46,-47,-48,217,217,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'CARET':([81,99,101,104,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,165,167,203,204,205,207,208,211,261,268,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,212,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,212,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'PIPE':([81,99,101,104,106,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,165,167,203,204,205,207,208,211,261,268,281,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,210,-10,-16,-34,-57,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,210,-12,-13,-58,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'AND_OP':([81,99,100,101,104,106,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,165,167,203,204,205,207,208,211,261,268,280,281,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,199,-19,-22,-59,-10,-16,-34,-57,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,199,-60,-12,-13,-58,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'QUEST':([81,98,99,100,101,104,106,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,165,167,203,204,205,207,208,211,261,268,280,281,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,197,-32,-61,-19,-22,-59,-10,-16,-34,-57,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-62,-60,-12,-13,-58,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'OR_OP':([81,98,99,100,101,104,106,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,165,167,203,204,205,207,208,211,261,268,280,281,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,198,-32,-61,-19,-22,-59,-10,-16,-34,-57,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-62,-60,-12,-13,-58,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'EQ_OP':([81,99,101,104,107,108,110,112,113,121,122,123,124,125,126,127,128,129,165,167,203,204,205,207,208,211,261,268,283,284,288,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,-1,-2,-3,-4,-5,-52,-49,218,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-52,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'NE_OP':([81,99,101,104,107,108,110,112,113,121,122,123,124,125,126,127,128,129,165,167,203,204,205,207,208,211,261,268,283,284,288,289,290,291,292,293,294,295,296,297,298,299,300,301,325,329,334,335,],[-7,-32,-19,-22,-10,-16,-34,-1,-2,-3,-4,-5,-52,-49,219,-44,-41,-38,-32,-7,-14,-15,-20,-21,-23,-25,-8,-6,-12,-13,-52,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,-9,-33,-11,-24,]),'R_SQUARE':([93,96,98,99,100,101,104,106,107,108,110,111,112,113,120,121,122,123,124,125,127,128,129,133,164,165,167,203,204,205,207,208,211,228,244,261,266,268,278,280,281,282,283,284,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,310,312,325,329,334,335,341,352,],[-79,-65,-63,-32,-61,-19,-22,-59,-10,-16,-34,-57,-1,-2,-55,-3,-4,-5,-53,-49,-44,-41,-38,229,-81,-32,-7,-14,-15,-20,-21,-23,-25,302,311,-8,-80,-6,-66,-62,-60,334,-12,-13,-58,-56,-54,-45,-46,-47,-48,-50,-51,-42,-43,-39,-40,-35,-36,-37,340,342,-9,-33,-11,-24,356,-64,]),'ELLIPSIS':([239,],[306,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,2,],[1,38,]),'external_declaration':([0,2,],[2,2,]),'function_definition':([0,2,],[3,3,]),'other_declarations':([0,2,],[4,4,]),'function_header':([0,2,],[5,5,]),'declaration':([0,2,5,40,41,72,],[6,6,42,69,42,69,]),'fheader_type1':([0,2,],[7,7,]),'fheader_type2':([0,2,],[8,8,]),'declaration_specifiers':([0,2,5,11,12,13,40,41,63,72,239,245,272,309,],[9,9,44,60,61,62,44,44,146,44,146,146,146,146,]),'function_declaration':([0,2,9,44,50,54,132,146,150,242,245,316,319,],[10,10,47,130,130,130,130,130,130,130,130,130,130,]),'storage_class_specifier':([0,2,5,11,12,13,40,41,63,72,239,245,272,309,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'type_specifier':([0,2,5,11,12,13,40,41,63,65,72,86,147,148,151,152,166,209,239,245,246,272,309,],[12,12,12,12,12,12,12,12,12,151,12,151,151,151,151,151,151,151,12,12,151,12,12,]),'type_qualifier':([0,2,5,11,12,13,40,41,56,63,65,72,86,137,147,148,151,152,166,209,239,245,246,272,309,],[13,13,13,13,13,13,13,13,139,13,152,13,152,235,152,152,152,152,152,152,13,13,152,13,13,]),'type':([0,2,5,11,12,13,40,41,63,65,72,86,147,148,151,152,166,209,239,245,246,272,309,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'struct_or_union_specifier':([0,2,5,11,12,13,40,41,63,65,72,86,147,148,151,152,166,209,239,245,246,272,309,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'enum_specifier':([0,2,5,11,12,13,40,41,63,65,72,86,147,148,151,152,166,209,239,245,246,272,309,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'struct_or_union':([0,2,5,11,12,13,40,41,63,65,72,86,147,148,151,152,166,209,239,245,246,272,309,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'compound_statement':([5,40,41,71,72,88,160,161,168,264,328,330,357,],[39,68,75,75,75,75,75,75,75,75,75,75,75,]),'declaration_list':([5,41,],[40,72,]),'compound_statement_begin':([5,40,41,71,72,88,160,161,168,264,328,330,357,],[41,41,41,41,41,41,41,41,41,41,41,41,41,]),'init_declarator_list':([9,44,],[46,46,]),'init_declarator':([9,44,132,],[48,48,227,]),'uninitialized_declaration':([9,44,132,],[51,51,51,]),'initialized_declaration':([9,44,132,],[52,52,52,]),'declarator':([9,44,50,132,146,150,245,319,],[53,53,134,53,240,251,134,251,]),'pointer':([9,44,50,56,132,137,146,150,174,245,272,319,],[54,54,54,138,54,234,242,54,271,316,271,54,]),'direct_declarator':([9,44,50,54,132,146,150,242,245,316,319,],[55,55,55,136,55,55,55,136,55,136,55,]),'variable_declaration':([9,44,50,54,132,146,150,242,245,316,319,],[57,57,57,57,57,57,57,57,57,57,57,]),'variable_declaration1':([9,44,50,54,132,146,150,242,245,316,319,],[58,58,58,58,58,58,58,58,58,58,58,]),'variable_declaration2':([9,44,50,54,132,146,150,242,245,316,319,],[59,59,59,59,59,59,59,59,59,59,59,]),'statement_list':([41,72,],[71,160,]),'statement':([41,71,72,88,160,161,168,264,328,330,357,],[73,158,73,177,158,260,265,327,348,349,359,]),'labeled_statement':([41,71,72,88,160,161,168,264,328,330,357,],[74,74,74,74,74,74,74,74,74,74,74,]),'expression_statement':([41,71,72,88,160,161,168,184,264,277,328,330,357,],[76,76,76,76,76,76,76,277,76,332,76,76,76,]),'selection_statement':([41,71,72,88,160,161,168,264,328,330,357,],[77,77,77,77,77,77,77,77,77,77,77,]),'iteration_statement':([41,71,72,88,160,161,168,264,328,330,357,],[78,78,78,78,78,78,78,78,78,78,78,]),'jump_statement':([41,71,72,88,160,161,168,264,328,330,357,],[79,79,79,79,79,79,79,79,79,79,79,]),'expression':([41,71,72,86,88,92,160,161,166,168,171,175,183,184,197,200,206,209,264,277,328,330,332,357,],[84,84,84,172,84,182,84,84,172,84,267,273,276,84,279,282,172,172,84,84,84,84,351,84,]),'iteration_header':([41,71,72,88,160,161,168,264,328,330,357,],[88,88,88,88,88,88,88,88,88,88,88,]),'assignment_expression':([41,71,72,86,88,92,135,160,161,162,166,168,170,171,175,183,184,185,197,200,206,209,233,264,277,326,328,330,332,337,357,],[93,93,93,93,93,93,232,93,93,263,93,93,266,93,93,93,93,278,93,93,93,93,232,93,93,347,93,93,93,232,93,]),'conditional_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,200,206,209,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[96,96,96,164,96,96,96,164,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,164,164,164,96,96,164,164,96,96,96,96,352,96,96,]),'assignment_lhs':([41,71,72,86,88,92,135,160,161,162,166,168,170,171,175,183,184,185,197,200,206,209,233,264,277,326,328,330,332,337,357,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'logical_or_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,200,206,209,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'unary_expression':([41,71,72,82,86,88,92,102,103,105,109,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,264,269,277,310,320,326,328,330,332,333,337,357,],[99,99,99,165,99,99,99,205,207,208,165,165,99,99,99,99,99,99,99,99,99,99,99,99,99,165,165,99,99,99,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,99,165,165,165,99,165,99,165,165,99,99,99,99,165,99,99,]),'logical_and_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,200,206,209,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,280,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'postfix_expression':([41,71,72,82,86,88,92,102,103,105,109,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,264,269,277,310,320,326,328,330,332,333,337,357,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'unary_op_before_cast_exp':([41,71,72,82,86,88,92,102,103,105,109,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,264,269,277,310,320,326,328,330,332,333,337,357,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'inclusive_or_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,281,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'primary_expression':([41,71,72,82,86,88,92,102,103,105,109,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,264,269,277,310,320,326,328,330,332,333,337,357,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'function_call':([41,71,72,82,86,88,92,102,103,105,109,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,264,269,277,310,320,326,328,330,332,333,337,357,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'unary_operator':([41,71,72,82,86,88,92,102,103,105,109,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,264,269,277,310,320,326,328,330,332,333,337,357,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'cast_expression':([41,71,72,82,86,88,92,109,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,264,269,277,310,320,326,328,330,332,333,337,357,],[110,110,110,110,110,110,110,211,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,299,300,301,110,110,110,110,110,329,110,110,110,110,110,110,110,110,110,110,]),'exclusive_or_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,286,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'variable_use':([41,71,72,82,86,88,92,102,103,105,109,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,264,269,277,310,320,326,328,330,332,333,337,357,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'const_or_parenthesis':([41,71,72,82,86,88,92,102,103,105,109,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,233,244,252,257,264,269,277,310,320,326,328,330,332,333,337,357,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'and_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,287,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'equality_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,288,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'relational_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,218,219,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,293,294,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'equality_exp_lhs':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'shift_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,289,290,291,292,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'additive_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,295,296,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'multiplicative_expression':([41,71,72,82,86,88,92,133,135,160,161,162,166,168,170,171,175,183,184,185,197,198,199,200,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,233,244,252,257,264,277,310,320,326,328,330,332,333,337,357,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,297,298,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'type_qualifier_list':([56,],[137,]),'parameter_type_list':([63,245,272,309,],[141,315,315,339,]),'identifier_list':([63,],[143,]),'parameter_list':([63,245,272,309,],[144,144,144,144,]),'parameter_declaration':([63,239,245,272,309,],[145,307,145,145,145,]),'struct_declaration_list':([65,147,],[148,246,]),'struct_declaration':([65,147,148,246,],[149,149,248,248,]),'specifier_qualifier_list':([65,86,147,148,151,152,166,209,246,],[150,174,150,150,253,254,174,174,150,]),'enumerator_list':([66,156,],[153,258,]),'enumerator':([66,156,256,],[154,154,322,]),'constant_expression':([82,133,244,252,257,310,320,],[163,228,312,321,323,341,346,]),'type_name':([86,166,209,],[173,173,285,]),'iteration_body':([88,],[176,]),'assignment_operator':([97,],[185,]),'initializer':([135,233,337,],[231,304,354,]),'abstract_declarator':([146,174,245,272,],[241,270,314,314,]),'direct_abstract_declarator':([146,174,242,245,271,272,316,],[243,243,308,243,308,243,308,]),'struct_declarator_list':([150,],[249,]),'struct_declarator':([150,319,],[250,345,]),'argument_expression_list':([162,],[262,]),'initializer_list':([233,],[303,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('primary_expression -> variable_use','primary_expression',1,'p_primary_expression','C_Parser_new.py',14),
  ('primary_expression -> const_or_parenthesis','primary_expression',1,'p_primary_expression','C_Parser_new.py',15),
  ('const_or_parenthesis -> CONSTANT','const_or_parenthesis',1,'p_const_or_parenthesis','C_Parser_new.py',22),
  ('const_or_parenthesis -> CHARACTER','const_or_parenthesis',1,'p_const_or_parenthesis','C_Parser_new.py',23),
  ('const_or_parenthesis -> STRING_LITERAL','const_or_parenthesis',1,'p_const_or_parenthesis','C_Parser_new.py',24),
  ('const_or_parenthesis -> L_PAREN expression R_PAREN','const_or_parenthesis',3,'p_const_or_parenthesis','C_Parser_new.py',25),
  ('variable_use -> IDENTIFIER','variable_use',1,'p_variable_use','C_Parser_new.py',43),
  ('function_call -> IDENTIFIER L_PAREN R_PAREN','function_call',3,'p_function_call','C_Parser_new.py',56),
  ('function_call -> IDENTIFIER L_PAREN argument_expression_list R_PAREN','function_call',4,'p_function_call','C_Parser_new.py',57),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','C_Parser_new.py',79),
  ('postfix_expression -> postfix_expression L_SQUARE expression R_SQUARE','postfix_expression',4,'p_postfix_expression','C_Parser_new.py',80),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','C_Parser_new.py',81),
  ('postfix_expression -> postfix_expression PTR_OP IDENTIFIER','postfix_expression',3,'p_postfix_expression','C_Parser_new.py',82),
  ('postfix_expression -> postfix_expression INC_OP','postfix_expression',2,'p_postfix_expression','C_Parser_new.py',83),
  ('postfix_expression -> postfix_expression DEC_OP','postfix_expression',2,'p_postfix_expression','C_Parser_new.py',84),
  ('postfix_expression -> function_call','postfix_expression',1,'p_postfix_expression','C_Parser_new.py',85),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','C_Parser_new.py',115),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','C_Parser_new.py',116),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','C_Parser_new.py',130),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression','C_Parser_new.py',131),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression','C_Parser_new.py',132),
  ('unary_expression -> unary_op_before_cast_exp','unary_expression',1,'p_unary_expression','C_Parser_new.py',133),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','C_Parser_new.py',134),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','C_Parser_new.py',135),
  ('unary_op_before_cast_exp -> unary_operator cast_expression','unary_op_before_cast_exp',2,'p_unary_op_before_cast_exp','C_Parser_new.py',159),
  ('unary_operator -> AMP','unary_operator',1,'p_unary_operator','C_Parser_new.py',169),
  ('unary_operator -> STAR','unary_operator',1,'p_unary_operator','C_Parser_new.py',170),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','C_Parser_new.py',171),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','C_Parser_new.py',172),
  ('unary_operator -> TILDA','unary_operator',1,'p_unary_operator','C_Parser_new.py',173),
  ('unary_operator -> EXCLAIM','unary_operator',1,'p_unary_operator','C_Parser_new.py',174),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','C_Parser_new.py',184),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','C_Parser_new.py',185),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','C_Parser_new.py',200),
  ('multiplicative_expression -> multiplicative_expression STAR cast_expression','multiplicative_expression',3,'p_multiplicative_expression','C_Parser_new.py',201),
  ('multiplicative_expression -> multiplicative_expression SLASH cast_expression','multiplicative_expression',3,'p_multiplicative_expression','C_Parser_new.py',202),
  ('multiplicative_expression -> multiplicative_expression PERCENT cast_expression','multiplicative_expression',3,'p_multiplicative_expression','C_Parser_new.py',203),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','C_Parser_new.py',220),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','C_Parser_new.py',221),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','C_Parser_new.py',222),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','C_Parser_new.py',238),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_shift_expression','C_Parser_new.py',239),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_shift_expression','C_Parser_new.py',240),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','C_Parser_new.py',255),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',256),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',257),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',258),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_relational_expression','C_Parser_new.py',259),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','C_Parser_new.py',274),
  ('equality_expression -> equality_exp_lhs EQ_OP relational_expression','equality_expression',3,'p_equality_expression','C_Parser_new.py',275),
  ('equality_expression -> equality_exp_lhs NE_OP relational_expression','equality_expression',3,'p_equality_expression','C_Parser_new.py',276),
  ('equality_exp_lhs -> equality_expression','equality_exp_lhs',1,'p_equality_exp_lhs','C_Parser_new.py',291),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','C_Parser_new.py',301),
  ('and_expression -> and_expression AMP equality_expression','and_expression',3,'p_and_expression','C_Parser_new.py',302),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','C_Parser_new.py',317),
  ('exclusive_or_expression -> exclusive_or_expression CARET and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','C_Parser_new.py',318),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','C_Parser_new.py',333),
  ('inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','C_Parser_new.py',334),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','C_Parser_new.py',349),
  ('logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','C_Parser_new.py',350),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','C_Parser_new.py',365),
  ('logical_or_expression -> logical_or_expression OR_OP logical_and_expression','logical_or_expression',3,'p_logical_or_expression','C_Parser_new.py',366),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','C_Parser_new.py',383),
  ('conditional_expression -> logical_or_expression QUEST expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','C_Parser_new.py',384),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','C_Parser_new.py',399),
  ('assignment_expression -> assignment_lhs assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','C_Parser_new.py',400),
  ('assignment_lhs -> unary_expression','assignment_lhs',1,'p_assignment_lhs','C_Parser_new.py',428),
  ('assignment_operator -> EQUAL','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',436),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',437),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',438),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',439),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',440),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',441),
  ('assignment_operator -> LEFT_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',442),
  ('assignment_operator -> RIGHT_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',443),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',444),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',445),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','C_Parser_new.py',446),
  ('expression -> assignment_expression','expression',1,'p_expression','C_Parser_new.py',457),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','C_Parser_new.py',458),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','C_Parser_new.py',473),
  ('declaration -> declaration_specifiers SEMI','declaration',2,'p_declaration','C_Parser_new.py',481),
  ('declaration -> declaration_specifiers init_declarator_list SEMI','declaration',3,'p_declaration','C_Parser_new.py',482),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','C_Parser_new.py',503),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','C_Parser_new.py',504),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','C_Parser_new.py',505),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','C_Parser_new.py',506),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','C_Parser_new.py',507),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','C_Parser_new.py',508),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','C_Parser_new.py',522),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','C_Parser_new.py',523),
  ('init_declarator -> uninitialized_declaration','init_declarator',1,'p_init_declarator','C_Parser_new.py',542),
  ('init_declarator -> initialized_declaration','init_declarator',1,'p_init_declarator','C_Parser_new.py',543),
  ('initialized_declaration -> declarator EQUAL initializer','initialized_declaration',3,'p_initialized_declaration','C_Parser_new.py',551),
  ('uninitialized_declaration -> declarator','uninitialized_declaration',1,'p_uninitialized_declaration','C_Parser_new.py',572),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',581),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',582),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',583),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',584),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','C_Parser_new.py',585),
  ('type -> VOID','type',1,'p_type','C_Parser_new.py',595),
  ('type -> CHAR','type',1,'p_type','C_Parser_new.py',596),
  ('type -> SHORT','type',1,'p_type','C_Parser_new.py',597),
  ('type -> INT','type',1,'p_type','C_Parser_new.py',598),
  ('type -> LONG','type',1,'p_type','C_Parser_new.py',599),
  ('type -> FLOAT','type',1,'p_type','C_Parser_new.py',600),
  ('type -> DOUBLE','type',1,'p_type','C_Parser_new.py',601),
  ('type -> SIGNED','type',1,'p_type','C_Parser_new.py',602),
  ('type -> UNSIGNED','type',1,'p_type','C_Parser_new.py',603),
  ('type_specifier -> type','type_specifier',1,'p_type_specifier','C_Parser_new.py',613),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','C_Parser_new.py',614),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','C_Parser_new.py',615),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE','struct_or_union_specifier',5,'p_struct_or_union_specifier','C_Parser_new.py',623),
  ('struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE','struct_or_union_specifier',4,'p_struct_or_union_specifier','C_Parser_new.py',624),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','C_Parser_new.py',625),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','C_Parser_new.py',646),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','C_Parser_new.py',647),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','C_Parser_new.py',659),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','C_Parser_new.py',660),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI','struct_declaration',3,'p_struct_declaration','C_Parser_new.py',673),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','C_Parser_new.py',683),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','C_Parser_new.py',684),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','C_Parser_new.py',685),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','C_Parser_new.py',686),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','C_Parser_new.py',699),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','C_Parser_new.py',700),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','C_Parser_new.py',713),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','C_Parser_new.py',714),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','C_Parser_new.py',715),
  ('enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE','enum_specifier',4,'p_enum_specifier','C_Parser_new.py',731),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE','enum_specifier',5,'p_enum_specifier','C_Parser_new.py',732),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','C_Parser_new.py',733),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','C_Parser_new.py',751),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','C_Parser_new.py',752),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','C_Parser_new.py',764),
  ('enumerator -> IDENTIFIER EQUAL constant_expression','enumerator',3,'p_enumerator','C_Parser_new.py',765),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','C_Parser_new.py',779),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','C_Parser_new.py',780),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','C_Parser_new.py',790),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','C_Parser_new.py',791),
  ('direct_declarator -> variable_declaration','direct_declarator',1,'p_direct_declarator','C_Parser_new.py',811),
  ('direct_declarator -> function_declaration','direct_declarator',1,'p_direct_declarator','C_Parser_new.py',812),
  ('variable_declaration -> variable_declaration1','variable_declaration',1,'p_variable_declaration','C_Parser_new.py',819),
  ('variable_declaration -> variable_declaration2','variable_declaration',1,'p_variable_declaration','C_Parser_new.py',820),
  ('variable_declaration1 -> IDENTIFIER','variable_declaration1',1,'p_variable_declaration1','C_Parser_new.py',834),
  ('variable_declaration1 -> IDENTIFIER L_SQUARE constant_expression R_SQUARE','variable_declaration1',4,'p_variable_declaration1','C_Parser_new.py',835),
  ('variable_declaration1 -> IDENTIFIER L_SQUARE R_SQUARE','variable_declaration1',3,'p_variable_declaration1','C_Parser_new.py',836),
  ('variable_declaration2 -> L_PAREN declarator R_PAREN','variable_declaration2',3,'p_variable_declaration2','C_Parser_new.py',863),
  ('function_declaration -> IDENTIFIER L_PAREN parameter_type_list R_PAREN','function_declaration',4,'p_function_declaration','C_Parser_new.py',873),
  ('function_declaration -> IDENTIFIER L_PAREN identifier_list R_PAREN','function_declaration',4,'p_function_declaration','C_Parser_new.py',874),
  ('function_declaration -> IDENTIFIER L_PAREN R_PAREN','function_declaration',3,'p_function_declaration','C_Parser_new.py',875),
  ('pointer -> STAR','pointer',1,'p_pointer','C_Parser_new.py',901),
  ('pointer -> STAR type_qualifier_list','pointer',2,'p_pointer','C_Parser_new.py',902),
  ('pointer -> STAR pointer','pointer',2,'p_pointer','C_Parser_new.py',903),
  ('pointer -> STAR type_qualifier_list pointer','pointer',3,'p_pointer','C_Parser_new.py',904),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','C_Parser_new.py',921),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','C_Parser_new.py',922),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','C_Parser_new.py',935),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','C_Parser_new.py',936),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','C_Parser_new.py',949),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','C_Parser_new.py',950),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','C_Parser_new.py',963),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','C_Parser_new.py',964),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','C_Parser_new.py',965),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','C_Parser_new.py',979),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','C_Parser_new.py',980),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','C_Parser_new.py',996),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','C_Parser_new.py',997),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','C_Parser_new.py',1010),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','C_Parser_new.py',1011),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','C_Parser_new.py',1012),
  ('direct_abstract_declarator -> L_SQUARE R_SQUARE','direct_abstract_declarator',2,'p_direct_abstract_declarator','C_Parser_new.py',1025),
  ('direct_abstract_declarator -> L_PAREN R_PAREN','direct_abstract_declarator',2,'p_direct_abstract_declarator','C_Parser_new.py',1026),
  ('direct_abstract_declarator -> L_SQUARE constant_expression R_SQUARE','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',1027),
  ('direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',1028),
  ('direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',1029),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',1030),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQUARE R_SQUARE','direct_abstract_declarator',3,'p_direct_abstract_declarator','C_Parser_new.py',1031),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQUARE constant_expression R_SQUARE','direct_abstract_declarator',4,'p_direct_abstract_declarator','C_Parser_new.py',1032),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator','C_Parser_new.py',1033),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','C_Parser_new.py',1050),
  ('initializer -> L_BRACE initializer_list R_BRACE','initializer',3,'p_initializer','C_Parser_new.py',1051),
  ('initializer -> L_BRACE initializer_list COMMA R_BRACE','initializer',4,'p_initializer','C_Parser_new.py',1052),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','C_Parser_new.py',1069),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','C_Parser_new.py',1070),
  ('statement -> labeled_statement','statement',1,'p_statement','C_Parser_new.py',1083),
  ('statement -> compound_statement','statement',1,'p_statement','C_Parser_new.py',1084),
  ('statement -> expression_statement','statement',1,'p_statement','C_Parser_new.py',1085),
  ('statement -> selection_statement','statement',1,'p_statement','C_Parser_new.py',1086),
  ('statement -> iteration_statement','statement',1,'p_statement','C_Parser_new.py',1087),
  ('statement -> jump_statement','statement',1,'p_statement','C_Parser_new.py',1088),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','C_Parser_new.py',1098),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','C_Parser_new.py',1099),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','C_Parser_new.py',1100),
  ('compound_statement -> compound_statement_begin R_BRACE','compound_statement',2,'p_compound_statement','C_Parser_new.py',1114),
  ('compound_statement -> compound_statement_begin statement_list R_BRACE','compound_statement',3,'p_compound_statement','C_Parser_new.py',1115),
  ('compound_statement -> compound_statement_begin declaration_list R_BRACE','compound_statement',3,'p_compound_statement','C_Parser_new.py',1116),
  ('compound_statement -> compound_statement_begin declaration_list statement_list R_BRACE','compound_statement',4,'p_compound_statement','C_Parser_new.py',1117),
  ('compound_statement_begin -> L_BRACE','compound_statement_begin',1,'p_compound_statement_begin','C_Parser_new.py',1135),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','C_Parser_new.py',1144),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','C_Parser_new.py',1145),
  ('statement_list -> statement','statement_list',1,'p_statement_list','C_Parser_new.py',1162),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','C_Parser_new.py',1163),
  ('expression_statement -> SEMI','expression_statement',1,'p_expression_statement','C_Parser_new.py',1176),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','C_Parser_new.py',1177),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','C_Parser_new.py',1195),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','C_Parser_new.py',1196),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','C_Parser_new.py',1197),
  ('iteration_statement -> iteration_header iteration_body','iteration_statement',2,'p_iteration_statement','C_Parser_new.py',1217),
  ('iteration_header -> WHILE L_PAREN expression R_PAREN','iteration_header',4,'p_iteration_header','C_Parser_new.py',1225),
  ('iteration_header -> FOR L_PAREN expression_statement expression_statement R_PAREN','iteration_header',5,'p_iteration_header','C_Parser_new.py',1226),
  ('iteration_header -> FOR L_PAREN expression_statement expression_statement expression R_PAREN','iteration_header',6,'p_iteration_header','C_Parser_new.py',1227),
  ('iteration_body -> statement','iteration_body',1,'p_iteration_body','C_Parser_new.py',1250),
  ('jump_statement -> GOTO IDENTIFIER SEMI','jump_statement',3,'p_jump_statement','C_Parser_new.py',1257),
  ('jump_statement -> CONTINUE SEMI','jump_statement',2,'p_jump_statement','C_Parser_new.py',1258),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','C_Parser_new.py',1259),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement','C_Parser_new.py',1260),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement','C_Parser_new.py',1261),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','C_Parser_new.py',1278),
  ('translation_unit -> external_declaration translation_unit','translation_unit',2,'p_translation_unit','C_Parser_new.py',1279),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','C_Parser_new.py',1296),
  ('external_declaration -> other_declarations','external_declaration',1,'p_external_declaration','C_Parser_new.py',1297),
  ('other_declarations -> declaration','other_declarations',1,'p_other_declarations','C_Parser_new.py',1305),
  ('function_header -> fheader_type1','function_header',1,'p_function_header','C_Parser_new.py',1314),
  ('function_header -> fheader_type2','function_header',1,'p_function_header','C_Parser_new.py',1315),
  ('fheader_type1 -> declaration_specifiers function_declaration','fheader_type1',2,'p_fheader_type1','C_Parser_new.py',1326),
  ('fheader_type2 -> function_declaration','fheader_type2',1,'p_fheader_type2','C_Parser_new.py',1339),
  ('function_definition -> function_header compound_statement','function_definition',2,'p_function_definition','C_Parser_new.py',1349),
  ('function_definition -> function_header declaration_list compound_statement','function_definition',3,'p_function_definition','C_Parser_new.py',1350),
]
